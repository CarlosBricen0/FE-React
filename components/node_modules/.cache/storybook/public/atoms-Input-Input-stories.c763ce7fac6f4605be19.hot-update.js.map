{"version":3,"file":"atoms-Input-Input-stories.c763ce7fac6f4605be19.hot-update.js","mappings":";;;;;;;;;;;;;AAKA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;AChCA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACHA;AACA;AAEA;AAEA;AAWA;AACA;;;;;;;;;;;;;;;;AChBA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;;AAEA;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA","sources":["webpack://components/./helpers/currencyFormat/index.ts","webpack://components/./helpers/getGlobalStyle/index.ts","webpack://components/./helpers/index.ts","webpack://components/./helpers/measurementUnitAbb/index.ts","webpack://components/./helpers/mediaQueries/index.ts","webpack://components/./helpers/transformCouponLineThrough/index.ts"],"sourcesContent":["interface CurrencyFormat {\n  number: number;\n  bool?: boolean;\n}\n\nexport const currencyFormat = ({\n  number,\n  bool = true\n}: CurrencyFormat): string => {\n\n  let formatNumber = 0\n\n  // If true then divide number\n  if (bool) {\n    formatNumber = number / 100\n  }\n  // Else just assign it\n  else {\n    formatNumber = number\n  }\n\n  const formatterPeso = new Intl.NumberFormat('es-CL', {\n    style: 'currency',\n    currency: 'CLP',\n    minimumFractionDigits: 0\n  })\n\n  if (formatNumber >= 0) {\n    return formatterPeso.format(formatNumber)\n  }\n\n  return '- ' + formatterPeso.format(Math.abs(formatNumber))\n}","export const getGlobalStyle = (style: string): string => {\n  return `var(${style})`\n}\n","export * from './currencyFormat'\nexport * from './getGlobalStyle'\nexport * from './measurementUnitAbb'\nexport * from './mediaQueries'\nexport * from './transformCouponLineThrough'","export const measurementUnitAbb = (unit: string): string => {\n  if (!unit || typeof unit !== 'string') return ''\n\n  const text = unit.toLowerCase()\n\n  const result = text\n    ?.replace('litro', 'L')\n    ?.replace('metros', 'M')\n    ?.replace('unidad', 'Un')\n    ?.replace('caja', 'Cj')\n    ?.replace('display', 'Dis')\n    ?.replace('paquete', 'Paq')\n    ?.replace('bolsa', 'Bol')\n    ?.replace('kilogramos', 'Kg')\n    ?.replace('mililitros', 'Ml')\n\n  return result || unit\n}\n","import React from 'react'\nimport { useMediaQuery } from 'react-responsive'\n\nexport const BigScreen = ({ children }: { children: React.ReactElement }): React.ReactElement => {\n  return useMediaQuery({ minWidth: 1280 }) ? children : null\n}\n\nexport const SmallScreen = ({ children }: { children: React.ReactElement }): React.ReactElement => {\n  return useMediaQuery({ maxWidth: 1279 }) ? children : null\n}\n","import { CSSProperties } from 'react'\n\n/**\n * @param lineThrough contains the index of the component that should be line through, 0 -> title, 1 -> subtitle, 2 -> lead\n * @returns\n */\n\nexport const transformCouponLineThrough = (\n  lineThrough: string[]\n) => {\n  const styles: {\n    titleTextDecoration?: CSSProperties['textDecorationLine'];\n    loadTextDecoration?: CSSProperties['textDecorationLine'];\n    subtitleTextDecoration?: CSSProperties['textDecorationLine'];\n  } = {}\n\n  for (const line of lineThrough) {\n    switch (line) {\n      case '0':\n        styles.titleTextDecoration = 'line-through'\n        break\n      case '1':\n        styles.loadTextDecoration = 'line-through'\n        break\n      case '2':\n        styles.subtitleTextDecoration = 'line-through'\n        break\n    }\n  }\n\n  return styles\n}\n"],"names":[],"sourceRoot":""}