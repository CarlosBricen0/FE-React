{"version":3,"file":"stories_organisms_Shelf_Shelf_tsx.40f66dcf9be584c763ba.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAKA;AAtCA;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AAKA;AAKA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAGA;AAnKA;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AAMA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AACA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;ACzZA;AAKA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AAGA;AA3MA;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AA7DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdsources":["webpack://components/./stories/organisms/Shelf/ChipOffer/index.tsx","webpack://components/./stories/organisms/Shelf/ShelfHorizontal.tsx","webpack://components/./stories/organisms/Shelf/ShelfPrice.tsx","webpack://components/./stories/organisms/Shelf/v1/ShelfV1.tsx","webpack://components/./stories/organisms/Shelf/v2/ShelfAddToCart/ShelfAddToCart.tsx","webpack://components/./stories/organisms/Shelf/v2/ShelfSideButton/index.tsx","webpack://components/./stories/organisms/Shelf/v2/ShelfV2.tsx"],"sourcesContent":["import { getGlobalStyle } from '../../../../helpers'\nimport { Text } from '../../../atoms'\nimport { Container, Row } from '../../../layout'\n\nexport interface ChipOfferPros {\n    fontSizeChipOffer: typeof Text.arguments.fontSize;\n    offer: number | string;\n    padding: string;\n    styled: string;\n    width: string;\n}\n\nexport const ChipOffer = ({ \n  fontSizeChipOffer,\n  offer,\n  padding,\n  styled,\n  width\n}: ChipOfferPros): React.ReactElement<ChipOfferPros> => {\n  \n  return (\n    <Container\n      margin='0px 8px 0px 0px'\n      maxWidth={width}\n      position='relative'\n      zIndex={getGlobalStyle('--z-index-0')}\n    >\n\n      <Row\n        backgroundColor={getGlobalStyle('--color-background-gray-light')}\n        borderRadius={getGlobalStyle('--border-radius-2xs')}\n        customClassName={styled}\n        padding={padding}\n        zIndex={getGlobalStyle('--z-index-0')}\n      >\n        <Text\n          color='primary'\n          fontSize={fontSizeChipOffer}\n          fontWeight='semibold'\n          textAlign='center'\n          type='label'\n        >\n          {offer}\n        </Text>\n\n      </Row>\n      \n    </Container>\n  )\n\n}\n","import React from 'react'\nimport {\n  Link,\n  Picture,\n  Text\n} from '../../atoms'\nimport {\n  Column,\n  Row,\n  Spacer\n} from '../../layout'\nimport { getGlobalStyle } from '../../../helpers'\nimport { ChipOffer } from './ChipOffer'\nimport { ShelfPrice } from './ShelfPrice'\nimport { ChipProps } from '../../molecules'\n\nimport styles from './Shelf.module.css'\n\ninterface ShelfHorizontalProps extends React.HTMLProps<HTMLDivElement> {\n  alignItemsInOffer: 'center' | 'start';\n  brand?: string;\n  customClassName?: string;\n  altText?: string;\n  fontSizeChipOffer: string ;\n  fontSizeMobile: 'md' | 'lg' ;\n  fontSizeMobileOffer: 'sm' | 'md' ;\n  format?: string;\n  img?: string;\n  isMobile: boolean;\n  isPromotion?: boolean;\n  linkWrapper?: React.FunctionComponent;\n  justifyContentPrice: 'center' | 'start';\n  listPrice?: number;\n  marginChipOffer: string;\n  offer?: number | string;\n  orientation?: 'vertical' | 'horizontal';\n  ppum?: string;\n  ppumListPrice?: string;\n  price?: number;\n  promotion?: { image?: string } & ChipProps;\n  stock?: boolean;\n  styledChipOffer: string ;\n  title?: string;\n  typePromotion4: boolean ;\n  typePromotion?: number;\n  underlineInOffer: 'none' | 'line-through' ;\n  url?: string;\n  validateListPrice: boolean ;\n  onClickProduct?: () => void;\n}\n\nexport const ShelfHorizontal = ({\n  alignItemsInOffer,\n  brand,\n  altText,\n  fontSizeChipOffer,\n  fontSizeMobile,\n  fontSizeMobileOffer,\n  format,\n  img,\n  isMobile,\n  isPromotion,\n  justifyContentPrice,\n  linkWrapper,\n  listPrice,\n  marginChipOffer,\n  offer,\n  orientation,\n  ppum,\n  ppumListPrice,\n  price,\n  promotion,\n  stock,\n  styledChipOffer,\n  title,\n  typePromotion,\n  typePromotion4,\n  underlineInOffer,\n  url,\n  validateListPrice,\n  onClickProduct\n}: ShelfHorizontalProps): React.ReactElement<ShelfHorizontalProps> => {\n\n  const shelfPriceProps = {\n    fontSizeMobile,\n    fontSizeMobileOffer,\n    listPrice,\n    orientation,\n    ppum,\n    ppumListPrice,\n    price,\n    underlineInOffer,\n    validateListPrice\n  }\n\n  return (\n    <Row justifyContent='between' minHeight='100px'>\n      <>\n        <Link\n          href={url}\n          title={title}\n          underline='none'\n          wrapper={linkWrapper}\n        >\n          <Column\n            clickable='pointer'\n            onClick={onClickProduct}\n            padding={promotion ? '30px 0px 0px 0px' : '15px 0px'}\n          >\n            <Row clickable='pointer' justifyContent='center'>\n              <Picture\n                alt={altText}\n                border='none'\n                borderRadius='none'\n                className={!stock ? styles.outOfStock : ''}\n                height='70px'\n                src={img}\n                width='70px'\n              />\n            </Row>\n          </Column>\n        </Link>\n      </>\n      <Column height='100px' padding='0px 0px 0px 10px'>\n        <Row>\n          <Text\n            clickable='pointer'\n            color='black'\n            customClassName={styles.brandText}\n            fontSize='sm'\n            fontWeight='semibold'\n          >\n            {brand?.toLowerCase()}\n          </Text>\n        </Row>\n        <Row>\n          <Text\n            clickable='pointer'\n            color='black'\n            customClassName={styles.nameProduct}\n            fontSize={isMobile ? 'sm' : 'md'}\n          >\n            {title?.charAt(0) + title?.toLowerCase().slice(1)}\n          </Text>\n        </Row>\n        <Row>\n          {format ?\n            <Text color='gray' fontSize='sm'>\n              {format}\n            </Text>\n            :\n            <Spacer.Horizontal size={16} />\n          }\n        </Row>\n        {stock ? (\n          <Row justifyContent='start'>\n            <Row alignItems={alignItemsInOffer} justifyContent={justifyContentPrice}>\n              {isPromotion &&\n                <Column\n                  justifyContent='start'\n                  margin={typePromotion !== 4 && marginChipOffer}\n                  maxWidth='max-content'\n                  padding='6px 0px 0px 0px'\n                >\n                  {typePromotion4 &&\n                    <Row\n                      justifyContent='start'\n                      minWidth='21px'\n                      padding='1px 0px 0px 0px'\n                    >\n                      <Text\n                        color='guardsman-red'\n                        fontSize='md'\n                        fontWeight='bold'\n                        textAlign='right'\n                        type='label'\n                      >\n                        {offer}\n                      </Text>\n                      <Spacer.Vertical size={2} />\n                    </Row>\n                  }\n                  {!typePromotion4 &&\n                    <ChipOffer\n                      fontSizeChipOffer={fontSizeChipOffer}\n                      offer={offer}\n                      padding='2px 1px 2px 3px'\n                      styled={styledChipOffer}\n                      width='28px'\n                    />\n                  }\n                </Column>\n              }\n              {/* price */}\n              <Column>\n                {<ShelfPrice {...shelfPriceProps}/>}\n              </Column>\n            </Row>\n          </Row>\n        ) : (\n          <Row\n            backgroundColor={getGlobalStyle('--color-neutral-gray-dark')}\n            borderRadius={getGlobalStyle('--border-radius-2xs')}\n            justifyContent='center'\n            maxWidth='60px'\n          >\n            <Text color='white' fontSize='sm'>\n              sin stock\n            </Text>\n          </Row>\n        )}\n      </Column>\n    </Row>\n  )\n}\n","import React from 'react'\nimport { Text } from '../../atoms'\nimport {\n  Column,\n  Row,\n  Spacer\n} from '../../layout'\nimport { currencyFormat, measurementUnitAbb } from '../../../helpers'\nimport styles from './Shelf.module.css'\n\nexport interface ShelfPriceProps extends React.HTMLProps<HTMLDivElement> {\n  fontSizeMobile: 'md' | 'lg' ;\n  fontSizeMobileOffer: 'sm' | 'md' ;\n  listPrice?: number;\n  orientation?: 'vertical' | 'horizontal';\n  ppum?: string;\n  ppumListPrice?: string;\n  price?: number;\n  underlineInOffer: 'none' | 'line-through' ;\n  validateListPrice: boolean ;\n}\n\nexport const ShelfPrice = ({\n  fontSizeMobile,\n  fontSizeMobileOffer,\n  listPrice,\n  ppum,\n  ppumListPrice,\n  orientation,\n  price,\n  underlineInOffer,\n  validateListPrice\n}: ShelfPriceProps): React.ReactElement<ShelfPriceProps> => {\n\n  return (\n    <>\n      <Row\n        alignItems='center'\n        justifyContent='start'\n        padding={orientation === 'horizontal' ? '6px 0px 0px 0px' : ''}\n      >\n        <Text\n          color='guardsman-red'\n          fontSize={fontSizeMobile}\n          fontWeight='semibold'\n        >\n          {currencyFormat({ number: price, bool: false })}\n        </Text>\n        <Spacer.Vertical size={4} />\n        <Column className={styles.listPrice}>\n          <Text color='gray' fontSize='xs'>\n            {measurementUnitAbb(ppum)}\n          </Text>\n        </Column>\n      </Row>\n      {validateListPrice && price !== listPrice &&\n        <Row\n          className={styles.listPrice}\n          justifyContent='start'\n          \n        >\n          <Text\n            color='gray'\n            fontSize={fontSizeMobileOffer}\n            fontWeight='semibold'\n            underline={underlineInOffer}\n          >\n            {currencyFormat({ number: listPrice, bool: false })}\n          </Text>\n          <Spacer.Vertical size={4} />\n          <Text\n            color='gray'\n            fontSize='xs'\n            underline={underlineInOffer}\n          >\n            {measurementUnitAbb(ppumListPrice)}\n          </Text>\n        </Row>\n      }\n    </>\n  )\n}\n","import React, { useMemo, useState } from 'react'\nimport { getGlobalStyle } from '../../../../helpers'\nimport {\n  Icon,\n  Link,\n  Picture,\n  Text\n} from '../../../atoms'\nimport {\n  Column,\n  Container,\n  Row,\n  Spacer\n} from '../../../layout'\nimport { AddToCartAndQuantity } from '../../../molecules'\nimport { CommonShelfProps } from '../Shelf'\nimport { ShelfFormat } from '../ShelfFormat'\nimport { ShelfLabel } from '../ShelfLabel'\nimport { ChipOffer } from '../ChipOffer'\nimport { ShelfPrice } from '../ShelfPrice'\nimport { ShelfHorizontal } from '../ShelfHorizontal'\n\nimport styles from './../Shelf.module.css'\nimport { validatePromotion, validateVertical } from '../utils'\n\nexport interface ShelfV1Props extends CommonShelfProps {\n  version?: 1\n}\n\nconst validateMobile = (isMobile: boolean, importantWidth: string) => {\n  const customPadding = isMobile ? '4px' : '6px'\n  const width = isMobile ? '50' : '20'\n  const customWidth = importantWidth || width\n  const fontSizeChipOffer: typeof Text.arguments.fontSize = isMobile ? 'xs' : 'sm'\n  const fontSizeMobile: typeof Text.arguments.fontSize = isMobile ? 'md' : 'lg'\n  const fontSizeMobileOffer: typeof Text.arguments.fontSize = isMobile ? 'sm' : 'md'\n  const marginChipOffer = isMobile ? '3px 0px 2px 0px' : '2px 0px 0px 0px'\n  const paddingPromotion4 = isMobile ? '1px 0' : '2px 0'\n  const styledChipOffer = isMobile ? styles.offerMobile : styles.offerDesktop\n  const columnPadding = isMobile ? '8px' : '16px'\n  const verticalMinHeight = isMobile ? '360px' : '380px'\n  const verticalSpacerHorizontal: 8 | 24 = isMobile ? 8 : 24\n\n  return {\n    customPadding,\n    customWidth,\n    fontSizeChipOffer,\n    fontSizeMobile,\n    fontSizeMobileOffer,\n    marginChipOffer,\n    paddingPromotion4,\n    styledChipOffer,\n    columnPadding,\n    verticalMinHeight,\n    verticalSpacerHorizontal\n  }\n}\n\nconst ShelfV1 = React.forwardRef(function Shelf({\n  brand,\n  buttonLabel,\n  buttonStatus = 'initial',\n  buttonVariant,\n  customClassName,\n  degrees,\n  altText,\n  format,\n  img,\n  importantWidth,\n  inOffer = false,\n  isDisabled,\n  isLoading,\n  isMobile = false,\n  isPromotion = false,\n  itemId,\n  likeListButtons = true,\n  listPrice,\n  offer,\n  orientation = 'vertical',\n  ppum,\n  ppumListPrice,\n  price,\n  promotion,\n  provider,\n  quantity = 0,\n  quantityButtonProps,\n  quantityButtonStyles,\n  stock = true,\n  title,\n  tooltipProps,\n  typePromotion,\n  url,\n  catchShelfRef,\n  volume,\n  nextImage,\n  container,\n  handleOnClick,\n  onClickProduct\n}: ShelfV1Props, ref?: React.LegacyRef<HTMLInputElement>): React.ReactElement<ShelfV1Props> {\n\n  const {\n    columnPadding,\n    customPadding,\n    customWidth,\n    fontSizeChipOffer,\n    fontSizeMobile,\n    fontSizeMobileOffer,\n    marginChipOffer,\n    paddingPromotion4,\n    styledChipOffer,\n    verticalMinHeight,\n    verticalSpacerHorizontal\n  } = validateMobile(isMobile, importantWidth)\n\n  const [shelfRef, setShelfRef] = useState<React.ForwardedRef<HTMLInputElement>>()\n  const {\n    justifyContentPrice,\n    alignItemsInOffer,\n    underlineInOffer,\n    typePromotion4,\n    validateListPrice\n  } = validatePromotion(\n    isPromotion,\n    typePromotion,\n    inOffer\n  )\n\n  const isVertical: boolean = orientation === 'vertical'\n  const {\n    bodyHorizontalClass,\n    minWidthTopColumn,\n    promotionContainerPadding\n  } = validateVertical(\n    isVertical,\n    styles.hoverZoom\n  )\n\n  const handleImgVal = useMemo(() => {\n    shelfRef && catchShelfRef && catchShelfRef(shelfRef)\n    return true\n  }, [shelfRef])\n\n  const shelfPriceProps = {\n    fontSizeMobile,\n    fontSizeMobileOffer,\n    listPrice,\n    orientation,\n    ppum,\n    ppumListPrice,\n    price,\n    underlineInOffer,\n    validateListPrice\n  }\n\n  const shelfHorizontalProps = {\n    brand,\n    altText,\n    format,\n    img,\n    isMobile,\n    isPromotion,\n    offer,\n    ppum,\n    promotion,\n    stock,\n    title,\n    typePromotion,\n    url,\n    fontSizeChipOffer,\n    marginChipOffer,\n    styledChipOffer,\n    justifyContentPrice,\n    alignItemsInOffer,\n    typePromotion4,\n    ...shelfPriceProps,\n    onClickProduct\n  }\n\n  return (\n    <Column\n      customClassName={customClassName}\n      customWidth={customWidth}\n      maxWidth='300px'\n      minWidth={minWidthTopColumn}\n      padding={customPadding}\n      position='relative'\n      ref={(columnRef: React.ForwardedRef<HTMLInputElement>) => {\n        if (!ref) ref = columnRef\n        setShelfRef(columnRef)\n      }}\n      tagName='section'\n      val={handleImgVal}\n    >\n      {\n        <ShelfLabel\n          promotion={promotion}\n          promotionContainerPadding={promotionContainerPadding}\n          provider={provider}\n        />\n      }\n\n      {likeListButtons &&\n        <Container\n          absoluteDefault='topRight'\n          justifyContent='end'\n          padding='12px'\n          position='absolute'\n        >\n          <Column maxWidth='40px'>\n            <Row\n              alignItems='center'\n              backgroundColor='#FFFFFF'\n              borderRadius='50%'\n              customClassName={styles.likeListButtons}\n              justifyContent='center'\n              maxWidth='30px'\n              minHeight='30px'\n            >\n              <Icon\n                clickable='pointer'\n                color='#666666'\n                name='List'\n                sizes='xs'\n              />\n            </Row>\n            <Row\n              alignItems='center'\n              backgroundColor='#FFFFFF'\n              borderRadius='50%'\n              customClassName={styles.likeListButtons}\n              justifyContent='center'\n              maxWidth='30px'\n              minHeight='30px'\n            >\n              <Icon\n                clickable='pointer'\n                color='#666666'\n                name='Heart'\n                sizes='xs'\n              />\n            </Row>\n          </Column>\n        </Container>\n      }\n      <Column\n        backgroundColor={getGlobalStyle('--color-base-white')}\n        borderRadius={getGlobalStyle('--border-radius-md')}\n        customClassName={bodyHorizontalClass}\n        padding={columnPadding}\n      >\n        {isVertical ? (\n          <Column justifyContent='between' minHeight={verticalMinHeight}>\n            <Column>\n              <Link\n                href={url}\n                title={title}\n                underline='none'\n              >\n                <Column\n                  clickable='pointer'\n                  onClick={onClickProduct}\n                >\n                  <Row clickable='pointer' justifyContent='center' >\n                    <Picture\n                      alt={altText}\n                      border='none'\n                      borderRadius='none'\n                      className={!stock ? styles.outOfStock : ''}\n                      height='180px'\n                      nextImage={nextImage}\n                      src={img}\n                      width='100%'\n                    />\n                  </Row>\n                  <Spacer.Horizontal size={16} />\n                  {/* brand, title and format */}\n                  <Text\n                    clickable='pointer'\n                    color='black'\n                    customClassName={styles.brandText}\n                    fontSize='sm'\n                    fontWeight='semibold'\n                  >\n                    {brand?.toLowerCase()}\n                  </Text>\n\n                  <Text\n                    clickable='pointer'\n                    color='black'\n                    customClassName={styles.nameProduct}\n                    fontSize={fontSizeMobileOffer}\n                  >\n                    {title.charAt(0) + title.toLowerCase().slice(1)}\n                  </Text>\n                  <Spacer.Horizontal size={4} />\n                  <ShelfFormat\n                    container={container}\n                    degrees={degrees}\n                    format={format}\n                    volume={volume}\n                  />\n                </Column>\n              </Link>\n              <Spacer.Horizontal size={verticalSpacerHorizontal} />\n\n              {/* price, listPrice */}\n              {stock &&\n                <Column justifyContent='start'>\n                  <Row alignItems={alignItemsInOffer} justifyContent={justifyContentPrice}>\n                    {isPromotion &&\n                      <Column\n                        justifyContent='start'\n                        margin={typePromotion !== 4 && marginChipOffer}\n                        maxWidth='max-content'\n                      >\n                        {typePromotion4 &&\n                          <Row\n                            justifyContent='start'\n                            minWidth='21px'\n                            padding={paddingPromotion4}\n                          >\n                            <Text\n                              color='guardsman-red'\n                              fontSize='md'\n                              fontWeight='bold'\n                              textAlign='right'\n                              type='label'\n                            >\n                              {offer}\n                            </Text>\n                            <Spacer.Vertical size={2} />\n                          </Row>\n                        }\n                        {!typePromotion4 &&\n                          <ChipOffer\n                            fontSizeChipOffer={fontSizeChipOffer}\n                            offer={offer}\n                            padding={'2px 1px 2px 3px'}\n                            styled={styledChipOffer}\n                            width='28px'\n                          />\n                        }\n                      </Column>\n                    }\n                    <Column padding='2px'>\n                      {<ShelfPrice {...shelfPriceProps} />}\n                    </Column>\n                  </Row>\n                </Column>\n              }\n              {!stock &&\n                <Row\n                  backgroundColor={getGlobalStyle('--color-neutral-gray-dark')}\n                  borderRadius={getGlobalStyle('--border-radius-2xs')}\n                  justifyContent='center'\n                  maxWidth='60px'\n                >\n                  <Text color='white' fontSize='sm'>\n                    sin stock\n                  </Text>\n                </Row>\n              }\n            </Column>\n\n            {/* buy button */}\n            <Row justifyContent='center'>\n              <AddToCartAndQuantity\n                buttonLabel={buttonLabel}\n                customWidth='100%'\n                disabled={isDisabled}\n                handleOnClick={handleOnClick}\n                isLoading={isLoading}\n                itemId={itemId}\n                quantity={quantity}\n                quantityButtonProps={quantityButtonProps}\n                quantityButtonStyles={quantityButtonStyles}\n                statusButton={buttonStatus}\n                tooltipProps={tooltipProps}\n                variant={buttonVariant}\n              />\n            </Row>\n          </Column>\n        ) : (\n          <ShelfHorizontal {...shelfHorizontalProps} />\n        )}\n        {!isVertical && (\n          <Row\n            justifyContent='center'\n            maxWidth='288px'\n            padding='5px 0px 0px 0px'\n          >\n            <Column width='70px' />\n            <AddToCartAndQuantity\n              buttonLabel={buttonLabel}\n              disabled={isDisabled}\n              handleOnClick={handleOnClick}\n              isLoading={isLoading}\n              itemId={itemId}\n              quantity={quantity}\n              quantityButtonProps={quantityButtonProps}\n              quantityButtonStyles={quantityButtonStyles}\n              statusButton={buttonStatus}\n              tooltipProps={tooltipProps}\n            />\n          </Row>\n        )}\n      </Column>\n    </Column>\n  )\n})\n\nexport {\n  ShelfV1\n}\n","import React, {\n  useEffect,\n  useRef,\n  useState\n} from 'react'\nimport classNames from 'classnames'\nimport { getGlobalStyle } from '../../../../../helpers'\nimport { Icon, Text } from '../../../../atoms'\nimport {\n  Column,\n  Container,\n  Spacer\n} from '../../../../layout'\nimport { ShelfSideButton } from '../ShelfSideButton'\nimport styles from './ShelfAddToCart.module.css'\n\nexport interface CallbackParams {\n  itemId: string | number;\n}\n\nexport interface ShelfAddToCartProps {\n  couponStatus?: string\n  disabled?: boolean;\n  isMobile?: boolean;\n  isHover?: boolean;\n  itemId?: string | number;\n  maxQuantity?: number;\n  quantity?: string | number;\n  quantityDisplay?: string | number;\n  unitMultiplier?: number;\n  onActivateCoupon?: () => void;\n  onAddFirst?: (props?: CallbackParams) => void;\n  onAdd?: (params: CallbackParams) => void;\n  onRemove?: (params: CallbackParams) => void;\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>, params: CallbackParams) => void;\n}\n\nexport const ShelfAddToCart = ({\n  couponStatus,\n  disabled,\n  isHover,\n  isMobile,\n  itemId,\n  maxQuantity = 100,\n  quantity,\n  quantityDisplay,\n  unitMultiplier = 1,\n  onActivateCoupon,\n  onAddFirst,\n  onAdd,\n  onRemove\n}: ShelfAddToCartProps): React.ReactElement<ShelfAddToCartProps> => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [isMouseOn, setIsMouseOn] = useState(false)\n  const addButton = useRef(null)\n  const quantityValue = parseFloat(`${quantity || quantityDisplay || 0}`)\n  const quantityByDisplay = quantityDisplay ? parseFloat(quantityDisplay.toString().replace(/[A-Z\\s]+/, '')) : 1\n  const hasUnits = quantityDisplay ? quantityDisplay.toString().includes('kg') : false\n  const isRemoveDisabled = disabled || quantityValue <= 0\n  const isAddDisabled = disabled || quantityValue >= maxQuantity\n  const customHeight = '40px'\n  const customWidth = hasUnits ? '70px' : customHeight\n  const addAndRemoveSize = '30px'\n  const computedBackgroundColor = disabled ? getGlobalStyle('--color-primary-disabled') : getGlobalStyle('--color-background-primary')\n\n  const handleAdd = (e?: React.MouseEvent) => {\n    e?.stopPropagation()\n    e?.preventDefault()\n    if (quantityValue === 0)\n      onAddFirst && onAddFirst({ itemId })\n    else\n      onAdd({itemId})\n    if (couponStatus === 'new' && onActivateCoupon) onActivateCoupon()\n  }\n\n  const handleRemove = (e?: React.MouseEvent) => {\n    e?.stopPropagation()\n    e?.preventDefault()\n    onRemove({itemId})\n    if (quantityByDisplay === unitMultiplier && isMobile){\n      setIsOpen(false)\n    }\n  }\n\n  const handleMouseEnter = () => {\n    setIsMouseOn(true)\n  }\n\n  const handleMouseLeave = () => {\n    setIsMouseOn(false)\n  }\n\n  const handleOpenClick = () => {\n    isMobile && setIsOpen(true)\n    if (quantityValue === 0) {\n      if (couponStatus === 'new' && onActivateCoupon) onActivateCoupon()\n      onAddFirst && onAddFirst({ itemId })\n    }\n  }\n\n  useEffect(() => {\n    if (!isMobile ) {\n      setIsOpen(isHover || isMouseOn)\n    }\n  }, [isHover, isMouseOn])\n\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (addButton.current && !addButton.current.contains(event.target)) {\n        setIsOpen(false)\n      }\n    }\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [addButton])\n\n  return (\n    <Container\n      backgroundColor={computedBackgroundColor}\n      boxShadow='0 0 10px rgba(27, 33, 56, 0.15)'\n      customClassName={classNames(\n        styles.addToCart,\n        {\n          [styles.disabled]: disabled,\n          [styles.hover]: isOpen\n        }\n      )}\n      customHeight={customHeight}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      overflow='hidden'\n      position='relative'\n      ref={addButton}\n      tabIndex={0}\n      width={customWidth}\n      zIndex='2'\n    >\n      <Container\n        alignItems='center'\n        customClassName={classNames(\n          styles['addToCart__quantity'],\n          {\n            [styles['show']]: !isOpen\n          }\n        )}\n        customHeight='100%'\n        customWidth='100%'\n        justifyContent='center'\n        onClick={handleOpenClick}\n        position='absolute'\n      >\n        { quantityDisplay ?\n          <Text\n            aria-label='Cantidad-text'\n            customColor={getGlobalStyle('--color-base-white')}\n            fontSize='md'\n            fontWeight='semibold'\n          >\n            {quantityDisplay}\n          </Text>\n          :\n          <Icon\n            aria-label='Agregar al carrito'\n            color={getGlobalStyle('--color-base-white')}\n            customSize={15}\n            name='PlusThin'\n          />\n        }\n      </Container>\n      <Container\n        alignItems='center'\n        className={classNames(\n          styles['addToCart__quantity'],\n          {\n            [styles['show']]: isOpen\n          }\n        )}\n        customHeight='100%'\n        justifyContent='between'\n        padding='5px'\n      >\n        { quantityValue > 0 ?\n          <Container alignItems='center'>\n            <Container width='fit-content'>\n              <ShelfSideButton\n                aria-label='Remover'\n                disabled={isRemoveDisabled}\n                icon={quantityByDisplay === unitMultiplier ? 'Trash' : 'Minus'}\n                iconColor={getGlobalStyle('--color-primary-red2')}\n                onClick={handleRemove}\n                size={addAndRemoveSize}\n              />\n            </Container>\n            <Column className={styles['quantity-container']} width='100%'>\n              <Text\n                color={'white'}\n                fontSize='md'\n                fontWeight='semibold'\n              >\n                {quantityDisplay}\n              </Text>\n            </Column>\n            <Container width='fit-content'>\n              <ShelfSideButton\n                aria-label='Agregar'\n                disabled={isAddDisabled}\n                icon='Plus'\n                iconColor={getGlobalStyle('--color-primary-red2')}\n                onClick={handleAdd}\n                size={addAndRemoveSize}\n              />\n            </Container>\n          </Container>\n          :\n          <Container\n            alignItems='center'\n            aria-label='Agregar'\n            clickable='pointer'\n            customClassName={styles['no-select']}\n            customHeight='100%'\n            justifyContent='center'\n            onClick={handleAdd}\n            width='100'\n          >\n            <Icon\n              clickable='pointer'\n              customSize={15}\n              name='PlusThin'\n            />\n            <Spacer.Vertical size={8} />\n            <Text clickable='pointer' color='white'>\n              Agregar\n            </Text>\n          </Container>\n        }\n      </Container>\n    </Container>\n  )\n}\n","import React from 'react'\nimport { getGlobalStyle } from '../../../../../helpers'\nimport { Icon, IconProps } from '../../../../atoms'\nimport { Container, Row } from '../../../../layout'\n\nexport interface ShelfSideButtonProps {\n  customClassName?: string;\n  disabled?: boolean;\n  icon?: IconProps['name'];\n  iconColor?: IconProps['color'];\n  size?: string;\n  onClick?: (e?: React.MouseEvent) => void;\n}\n\nexport const ShelfSideButton = ({\n  customClassName,\n  disabled,\n  icon,\n  iconColor = getGlobalStyle('--color-neutral-gray-dark'),\n  size = '30px',\n  onClick,\n  ...props\n}: ShelfSideButtonProps): React.ReactElement<ShelfSideButtonProps> => {\n  const computedIconColor = disabled ? getGlobalStyle('--color-primary-disabled') : iconColor\n\n  const handleClick = (e: React.MouseEvent) => {\n    if (disabled) return\n    onClick?.(e)\n  }\n\n  const handleKeyDown = (e?: React.KeyboardEvent<HTMLDivElement>) => {\n    if (disabled) return\n    const keyD = (e.key !== undefined && e.key !== 'Unidentified') ? e.key : e.code\n    if ( (keyD === 'Enter' || keyD === '13') || (['Spacebar', ' '].indexOf(keyD) >= 0 || keyD === '32')) {\n      e.preventDefault()\n      e.target.dispatchEvent(new MouseEvent('click', {bubbles: true}))\n    }\n  }\n\n  return (\n    <Row\n      alignItems='center'\n      backgroundColor={getGlobalStyle('--color-base-white')}\n      borderRadius='100%'\n      boxShadow={getGlobalStyle('--box-shadow-lg')}\n      className={customClassName}\n      clickable='pointer'\n      customHeight={size}\n      justifyContent='center'\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      padding='5px'\n      position='relative'\n      role='button'\n      tabIndex={0}\n      width={size}\n      {...props}\n    >\n      <Container\n        alignItems='center'\n        clickable='pointer'\n        customHeight='100%'\n        justifyContent='center'\n        position='absolute'\n        width='100%'\n      >\n        <Icon\n          clickable='pointer'\n          color={computedIconColor}\n          name={icon}\n          sizes='2xs'\n        />\n      </Container>\n    </Row>\n  )\n}","import React, { useEffect, useMemo, useState } from 'react'\nimport { getGlobalStyle, SmallScreen } from '../../../../helpers'\nimport {\n  Icon,\n  Link,\n  Picture,\n  Text\n} from '../../../atoms'\nimport {\n  Column,\n  Container,\n  Row,\n  Spacer\n} from '../../../layout'\nimport { AddToCartAndQuantity, Modal } from '../../../molecules'\nimport { ChipOffer } from '../ChipOffer'\nimport { ShelfAddToCart } from './ShelfAddToCart/ShelfAddToCart'\nimport { ShelfCouponButton } from './ShelfCouponButton/ShelfCouponButton'\nimport { ShelfHorizontal } from '../ShelfHorizontal'\nimport { ShelfPrice } from '../ShelfPrice'\nimport { ShelfSideButton } from './ShelfSideButton'\nimport { CommonShelfProps } from '../Shelf'\nimport { ShelfLabel } from '../ShelfLabel'\nimport { ShelfFormat } from '../ShelfFormat'\n\nimport styles from './../Shelf.module.css'\nimport { validatePromotion, validateVertical } from '../utils'\nimport classNames from 'classnames'\n\nexport interface ShelfV2Props extends CommonShelfProps {\n  couponLabel?: string\n  couponStatus?: 'new' | 'active' | 'used'\n  couponLoading?: boolean\n  showCouponButton?: boolean\n  unitMultiplier?: number\n  version?: 2\n  onActiveCoupon?: () => void;\n}\n\ninterface PropsValues {\n  customPadding: string\n  customWidth: string\n  fontSizeChipOffer: typeof Text.arguments.fontSize\n  fontSizeMobile: typeof Text.arguments.fontSize\n  fontSizeMobileOffer: typeof Text.arguments.fontSize\n  marginChipOffer: string\n  paddingPromotion4: string\n  styledChipOffer: string\n  columnPadding: string\n  verticalMinHeight: string\n  verticalSpacerHorizontal: 8 | 2\n  shelfMaxWidth: string\n  boxShadow: string | undefined\n  containerMinWidth: string\n  shelfMinWidth: string\n  pictureHeight: string\n}\n\nconst validateMobile = (isMobile: boolean, importantWidth: string): PropsValues => {\n  const columnPadding = '8px'\n  const width = isMobile ? '50%' : '20%'\n  if (isMobile) {\n    return {\n      customPadding: '4px',\n      customWidth: importantWidth || width,\n      fontSizeChipOffer: 'xs',\n      fontSizeMobile: 'md',\n      fontSizeMobileOffer: 'sm',\n      marginChipOffer: '3px 0px 2px 0px',\n      paddingPromotion4: '1px 0',\n      styledChipOffer: styles.offerMobile,\n      columnPadding,\n      verticalMinHeight: '284px',\n      verticalSpacerHorizontal: 8,\n      shelfMaxWidth: '240px',\n      boxShadow: undefined,\n      containerMinWidth: '50%',\n      shelfMinWidth: '',\n      pictureHeight: '115px'\n    }\n  }\n\n  return {\n    boxShadow: getGlobalStyle('--box-shadow-2xs'),\n    columnPadding,\n    containerMinWidth: '200px',\n    customPadding: '0px',\n    customWidth: importantWidth || width,\n    fontSizeChipOffer: 'sm',\n    fontSizeMobile: 'lg',\n    fontSizeMobileOffer: 'md',\n    marginChipOffer: '2px 0px 0px 0px',\n    paddingPromotion4: '2px 0',\n    pictureHeight: '150px',\n    shelfMaxWidth: '300px',\n    shelfMinWidth: '200px',\n    styledChipOffer: styles.offerDesktop,\n    verticalMinHeight: '324px',\n    verticalSpacerHorizontal: 2\n  }\n}\n\nconst hideUsedButton = (buttonState: string, showButton: boolean) => {\n  if (showButton) return true\n  if (buttonState === 'used') return false\n  return true\n}\n\nconst ShelfV2 = React.forwardRef(function Shelf({\n  brand,\n  buttonLabel,\n  buttonStatus = 'initial',\n  altText,\n  couponLabel,\n  format,\n  img,\n  importantWidth,\n  inOffer = false,\n  isDisabled,\n  isLoading,\n  isMobile = false,\n  isPromotion = false,\n  itemId,\n  likeListButtons = false,\n  linkWrapper,\n  listPrice,\n  offer,\n  orientation = 'vertical',\n  ppum,\n  ppumListPrice,\n  price,\n  promotion,\n  quantity = 0,\n  quantityButtonProps,\n  quantityButtonStyles,\n  showCouponButton = true,\n  stock = true,\n  title,\n  tooltipProps,\n  typePromotion,\n  url,\n  unitMultiplier,\n  couponStatus,\n  couponLoading,\n  container,\n  degrees,\n  provider,\n  volume,\n  catchShelfRef,\n  handleOnClick,\n  onActiveCoupon,\n  onClickProduct\n}: ShelfV2Props, ref?: React.LegacyRef<HTMLInputElement>): React.ReactElement<ShelfV2Props> {\n  const [isHover, setIsHover] = useState(false)\n  const showUsedButton = hideUsedButton(couponStatus, showCouponButton)\n  const [showModal, setShowModal] = useState(false)\n  const [startAnimation, setStartAnimation] = useState(false)\n  const [showAnimation, setShowAnimation] = useState(couponStatus === 'new')\n\n  const {\n    columnPadding,\n    containerMinWidth,\n    customWidth,\n    fontSizeChipOffer,\n    fontSizeMobile,\n    fontSizeMobileOffer,\n    marginChipOffer,\n    paddingPromotion4,\n    pictureHeight,\n    shelfMinWidth,\n    shelfMaxWidth,\n    styledChipOffer,\n    verticalMinHeight,\n    verticalSpacerHorizontal\n  } = validateMobile(isMobile, importantWidth)\n\n  const [shelfRef, setShelfRef] = useState<React.ForwardedRef<HTMLInputElement>>()\n  const {\n    justifyContentPrice,\n    alignItemsInOffer,\n    underlineInOffer,\n    typePromotion4,\n    validateListPrice\n  } = validatePromotion(\n    isPromotion,\n    typePromotion,\n    inOffer\n  )\n\n  const isVertical: boolean = orientation === 'vertical'\n  const {\n    bodyHorizontalClass,\n    promotionContainerPadding\n  } = validateVertical(\n    isVertical,\n    styles.hoverZoom\n  )\n\n  const handleImgVal = useMemo(() => {\n    shelfRef && catchShelfRef && catchShelfRef(shelfRef)\n    return true\n  }, [shelfRef])\n\n  const shelfPriceProps = {\n    fontSizeMobile,\n    fontSizeMobileOffer,\n    listPrice,\n    orientation,\n    ppum,\n    ppumListPrice,\n    price,\n    underlineInOffer,\n    validateListPrice\n  }\n\n  const shelfHorizontalProps = {\n    brand,\n    altText,\n    format,\n    img,\n    isMobile,\n    isPromotion,\n    offer,\n    ppum,\n    promotion,\n    stock,\n    title,\n    typePromotion,\n    url,\n    fontSizeChipOffer,\n    marginChipOffer,\n    styledChipOffer,\n    justifyContentPrice,\n    alignItemsInOffer,\n    typePromotion4,\n    ...shelfPriceProps,\n    onClickProduct\n  }\n\n  const handleMouseEnter = () => {\n    setIsHover(true)\n  }\n\n  const handleMouseLeave = () => {\n    setIsHover(false)\n  }\n\n  const handleCouponModal = () => {\n    if(!startAnimation){\n      setShowModal(true)\n      setTimeout(() => {\n        setStartAnimation(true)\n      }, 100)\n      setTimeout(() => {\n        setShowModal(false)\n        setStartAnimation(false)\n      }, 3000)\n    }\n  }\n\n  const handleActiveCoupon = () => {\n    couponStatus === 'new' && onActiveCoupon()\n    couponStatus === 'active' && handleCouponModal()\n  }\n\n  useEffect(() => {\n    if(showAnimation && couponStatus === 'active'){\n      handleCouponModal()\n      setShowAnimation(false)\n    }\n  }, [couponStatus])\n\n  return (\n    <Container\n      maxWidth={shelfMaxWidth}\n      minWidth={containerMinWidth}\n      padding='6px'\n      width={customWidth}\n    >\n      {showModal &&\n        <SmallScreen>\n          <Modal\n            backgroundColor={getGlobalStyle('--color-primary-green-light')}\n            className={classNames(\n              styles.activationModal,\n              {\n                [styles.modalAnimation]: startAnimation\n              }\n            )}\n            colorButtonDrag={getGlobalStyle('--color-neutral-gray')}\n            dragRatio={0.1}\n            fullScreen={true}\n            hiddenX={true}\n            hideOverlay={true}\n            isDraggable={true}\n            isOpen={true}\n            minHeightFullScreen='57px'\n            widthButtonDrag='82px'\n          >\n            <Row\n              alignItems='center'\n              justifyContent='center'\n              margin='10px 0 0 0'\n              zIndex='8'\n            >\n              <Icon\n                color='white'\n                name='Coupon'\n                sizes='md'\n              />\n              <Spacer.Vertical size={16} />\n              <Text color='white' fontSize='md'>Activaste un cupón de</Text>\n              <Spacer.Vertical size={4} />\n              <Text\n                color='white'\n                fontSize='md'\n                fontWeight='bold'\n              >\n                {couponLabel}\n              </Text>\n            </Row>\n            <span className={styles.modalBackground}/>\n          </Modal>\n        </SmallScreen>\n      }\n      <Column\n        borderRadius={getGlobalStyle('--border-radius-md')}\n        boxShadow={getGlobalStyle('--box-shadow-2xs')}\n        minWidth={shelfMinWidth}\n        position='relative'\n        ref={(columnRef: React.ForwardedRef<HTMLInputElement>) => {\n          if (!ref) ref = columnRef\n          setShelfRef(columnRef)\n        }}\n        tagName='section'\n        val={handleImgVal}\n      >\n        { stock &&\n          <Container\n            absoluteDefault='topRight'\n            margin='12px'\n            position='absolute'\n            width='fit-content'\n          >\n            <ShelfAddToCart\n              couponStatus={couponStatus}\n              disabled={!stock || isDisabled}\n              isHover={isHover}\n              isMobile={isMobile}\n              itemId={itemId}\n              maxQuantity={quantityButtonProps?.maxQuantity}\n              onActivateCoupon={onActiveCoupon}\n              onAdd={quantityButtonProps?.handleAdd}\n              onAddFirst={handleOnClick}\n              onChange={quantityButtonProps?.handleChange}\n              onRemove={quantityButtonProps?.handleRemove}\n              quantity={quantityButtonProps?.quantity}\n              quantityDisplay={quantity}\n              unitMultiplier={unitMultiplier}\n            />\n          </Container>\n        }\n        <ShelfLabel\n          promotion={promotion}\n          promotionContainerPadding={promotionContainerPadding}\n          provider={provider}\n        />\n        <Column\n          backgroundColor={getGlobalStyle('--color-base-white')}\n          borderRadius={getGlobalStyle('--border-radius-md')}\n          customClassName={bodyHorizontalClass}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          padding={columnPadding}\n        >\n          {isVertical ? (\n            <Column\n              justifyContent='between'\n              minHeight={verticalMinHeight}\n              padding='8px 0 0 0'\n            >\n              <Column>\n                <Link\n                  customWidth='100'\n                  href={url}\n                  title={title}\n                  underline='none'\n                  wrapper={linkWrapper}\n                >\n                  <Column\n                    clickable='pointer'\n                    onClick={onClickProduct}\n                    width='100%'\n                  >\n                    <Row\n                      clickable='pointer'\n                      justifyContent='center'\n                      position='relative'\n                    >\n                      <Picture\n                        alt={altText}\n                        border='none'\n                        borderRadius='none'\n                        className={!stock ? styles.outOfStock : styles.defaultImgStyle}\n                        height={pictureHeight}\n                        objectFit='contain'\n                        src={img}\n                        width='100%'\n                      />\n                      {likeListButtons &&\n                        <Container\n                          absoluteDefault='topLeft'\n                          alignItems={isMobile ? 'center' : 'start'}\n                          customHeight='100%'\n                          justifyContent='start'\n                          position='absolute'\n                        >\n                          <Column gap='12px' maxWidth='40px'>\n                            <ShelfSideButton icon='List'/>\n                            <ShelfSideButton icon='Heart'/>\n                          </Column>\n                        </Container>\n                      }\n                    </Row>\n                    <Spacer.Horizontal size={8} />\n                    {/* brand, title and format */}\n                    <Text\n                      clickable='pointer'\n                      color='black'\n                      customClassName={styles.brandText}\n                      fontSize='sm'\n                      fontWeight='semibold'\n                    >\n                      {brand?.toLowerCase()}\n                    </Text>\n\n                    <Text\n                      clickable='pointer'\n                      color='black'\n                      customClassName={styles.nameProduct}\n                      fontSize={fontSizeMobileOffer}\n                    >\n                      {title.charAt(0) + title.toLowerCase().slice(1)}\n                    </Text>\n                    <Spacer.Horizontal size={4} />\n                    <ShelfFormat\n                      container={container}\n                      degrees={degrees}\n                      format={format}\n                      volume={volume}\n                    />\n                  </Column>\n                </Link>\n                <Spacer.Horizontal size={verticalSpacerHorizontal} />\n\n                {/* price, listPrice */}\n                {stock &&\n                  <Column justifyContent='start'>\n                    <Row alignItems={alignItemsInOffer} justifyContent={justifyContentPrice}>\n                      {isPromotion &&\n                        <Column\n                          justifyContent='start'\n                          margin={typePromotion !== 4 && marginChipOffer}\n                          maxWidth='max-content'\n                        >\n                          {typePromotion4 &&\n                            <Row\n                              justifyContent='start'\n                              minWidth='21px'\n                              padding={paddingPromotion4}\n                            >\n                              <Text\n                                customColor={getGlobalStyle('guardsman-red')}\n                                fontSize='md'\n                                fontWeight='bold'\n                                textAlign='right'\n                                type='label'\n                              >\n                                {offer}\n                              </Text>\n                              <Spacer.Vertical size={2} />\n                            </Row>\n                          }\n                          {!typePromotion4 &&\n                            <ChipOffer\n                              fontSizeChipOffer={fontSizeChipOffer}\n                              offer={offer}\n                              padding='2px 1px 2px 3px'\n                              styled={styledChipOffer}\n                              width='28px'\n                            />\n                          }\n                        </Column>\n                      }\n                      <Column padding='2px'>\n                        <ShelfPrice {...shelfPriceProps} />\n                      </Column>\n                    </Row>\n                  </Column>\n                }\n                {!stock &&\n                  <Row\n                    backgroundColor={getGlobalStyle('--color-neutral-gray-dark')}\n                    borderRadius={getGlobalStyle('--border-radius-2xs')}\n                    justifyContent='center'\n                    maxWidth='60px'\n                  >\n                    <Text color='white' fontSize='sm'>\n                      sin stock\n                    </Text>\n                  </Row>\n                }\n              </Column>\n              <Row justifyContent='center' padding='12px 2px 0 2px'>\n                {(stock && couponLabel && showUsedButton) &&\n                  <ShelfCouponButton\n                    couponStatus={couponStatus}\n                    isLoading={couponLoading}\n                    isMobile={isMobile}\n                    itemId={itemId}\n                    label={couponLabel}\n                    onAdd={quantityButtonProps?.handleAdd}\n                    onAddFirst={handleOnClick}\n                    onClick={handleActiveCoupon}\n                    quantity={quantityButtonProps?.quantity}\n                    quantityDisplay={quantity}\n                  />\n                }\n              </Row>\n            </Column>\n          ) : (\n            <ShelfHorizontal {...shelfHorizontalProps} />\n          )}\n          {!isVertical && (\n            <Row\n              justifyContent='center'\n              maxWidth='288px'\n              padding='5px 0px 0px 0px'\n            >\n              <Column width='70px' />\n              <AddToCartAndQuantity\n                buttonLabel={buttonLabel}\n                disabled={isDisabled}\n                handleOnClick={handleOnClick}\n                isLoading={isLoading}\n                itemId={itemId}\n                quantity={quantity}\n                quantityButtonProps={quantityButtonProps}\n                quantityButtonStyles={quantityButtonStyles}\n                statusButton={buttonStatus}\n                tooltipProps={tooltipProps}\n              />\n            </Row>\n          )}\n        </Column>\n      </Column>\n    </Container>\n  )\n})\n\nexport {\n  ShelfV2\n}\n"],"names":[],"sourceRoot":""}