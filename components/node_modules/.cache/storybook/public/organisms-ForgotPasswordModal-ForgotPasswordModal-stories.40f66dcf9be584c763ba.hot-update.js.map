{"version":3,"file":"organisms-ForgotPasswordModal-ForgotPasswordModal-stories.40f66dcf9be584c763ba.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAKA;AACA;AAKA;AACA;AAEA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAGA;AAxHA;;;;;;;;;;;;;;;;;;;;;;AC5BA;AAMA;AAMA;AAOA;AAKA;AAEA;AAAA;AAAA;AAAA;AAcA;;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAKA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAvLA;;;;;;;;;;;;;;;;;;;;;;;AC7GA;AACA;AAKA;AAKA;AAQA;AAKA;AAEA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;AC1OA;AAEA;AACA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AAGA;AApCA;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AAKA;AASA;AAKA;AAEA;AAAA;AAAA;AAgBA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAEA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AA7RA;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://components/./stories/organisms/ForgotPasswordModal/CodeStep/CodeInput/CodeInput.tsx","webpack://components/./stories/organisms/ForgotPasswordModal/CodeStep/CodeStep.tsx","webpack://components/./stories/organisms/ForgotPasswordModal/DeliveryMediumStep/DeliveryMediumStep.tsx","webpack://components/./stories/organisms/ForgotPasswordModal/ForgotPasswordModal.tsx","webpack://components/./stories/organisms/ForgotPasswordModal/ResetPasswordStep/PasswordRequirementIndicator/PasswordRequerimentIndicator.tsx","webpack://components/./stories/organisms/ForgotPasswordModal/ResetPasswordStep/ResetPasswordStep.tsx","webpack://components/./utils/formatRut.ts"],"sourcesContent":["import { \n  useEffect, \n  useRef, \n  useState \n} from 'react'\nimport classNames from 'classnames'\nimport {\n  BigScreen,\n  getGlobalStyle,\n  SmallScreen\n} from '../../../../../helpers'\nimport { Input } from '../../../../atoms'\nimport { Row } from '../../../../layout'\nimport { ChildrenBaseContainerProps } from '../../../../layout/BaseContainer/BaseContainer'\nimport styles from './CodeInput.module.css'\n\nexport interface CodeInputProps extends Omit<ChildrenBaseContainerProps, 'onChange'> {\n  onChange?: (value: string) => void;\n}\n\nfunction cleanerCode(rawCode: string) {\n  if (!rawCode) {\n    return ''\n  }\n\n  return rawCode.replace(/\\D/g, '')\n}\n\nexport const CodeInput = ({\n  onChange\n}: CodeInputProps) : React.ReactElement<CodeInputProps> => {\n  const [codeState, setCodeState] = useState(['', '', '', '', '', ''])\n\n  const codeInputsRef = useRef<HTMLInputElement[]>([null, null, null, null, null, null])\n\n  useEffect(() => {\n    const code = Object.values(codeState).join('')\n    onChange?.(code)\n  }, [codeState])\n\n  const setFocus = (index: number, direction: 'forward' | 'backward') : void => {\n    const nextIndex = (direction === 'forward' ? index + 1 : index - 1) % (codeState.length)\n    if (nextIndex >= codeState.length || nextIndex < 0) return\n    if (index === codeState.length - 1 && direction === 'forward') return\n    codeInputsRef.current[nextIndex].focus()\n  }\n\n  const handleChange = (event: React.FormEvent<HTMLInputElement>) : void => {\n    const index = parseInt(event.currentTarget.name)\n    \n    const rawValue = event.currentTarget.value.trim().slice(event.currentTarget.value.length - 1, event.currentTarget.value.length)\n    const value = cleanerCode(rawValue)\n\n    const newCodeState = [...codeState]\n    newCodeState[index] = value\n\n    setCodeState(newCodeState)\n\n    if (!value) {\n      return\n    }\n\n    const direction = value ? 'forward' : 'backward'\n    setFocus(index, direction)\n  }\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) : void => {\n    const rawValue = event.currentTarget.value.trim()\n\n    if (event.keyCode === 8 && !rawValue) {\n      const index = parseInt(event.currentTarget.name)\n      setFocus(index, 'backward')\n    }\n  }\n\n  const handlePasteFirst = (event: React.ClipboardEvent<HTMLInputElement>) : void => {\n    event.preventDefault()\n    const rawCode = event.clipboardData.getData('Text') || ''\n    const code = cleanerCode(rawCode)\n    const focusedIndex = parseInt(event.currentTarget.name)\n    const codeArray = code.split('')\n    let newCode = [...codeState]\n    newCode = newCode.map((code, index) => {\n      if (index < focusedIndex) {\n        return code\n      }\n      return codeArray[index - focusedIndex] || code\n    })\n    setCodeState(newCode)\n    let nextFocus = focusedIndex + code.length - 2\n    if (nextFocus >= codeState.length) nextFocus = codeState.length - 2\n    setFocus(nextFocus, 'forward')\n  }\n\n  const assignInputRef = (index: number, ref: HTMLInputElement) => {\n    codeInputsRef.current[index] = ref\n  }\n\n  return (\n    <Row\n      alignItems='center'\n      gap={8}\n      justifyContent='center'\n    >\n      <BigScreen>\n        <>\n          {codeState.map((value, index) => {return (\n            <Input\n              borderRadius={getGlobalStyle('--border-radius-2sm')}\n              className={classNames(styles[`input__${index}`], styles['input'])}\n              height='80px'\n              key={index}\n              maxLength={1}\n              name={index.toString()}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              onPaste={handlePasteFirst}\n              ref={(el) => {return assignInputRef(index, el)}}\n              type='number'\n              value={value}\n              width='80px'\n            />\n          )})}\n        </>\n      </BigScreen>\n      <SmallScreen>\n        <>\n          {codeState.map((value, index) => {return (\n            <Input\n              borderRadius={getGlobalStyle('--border-radius-2sm')}\n              className={classNames(styles['input'])}\n              height='50px'\n              key={index}\n              maxLength={1}\n              name={index.toString()}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              onPaste={handlePasteFirst}\n              ref={(el) => {return assignInputRef(index, el)}}\n              type='number'\n              value={value}\n              width='50px'\n            />\n          )})}\n        </>\n      </SmallScreen>\n    </Row>\n  )\n}","import {\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react'\nimport {\n  BigScreen,\n  getGlobalStyle,\n  SmallScreen\n} from '../../../../helpers'\nimport { Site } from '../../../../shared/interfaces/Site'\nimport {\n  Button, \n  Icon,\n  Link,\n  Text,\n  Title\n} from '../../../atoms'\nimport {\n  Column,\n  Container,\n  Row\n} from '../../../layout'\nimport { Notification } from '../../../molecules'\nimport { CommonStepProps, ForgotPasswordStep } from '../ForgotPasswordModal'\nimport { CodeInput } from './CodeInput/CodeInput'\n\nexport interface CodeStepProps extends CommonStepProps<ForgotPasswordStep.Code> {\n  arrow?: boolean\n  error?: React.ReactNode;\n  isLoading?: boolean;\n  text?: string;\n  title?: string;\n  onBack?: () => void;\n  onChangeCode?: (code: string) => void;\n  onResendCode?: () => void;\n  onSubmit?: (code: string) => void;\n}\n\nconst TIME_TO_RESEND_CODE = 30 // seconds\n\nexport interface ResendTextProps {\n  site?: Site,\n  timeToResend?: number\n  onResendCode?: () => void\n}\n\nconst ResendText = ({\n  site,\n  timeToResend,\n  onResendCode\n} : ResendTextProps) : React.ReactElement<ResendTextProps> => {\n  const linkColor = site === 'alvi' ? getGlobalStyle('--color-alvi-primary-blue') : getGlobalStyle('--color-primary-red')\n\n  const timeToResendFormatted = useMemo(() => {\n    if(!timeToResend) return ''\n    let minutes = Math.floor(timeToResend / 60)\n    if (minutes < 0) minutes = 0\n    let seconds = Math.floor(timeToResend % 60)\n    if (seconds < 0) seconds = 0\n    const minutesString = minutes < 0 ? `0${minutes}` : `${minutes}`\n    const secondsString = seconds < 10 ? `0${seconds}` : `${seconds}`\n    return `${minutesString}:${secondsString}`\n  }, [timeToResend])\n\n  return (\n    <>\n      <BigScreen>\n        <Text>\n          ¿No recibiste el código? {' '}\n          {timeToResend > 0 ? (\n            `Pide uno nuevo en ${timeToResendFormatted}`\n          ) : (\n            <Container margin='0 0 0 6px' width={'fit-content'}>\n              <Link\n                color={linkColor}\n                href='#'\n                label='Reenviar'\n                onClick={onResendCode}\n                preventDefault\n              />\n            </Container>\n          )}\n        </Text>\n      </BigScreen>\n      <SmallScreen>\n        <Text fontSize='sm'>\n          ¿No recibiste el código? {' '}\n          {timeToResend > 0 ? (\n            `Pide uno nuevo en ${timeToResendFormatted}`\n          ) : (\n            <Container margin='0 0 0 6px' width='fit-content'>\n              <Link\n                color={linkColor}\n                fontSize='sm'\n                href='#'\n                label='Reenviar'\n                onClick={onResendCode}\n                preventDefault\n              />\n            </Container>\n          )}\n        </Text>\n      </SmallScreen>\n    </>\n  )\n}\n\nexport const CodeStep = ({\n  arrow = true,\n  isLoading,\n  title,\n  text,\n  site,\n  error,\n  onBack,\n  onChangeCode,\n  onResendCode,\n  onSubmit\n} : CodeStepProps) : React.ReactElement<CodeStepProps> => {\n  const [code, setCode] = useState('')\n  const [timeToResend, setTimeToResend] = useState(TIME_TO_RESEND_CODE)\n  const timerRef = useRef<NodeJS.Timer>(null)\n\n  useEffect(() => {\n    timerRef.current = setInterval(() => {\n      setTimeToResend((prev) => {return prev - 1})\n    }, 1000)\n\n    return () => {\n      clearInterval(timerRef.current)\n    }\n  }, [])\n\n  const handleSubmit = (e?: React.FormEvent) => {\n    e?.preventDefault()\n    if (!isCodeValid) return\n    onSubmit?.(code)\n  }\n\n  const handleChangeCode = (newCode: string) => {\n    setCode(newCode)\n    onChangeCode?.(newCode)\n  }\n\n  const handleResendCode = () => {\n    onResendCode?.()\n    setTimeToResend(TIME_TO_RESEND_CODE)\n  }\n\n  const isCodeValid = code.length === 6\n  const buttonStatusDefault = !isCodeValid ? 'disabled' : undefined\n  const buttonStatus = isLoading ? 'loading' : buttonStatusDefault\n\n  return (\n    <Column\n      onSubmit={handleSubmit}\n      padding='48px 16px 0 16px'\n      position='relative'\n      tagName='form'\n    >\n      <Notification \n        align='top-center'\n        message={error}\n        show={error != undefined}\n        site={site}\n      />\n      {\n        arrow &&\n        <Container position='absolute'>\n          <Icon\n            clickable='pointer'\n            color={getGlobalStyle('--color-alvi-neutral-gray-dark')}\n            name='ArrowBackNavigate'\n            onClick={onBack}\n            sizes='xs'\n          />\n        </Container>\n      }\n      <BigScreen>\n        <>\n          <Row justifyContent='center'>\n            <Title \n              customFontSize='24px'\n              fontWeight='bold'\n              text={title}\n            />\n          </Row>\n          <Row justifyContent='center' margin='5px 0 0 0'>\n            <Container width={'60%'}>\n              <Text textAlign='center'>\n                {text}\n              </Text>\n            </Container>\n          </Row>\n          <Row justifyContent='center' margin='47px 0 0 0'>\n            <CodeInput onChange={handleChangeCode} />\n          </Row>\n          <Row\n            gap={18}\n            justifyContent='center'\n            margin='63px 0 0 0'\n          >\n            <Icon\n              color={getGlobalStyle('--color-campaigns-yellow')}\n              name='Warning'\n              sizes='md'\n            />\n            <Container width={'60%'}>\n              <Text>\n                  Asegurate de revisar las carpetas de promociones, spam o correo no deseado.\n              </Text>\n            </Container>\n          </Row>\n          <Row justifyContent='center' margin='28px 0 0 0'>\n            <Button\n              actionType='submit'\n              borderRadius='2rem'\n              label='Confirmar código'\n              site={site}\n              size='large'\n              status={buttonStatus}\n              width='50%'\n            />\n          </Row>\n          <Row justifyContent='center' margin='8px 0 0 0'>\n            <ResendText\n              onResendCode={handleResendCode}\n              site={site}\n              timeToResend={timeToResend}\n            />\n          </Row>\n        </>\n      </BigScreen>\n      <SmallScreen>\n        <>\n          <Row justifyContent='start'>\n            <Title \n              customFontSize='18px'\n              fontWeight='bold'\n              text={title}\n            />\n          </Row>\n          <Row justifyContent='start' margin='20px 0 0 0'>\n            <Container width={'100%'}>\n              <Text fontSize='md' textAlign='left'>\n                {text}\n              </Text>\n            </Container>\n          </Row>\n          <Row justifyContent='center' margin='49px 0 0 0'>\n            <CodeInput onChange={handleChangeCode} />\n          </Row>\n          <Row\n            gap={18}\n            justifyContent='center'\n            margin='30px 0 0 0'\n          >\n            <Icon\n              color={getGlobalStyle('--color-campaigns-yellow')}\n              name='Warning'\n              sizes='md'\n            />\n            <Container width={'80%'}>\n              <Text fontSize='sm'>\n                  Asegurate de revisar las carpetas de promociones, spam o correo no deseado.\n              </Text>\n            </Container>\n          </Row>\n          <Row justifyContent='center' margin='28px 0 0 0'>\n            <Button\n              actionType='submit'\n              borderRadius='2rem'\n              label='Confirmar código'\n              site={site}\n              size='large'\n              status={buttonStatus}\n              width='100%'\n            />\n          </Row>\n          <Row justifyContent='center' margin='32px 0 0 0'>\n            <ResendText\n              onResendCode={handleResendCode}\n              site={site}\n              timeToResend={timeToResend}\n            />\n          </Row>\n        </>\n      </SmallScreen>\n    </Column>\n  )\n}","import { useMemo, useState } from 'react'\nimport {\n  BigScreen,\n  getGlobalStyle,\n  SmallScreen\n} from '../../../../helpers'\nimport {\n  cleanRut,\n  formatRut,\n  validateRut\n} from '../../../../utils/formatRut'\nimport {\n  Button,\n  ButtonStatus,\n  Icon,\n  Picture,\n  Text,\n  Title\n} from '../../../atoms'\nimport {\n  Column,\n  Container,\n  Row\n} from '../../../layout'\nimport { InputAdornment, Notification } from '../../../molecules'\nimport { CommonStepProps, ForgotPasswordStep } from '../ForgotPasswordModal'\nimport styles from './DeliveryMediumStep.module.css'\n\nexport interface DeliveryMediumStepProps extends CommonStepProps<ForgotPasswordStep.DeliveryMedium> {\n  error?: React.ReactNode;\n  imageSrc?: string;\n  loading?: boolean;\n  text?: React.ReactNode;\n  title?: string;\n  onSubmit: (rut: string, deliveryMedium: string) => void\n}\n\nconst getButtonStatus = (isValidRut: boolean, loading: boolean) : ButtonStatus => {\n  if (loading) return 'loading'\n  if (isValidRut) return 'initial'\n  return 'disabled'\n}\n\nexport const DeliveryMediumStep = ({\n  error,\n  imageSrc,\n  loading,\n  site,\n  text,\n  title,\n  onBack,\n  onSubmit\n}: DeliveryMediumStepProps) : React.ReactElement<DeliveryMediumStepProps> => {\n  const [rut, setRut] = useState('')\n\n  const handleSubmit = (deliveryMedium: 'EMAIL' | 'SMS') => {\n    onSubmit?.(rut, deliveryMedium)\n  }\n\n  const handleSubmitEmail = (e?: React.FormEvent) => {\n    e?.preventDefault()\n    handleSubmit('EMAIL')\n  }\n\n  const handleSubmitSMS = () => {\n    handleSubmit('SMS')\n  }\n\n  const handleBlurRut = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setRut(formatRut(e.target.value))\n  }\n\n  const handleChangeRut = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setRut(e.target.value)\n  }\n\n  const isValidRut = useMemo(() => {\n    return validateRut(cleanRut(rut))\n  }, [rut])\n\n  const buttonStatus = getButtonStatus(isValidRut, loading)\n\n  return (\n    <>\n      <Row onSubmit={handleSubmitEmail} tagName='form'>\n        <BigScreen>\n          <Column>\n            <Container className={styles['imageContainer']}>\n              <Picture\n                alt='delivery-medium-image'\n                className={styles['imageContainer__image']}\n                height='497px'\n                src={imageSrc}\n                width='395px'\n              />\n            </Container>\n          </Column>\n        </BigScreen>\n        <Container\n          position='relative'\n        >\n          <Container\n            position='absolute'\n          >\n            <Icon\n              clickable='pointer'\n              color={getGlobalStyle('--color-alvi-neutral-gray-dark')}\n              name='ArrowBackNavigate'\n              onClick={onBack}\n              sizes='xs'\n            />\n          </Container>\n          <Column className={styles['container']} position='relative'>\n            <Notification\n              align='top-center'\n              message={error}\n              show={error != undefined}\n              site={site}\n            />\n            <SmallScreen>\n              <Title\n                customFontSize='18px'\n                fontWeight='semibold'\n                headingLevel='h1'\n                text={title}\n              />\n            </SmallScreen>\n            <BigScreen>\n              <Title\n                customFontSize='24px'\n                fontWeight='semibold'\n                headingLevel='h1'\n                text={title}\n              />\n            </BigScreen>\n            <BigScreen>\n              <Container margin='8px 0 0 0'>\n                <Text\n                  fontSize='md'\n                  isFlex={false}\n                  type='span'\n                >\n                  {text}\n                </Text>\n              </Container>\n            </BigScreen>\n            <SmallScreen>\n              <Container margin='16px 0 0 0'>\n                <Text\n                  fontSize='md'\n                  isFlex={false}\n                  type='span'\n                >\n                  {text}\n                </Text>\n              </Container>\n            </SmallScreen>\n\n            <Container className={styles.formContainer} margin='20px 0 0 0'>\n              <Row margin='0px 0px 8px 0'>\n                <Text\n                  fontSize='sm'\n                  fontWeight='bold'\n                  htmlFor='rut'\n                  type='label'\n                >\n                  Rut\n                </Text>\n              </Row>\n              <InputAdornment\n                customClassName={styles['input--hideAutocomplete']}\n                id='rut'\n                inputAdornmentEnd={\n                  (!isValidRut && rut) && <Icon color={getGlobalStyle('--color-primary-red2')} name='Close' />\n                }\n                name='rut'\n                onBlur={handleBlurRut}\n                onChange={handleChangeRut}\n                placeholder='Ingresa tu número de rut'\n                required\n                textAlign='left'\n                value={rut}\n                width='100%'\n              />\n            </Container>\n            <Row visibility={!isValidRut && rut ? 'visible' : 'hidden'}>\n              <Text color='error'>\n                Ingresa un Rut válido \n              </Text>\n            </Row>\n            <BigScreen>\n              <Container margin='128px 0 0 0'>\n                <Text>\n                  Quiero recibirla via\n                </Text>\n              </Container>\n            </BigScreen>\n            <SmallScreen>\n              <Container margin='56px 0 0 0'>\n                <Text fontSize='md'>\n                  Quiero recibirla via\n                </Text>\n              </Container>\n            </SmallScreen>\n            <Container margin='16px 0 0 0'>\n              <Button\n                actionType='button'\n                borderRadius='2rem'\n                label='Correo electrónico'\n                onClick={handleSubmitEmail}\n                site={site}\n                size='large'\n                status={buttonStatus}\n                width='100%'\n              />\n            </Container>\n            <Container margin='8px 0 0 0'>\n              <Button \n                actionType='button'\n                borderRadius='2rem'\n                label='Mensaje de texto'\n                onClick={handleSubmitSMS}\n                site={site}\n                size='large'\n                status={buttonStatus}\n                type='secondary'\n                width='100%'\n              />\n            </Container>\n          </Column>\n        </Container>\n      </Row>\n    </>\n  )\n}","import { BigScreen, SmallScreen } from '../../../helpers'\nimport { Site } from '../../../shared/interfaces/Site'\nimport { Modal } from '../../molecules'\nimport styles from './ForgotPasswordModal.module.css'\n\nexport interface ForgotPasswordModalProps {\n  children?: React.ReactNode;\n  isOpen?: boolean;\n  maxHeight?: string;\n  maxWidth?: string;\n  site?: 'unimarc' | 'alvi';\n  onClose?: () => void;\n}\n\nexport enum ForgotPasswordStep {\n  DeliveryMedium = 'delivery-medium',\n  ConfirmDeliveryMedium = 'confirm-delivery-medium',\n  Code = 'code',\n  ResetPassword = 'reset-password'\n}\n\nexport interface CommonStepProps<T extends ForgotPasswordStep> {\n  site?: Site;\n  step?: T;\n  onBack?: () => void;\n  onSubmit?: (...args : unknown[]) => void;\n}\n\nexport const ForgotPasswordModal = ({\n  children,\n  isOpen,\n  maxHeight = 'initial',\n  maxWidth = '820px',\n  site = 'unimarc',\n  onClose\n}: ForgotPasswordModalProps) => {\n  return (\n    <>\n      <BigScreen>\n        <Modal\n          className={styles['modal']}\n          isOpen={isOpen}\n          maxHeight={maxHeight}\n          maxWidth={maxWidth}\n          site={site}\n          toggle={onClose}\n          toggleOutside={onClose}\n        >\n          {children}\n        </Modal>\n      </BigScreen>\n      <SmallScreen>\n        <Modal\n          fullScreen\n          isOpen={isOpen}\n          site={site}\n          toggle={onClose}\n          toggleOutside={onClose}\n        >\n          {children}\n        </Modal>\n      </SmallScreen>\n    </>\n  )\n}\n","import { useEffect, useRef, useState } from 'react'\nimport { getGlobalStyle } from '../../../../../helpers'\nimport { Text } from '../../../../atoms'\nimport { Container, Row } from '../../../../layout'\nimport { BaseContainerProps } from '../../../../layout/BaseContainer/BaseContainer'\n\nexport interface PasswordRequerimentIndicatorProps extends Omit<BaseContainerProps, 'ref'> {\n  isValid?: boolean\n  label?: string\n}\n\nconst getDotColor = (isValid: boolean, isFirstRender: boolean) => {\n  if (isFirstRender) return getGlobalStyle('--color-neutral-dusty-gray')\n  if (isValid) return getGlobalStyle('--color-feedback-success-dark')\n  return getGlobalStyle('--color-feedback-error-dark')\n}\n\nexport const PasswordRequerimentIndicator = ({\n  isValid,\n  label,\n  ...props\n}: PasswordRequerimentIndicatorProps) => {\n  const isFirstRender = useRef(true)\n  const [dotColor, setDotColor] = useState<string>() \n\n  useEffect(() => {\n    // only change color when `isValid` changes\n    setDotColor(getDotColor(isValid, isFirstRender.current))\n    isFirstRender.current = false\n  }, [isValid])\n\n  return (\n    <Row\n      alignItems='center'\n      gap={5}\n      padding={'7px 0 0 0'}\n      width={'50%'}\n      {...props}\n    >\n      <Container \n        backgroundColor={dotColor}\n        borderRadius='100%'\n        customHeight='7px'\n        width='7px'\n      />\n      <Text\n        customColor={dotColor}\n        fontSize='xs'\n      >\n        {label}\n      </Text>\n    </Row>\n  )\n}","import React, { useMemo, useState } from 'react'\nimport {\n  BigScreen,\n  getGlobalStyle,\n  SmallScreen\n} from '../../../../helpers'\nimport {\n  Button,\n  ButtonStatus,\n  Divider,\n  Icon,\n  Picture,\n  Text,\n  Title\n} from '../../../atoms'\nimport {\n  Column,\n  Container,\n  Row\n} from '../../../layout'\nimport { Notification, PasswordInput } from '../../../molecules'\nimport { CommonStepProps, ForgotPasswordStep } from '../ForgotPasswordModal'\nimport { PasswordRequerimentIndicator } from './PasswordRequirementIndicator/PasswordRequerimentIndicator'\n\nexport interface ResetPasswordStepProps extends CommonStepProps<ForgotPasswordStep.ResetPassword> {\n  error?: React.ReactNode;\n  imageSrc?: string;\n  loading?: boolean;\n  text?: string;\n  title?: string;\n  onSubmit?: (password: string) => void;\n}\n\nexport interface PasswordRequerimentIndicatorItem {\n  label: string\n  validate: (password: string) => boolean\n}\n\nconst PASSWORD_REQUERIMENTS : PasswordRequerimentIndicatorItem[] = [\n  {\n    label: '1 minúscula (a-z)',\n    validate: (password) => {return password !== password.toUpperCase()}\n  },\n  {\n    label: '1 caracter especial (Ej: *·#%)',\n    validate: (password) => {return !!password.match(/[^a-zA-Z0-9]/)}\n  },\n  {\n    label: '1 número (0-9)',\n    validate: (password) => {return !!password.match(/\\d/)}\n  },\n  {\n    label: '1 mayúscula (A-Z)',\n    validate: (password) => {return !!password.match(/[A-Z]/)}\n  },\n  {\n    label: 'Mínimo 8 carácteres',\n    validate: (password) => {return password.length >= 8}\n  }\n]\n\nconst getButtonStatus = (loading: boolean, canContinue: boolean) : ButtonStatus => {\n  if (loading) return 'loading'\n  if (!canContinue) return 'disabled'\n  return 'initial'\n}\n\nexport const ResetPasswordStep = ({\n  error,\n  imageSrc,\n  loading,\n  site,\n  text,\n  title,\n  onBack,\n  onSubmit\n} : ResetPasswordStepProps) : React.ReactElement<ResetPasswordStepProps> => {\n  const [formState, setFormState] = useState({\n    password: '',\n    repeatPassword: ''\n  })\n  const isSamePassword = formState.password === formState.repeatPassword\n\n  const handleSubmit = (e?: React.FormEvent) => {\n    e?.preventDefault()\n    onSubmit?.(formState.password)\n  }\n\n  const handleChangePassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormState({\n      ...formState,\n      password: e.target.value\n    })\n  }\n\n  const handleChangeRepeatPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormState({\n      ...formState,\n      repeatPassword: e.target.value\n    })\n  }\n\n  const requirements = useMemo(() => {\n    return PASSWORD_REQUERIMENTS.map(requirement => {\n      return {\n        ...requirement,\n        isValid: requirement.validate(formState.password)\n      }\n    })\n  }, [formState.password])\n\n  const canContinue = useMemo(() => {\n    return requirements.every(requirement => {return requirement.isValid}) && isSamePassword\n  }, [requirements, isSamePassword])\n\n  const buttonStatus = getButtonStatus(loading, canContinue)\n\n  return (\n    <Column onSubmit={handleSubmit} tagName='form'>\n      <BigScreen>\n        <Row>\n          <Column>\n            <Container margin='-20px 0px -20px -20px'>\n              <Picture\n                alt='forgot-password-image'\n                height='497px'\n                objectFit='cover'\n                src={imageSrc}\n                width='395px'\n              />\n            </Container>\n          </Column>\n          <Column padding='24px 20px 0 40px' position='relative'>\n            <Notification \n              align='top-center'\n              message={error}\n              show={error != undefined}\n              site={site}\n            />\n            <Container\n              margin='0 0 0 30px'\n              position='absolute'\n            >\n              <Icon\n                clickable='pointer'\n                color={getGlobalStyle('--color-alvi-neutral-gray-dark')}\n                name='ArrowBackNavigate'\n                onClick={onBack}\n                sizes='xs'\n              />\n            </Container>\n            <Row justifyContent='start'>\n              <Title\n                customFontSize='24px'\n                fontWeight='bold'\n                text={title}\n              />\n            </Row>\n            <Row\n              justifyContent='start'\n              margin='12px 0 0 0'\n            >\n              <Container width={'100%'}>\n                <Text fontSize='md' textAlign='left'>\n                  {text}\n                </Text>\n              </Container>\n            </Row>\n\n            <Row justifyContent='start' margin='20px 0 0 0'>\n              <Column width={'100%'}>\n                <Row margin='0 0 9px 0'>\n                  <Text\n                    fontSize='md'\n                    fontWeight='semibold'\n                    htmlFor='password'\n                    type='label'\n                  >\n                    Nueva contraseña\n                  </Text>\n                </Row>\n                <PasswordInput \n                  id='password'\n                  onChange={handleChangePassword}\n                  placeholder='Ingresa tu nueva contraseña'\n                />\n                <Divider color={getGlobalStyle('--color-neutral-gray')} verticalMargin={4} />\n              </Column>\n            </Row>\n            <Column\n              justifyContent='start'\n              margin='12px 0 0 0'\n              width={'100%'}\n            >\n              <Text fontSize='sm'>Debes usar al menos:</Text>\n              <Row\n                isWrap\n              >\n                {requirements.map(({label, isValid}, index) => {return (\n                  <PasswordRequerimentIndicator\n                    isValid={isValid}\n                    key={index}\n                    label={label}\n                  />\n                )})}\n              </Row>\n            </Column>\n            <Row justifyContent='start' margin='8px 0 0 0'>\n              <Column width={'100%'}>\n                <Row margin='0 0 9px 0'>\n                  <Text\n                    fontSize='md'\n                    fontWeight='semibold'\n                    htmlFor='r-password'\n                    type='label'\n                  >\n                    Contraseña\n                  </Text>\n                </Row>\n                <PasswordInput \n                  id='r-password'\n                  onChange={handleChangeRepeatPassword}\n                  placeholder='Ingresa tu contraseña'\n                />\n                <Divider color={getGlobalStyle('--color-neutral-gray')} verticalMargin={4} />\n                <Row visibility={isSamePassword ? 'hidden' : 'visible'}>\n                  <Text fontSize='md'>\n                    Las contraseñas deben coincidir\n                  </Text>\n                </Row>\n              </Column>\n            </Row>\n            <Row justifyContent='start' margin='60px 0 0 0'>\n              <Button\n                actionType='submit'\n                borderRadius='2rem'\n                label='Confirmar nueva contraseña'\n                site={site}\n                size='large'\n                status={buttonStatus}\n                width='100%'\n              />\n            </Row>\n          </Column>\n        </Row>\n      </BigScreen>\n      <SmallScreen>\n        <Column padding='48px 16px 0 16px' position='relative'>\n          <Notification \n            align='top-center'\n            message={error}\n            show={error != undefined}\n          />\n          <Container\n            position='absolute'\n          >\n            <Icon\n              clickable='pointer'\n              color={getGlobalStyle('--color-alvi-neutral-gray-dark')}\n              name='ArrowBackNavigate'\n              onClick={onBack}\n              sizes='xs'\n            />\n          </Container>\n\n          <Row justifyContent='start'>\n            <Title\n              customFontSize='18px'\n              fontWeight='bold'\n              text={title}\n            />\n          </Row>\n          <Row\n            justifyContent='start'\n            margin='12px 0 0 0'\n          >\n            <Container width={'100%'}>\n              <Text fontSize='md' textAlign='left'>\n                {text}\n              </Text>\n            </Container>\n          </Row>\n\n          <Row justifyContent='start' margin='28px 0 0 0'>\n            <Column width={'100%'}>\n              <Row margin='0 0 10px 0'>\n                <Text\n                  fontWeight='bold'\n                  htmlFor='password'\n                  type='label'\n                >\n                  Nueva contraseña\n                </Text>\n              </Row>\n              <PasswordInput \n                id='password'\n                onChange={handleChangePassword}\n                placeholder='Ingresa tu nueva contraseña'\n              />\n              <Divider color={getGlobalStyle('--color-neutral-gray')} verticalMargin={4} />\n            </Column>\n          </Row>\n          <Column\n            justifyContent='start'\n            width={'100%'}\n          >\n            <Text fontSize='sm'>Debes usar al menos:</Text>\n            <Column>\n              {requirements.map(({label, isValid}, index) => {return (\n                <PasswordRequerimentIndicator\n                  isValid={isValid}\n                  key={index}\n                  label={label}\n                  width={'100%'}\n                />\n              )})}\n            </Column>\n          </Column>\n          <Row justifyContent='center' margin='28px 0 0 0'>\n            <Column width={'100%'}>\n              <Row margin='0 0 10px 0'>\n                <Text\n                  fontWeight='bold'\n                  htmlFor='r-password'\n                  type='label'\n                >\n                  Contraseña\n                </Text>\n              </Row>\n              <PasswordInput \n                id='r-password'\n                onChange={handleChangeRepeatPassword}\n                placeholder='Ingresa tu contraseña'\n              />\n              <Divider color={getGlobalStyle('--color-neutral-gray')} verticalMargin={4} />\n            </Column>\n          </Row>\n          <Row justifyContent='center' margin='35px 0'>\n            <Button\n              actionType='submit'\n              borderRadius='2rem'\n              label='Confirmar nueva contraseña'\n              site={site}\n              size='large'\n              status={buttonStatus}\n              width='100%'\n            />\n          </Row>\n        </Column>\n      </SmallScreen>\n    </Column>\n  )\n}","export function cleanRut(rut: string): string {\n  return typeof rut === 'string' ? rut.replace(/(^(0+|[^0-9kK]+))|\\.|-/g, '').toUpperCase() : ''\n}\n\nexport function formatRut(rut: string): string {\n  rut = cleanRut(rut)\n  if (rut.length === 0) {\n    return ''\n  }\n  let result = rut.slice(-4, -1) + '-' + rut.slice(rut.length - 1)\n  for (let i = 4; i < rut.length; i += 3) {\n    result = rut.slice(-3 - i, -i) + '.' + result\n  }\n  return result\n}\n\n/**\n * validates a chilean rut\n */\n\nexport function validateRut(rut: string): boolean {\n  rut = cleanRut(rut)\n  if (rut.length === 0) {\n    return false\n  }\n  const dv = rut.slice(-1).toUpperCase()\n  const rutNumber = rut.slice(0, -1)\n  const rutNumberArray = rutNumber.split('').reverse()\n  let sum = 0\n  for (let i = 0; i < rutNumberArray.length; i++) {\n    sum += parseInt(rutNumberArray[i], 10) * (i % 6 + 2)\n  }\n  const dvCalculated = 11 - sum % 11\n  if (dvCalculated === 11) {\n    return dv === '0'\n  }\n  if (dvCalculated === 10) {\n    return dv === 'K'\n  }\n  return dv === dvCalculated.toString()\n}"],"names":[],"sourceRoot":""}