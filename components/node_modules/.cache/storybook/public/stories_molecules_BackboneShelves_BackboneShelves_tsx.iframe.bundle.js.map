{"version":3,"file":"stories_molecules_BackboneShelves_BackboneShelves_tsx.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAGA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;AClPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://components/./stories/molecules/BackboneShelves/BackboneShelves.tsx","webpack://components/./stories/molecules/BackboneShelves/BackBoneShelves.module.css","webpack://components/./stories/molecules/BackboneShelves/BackBoneShelves.module.css?0bc2"],"sourcesContent":["import React from 'react'\nimport { Backbone } from '../../atoms'\nimport {\n  Column,\n  Container,\n  Row,\n  Spacer\n} from '../../layout'\nimport { BigScreen, SmallScreen } from '../../../helpers/mediaQueries'\nimport { getGlobalStyle } from '../../../helpers'\nimport style from './BackBoneShelves.module.css'\n\ninterface BackboneShelvesProps {\n  horizontal?: boolean;\n  shelvesForRow?: number;\n  shelvesQuantityDesktop?: number;\n  shelvesQuantityMobile?: number;\n}\n\nexport const BackboneShelves = ({\n  horizontal = false,\n  shelvesForRow = 5,\n  shelvesQuantityDesktop = 10,\n  shelvesQuantityMobile = 6\n}: BackboneShelvesProps): React.ReactElement<BackboneShelvesProps> => {\n\n  const calculateCustomWidthForShelves = (): string => { return `${100 / shelvesForRow}` }\n  const customWidth = calculateCustomWidthForShelves()\n  return (\n    <>\n      <BigScreen>\n        <Row isWrap>\n          {Array.from(Array(shelvesQuantityDesktop).keys()).map(value => {\n            return (\n              <React.Fragment key={value}>\n                <Column\n                  customWidth={customWidth}\n                  padding='8px'\n                  position='relative'\n                >\n                  <Container\n                    absoluteDefault='topRight'\n                    justifyContent='end'\n                    padding='20px'\n                    position='absolute'\n                  >\n                    <Column maxWidth='40px'>\n                      <Spacer.Horizontal size={24} />\n                      <Row>\n                        <Backbone borderRadius='50%' height={40} />\n                      </Row>\n                      <Spacer.Horizontal size={24} />\n                      <Row>\n                        <Backbone borderRadius='50%' height={40} />\n                      </Row>\n                    </Column>\n                  </Container>\n                  <Column\n                    borderEdge='all'\n                    borderRadius='12px'\n                    padding='16px'\n                  >\n                    <Row justifyContent='center'>\n                      <Row maxWidth='95%'>\n                        <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={180} />\n                      </Row>\n                    </Row>\n                    <Spacer.Horizontal size={12} />\n                    <Row>\n                      <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={52} />\n                    </Row>\n                    <Spacer.Horizontal size={12} />\n                    <Row maxWidth='70%'>\n                      <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={35} />\n                    </Row>\n                    <Spacer.Horizontal size={32} />\n                    <Row justifyContent='center'>\n                      <Row maxWidth='80%'>\n                        <Backbone borderRadius='20px' height={30} />\n                      </Row>\n                    </Row>\n                  </Column>\n                </Column>\n              </React.Fragment>\n            )\n          })}\n        </Row>\n      </BigScreen>\n\n      <SmallScreen>\n        <>\n          <Column justifyContent='center'>\n            {\n              horizontal ?\n                (\n                  <Row\n                    backgroundColor={getGlobalStyle('--color-alvi-background-wild-sand')}\n                    isWrap\n                    justifyContent='center'\n                    padding='6px'\n                  >\n                    {\n                      Array.from(Array(shelvesQuantityMobile).keys()).map(value => {\n                        return (\n                          <React.Fragment key={value}>\n                            <Spacer.Horizontal size={8} />\n                            <Column\n                              backgroundColor={getGlobalStyle('--color-base-white')}\n                              borderRadius={getGlobalStyle('--border-radius-sm')}\n                              className={style.shadow}\n                              maxWidth='95%'\n                              padding='6px'\n                            >\n                              <Row justifyContent='around' padding='6px'>\n                                <Column\n                                  justifyContent='center'\n                                  maxHeight='110px'\n                                  maxWidth='110px'\n                                  width='25%'\n                                >\n                                  <Backbone\n                                    borderRadius={getGlobalStyle('--border-radius-sm')}\n                                    height={110}\n                                    width={100}\n                                  />\n                                </Column>\n\n                                <Spacer.Vertical size={12} />\n\n                                <Column\n                                  justifyContent='center'\n                                  maxWidth='50%'\n                                >\n                                  <Row>\n                                    <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={50} />\n                                  </Row>\n                                  <Spacer.Horizontal size={12} />\n                                  <Row>\n                                    <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={40} />\n                                  </Row>\n                                </Column>\n\n                                <Spacer.Vertical size={12} />\n\n                                <Column maxWidth='35px'>\n                                  <Row>\n                                    <Backbone borderRadius='50%' height={35} />\n                                  </Row>\n                                  <Spacer.Horizontal size={16} />\n                                  <Row>\n                                    <Backbone borderRadius='50%' height={35} />\n                                  </Row>\n                                </Column>\n                              </Row>\n\n                              <Spacer.Horizontal size={24} />\n\n                              <Row justifyContent='center'>\n                                <Row maxWidth='50%'>\n                                  <Backbone borderRadius='20px' height={35} />\n                                </Row>\n                              </Row>\n                            </Column>\n                            <Spacer.Horizontal size={8} />\n                          </React.Fragment>\n                        )\n                      })\n                    }\n                  </Row>\n                )\n                :\n                (\n                  <Row\n                    backgroundColor='#F5F5F5'\n                    isWrap\n                    justifyContent='center'\n                    padding='6px'\n                  >\n                    {Array.from(Array(shelvesQuantityMobile).keys()).map(value => {\n                      return (\n                        <React.Fragment key={value}>\n                          <Column\n                            customWidth='50'\n                            maxWidth='300px'\n                            padding='6px'\n                            position='relative'\n                          >\n                            <Container\n                              absoluteDefault='topRight'\n                              justifyContent='end'\n                              padding='15px'\n                              position='absolute'\n                            >\n                              <Column maxWidth='35px'>\n                                <Row>\n                                  <Backbone borderRadius='50%' height={35} />\n                                </Row>\n                                <Spacer.Horizontal size={16} />\n                                <Row>\n                                  <Backbone borderRadius='50%' height={35} />\n                                </Row>\n                              </Column>\n                            </Container>\n                            <Column\n                              backgroundColor='#FFFFFF'\n                              borderRadius='16px'\n                              padding='16px'\n                            >\n                              <Spacer.Horizontal size={16} />\n                              <Row justifyContent='center'>\n                                <Row maxWidth='75%'>\n                                  <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={120} />\n                                </Row>\n                              </Row>\n                              <Spacer.Horizontal size={12} />\n                              <Row>\n                                <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={50} />\n                              </Row>\n                              <Spacer.Horizontal size={12} />\n                              <Row maxWidth='70%'>\n                                <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={40} />\n                              </Row>\n                              <Spacer.Horizontal size={32} />\n                              <Row justifyContent='center'>\n                                <Row maxWidth='80%'>\n                                  <Backbone borderRadius='20px' height={35} />\n                                </Row>\n                              </Row>\n\n                            </Column>\n                          </Column>\n                        </React.Fragment>\n                      )\n                    })}\n                  </Row >\n                )\n            }\n          </Column>\n        </>\n      </SmallScreen>\n    </>\n  )\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".v1fP7zOawsrHmXwRpFtk {\\n  box-shadow: var(--box-shadow-lg);\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./stories/molecules/BackboneShelves/BackBoneShelves.module.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,gCAAgC;AAClC\",\"sourcesContent\":[\".shadow {\\n  box-shadow: var(--box-shadow-lg);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"shadow\": \"v1fP7zOawsrHmXwRpFtk\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./BackBoneShelves.module.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n  var p;\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      continue;\n    }\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      continue;\n    }\n    if (!a[p]) {\n      return false;\n    }\n  }\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./BackBoneShelves.module.css\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./BackBoneShelves.module.css\";\n       export default content && content.locals ? content.locals : undefined;\n"],"names":[],"sourceRoot":""}