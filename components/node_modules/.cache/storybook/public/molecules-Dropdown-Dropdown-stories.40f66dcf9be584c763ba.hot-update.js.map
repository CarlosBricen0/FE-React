{"version":3,"file":"molecules-Dropdown-Dropdown-stories.40f66dcf9be584c763ba.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AAAA;AAEA;AAOA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AAAA;AAEA;AAEA;AAIA;AA1GA","sources":["webpack://components/./stories/molecules/Dropdown/Dropdown.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { Text, Icon } from '../../atoms'\nimport {\n  Column,\n  Container,\n  Row\n} from '../../layout'\nimport { getGlobalStyle } from '../../../helpers'\nimport { useDropdownMaxHeight, useDropdownOutside } from './helpers'\n\nexport interface DropdownProps {\n  arrow?: boolean;\n  arrowColor?: string;\n  maxOptions?: number;\n  options?: string[];\n  placeholder?: string;\n  onChange?: (selected?: string) => void;\n  value?: string;\n}\n\nexport const Dropdown = ({\n  arrow = true,\n  arrowColor = getGlobalStyle('--color-text-gray-light'),\n  maxOptions = 4,\n  options = [],\n  placeholder = 'Selecciona una opciÃ³n',\n  onChange,\n  value\n}: DropdownProps) => {\n  const [open, setOpen] = useState<boolean>()\n\n  const { maxHeight } = useDropdownMaxHeight({ maxOptions })\n\n  const handleDropdownItemClick = (option: string) => {\n    return () => {\n      setOpen(false)\n\n      if (option === value) {\n        onChange(placeholder)\n      } else {\n        onChange(option)\n      }\n    }\n  }\n\n  const handleDropdownIconClick = () => {\n    setOpen(!open)\n  }\n\n  const handleDropdownClickOutside = () => {\n    setOpen(false)\n  }\n\n  const ref = useDropdownOutside<HTMLDivElement>(handleDropdownClickOutside)\n\n  return (\n    <Container position='relative' ref={ref}>\n      <Row\n        alignItems='center'\n        clickable='pointer'\n        justifyContent='between'\n        onClick={handleDropdownIconClick}\n        role='dropdown'\n      >\n        <Text clickable='pointer' fontSize='md'>\n          {value || placeholder}\n        </Text>\n\n        {\n          arrow && (\n            <Icon\n              clickable='pointer'\n              color={arrowColor}\n              name='DropDownClose'\n            />\n          )\n        }\n      </Row>\n\n      {\n        open && (\n          <Container\n            absoluteDefault={null}\n            padding='32px 0 0'\n            position='absolute'\n            zIndex='1'\n          >\n            <Column\n              backgroundColor={getGlobalStyle('--color-background-white')}\n              borderRadius={getGlobalStyle('--border-radius-2sm')}\n              boxShadow='0px 6px 10px rgba(27, 33, 56, 0.15)'\n              gap='8px'\n              maxHeight={`${maxHeight}px`}\n              overflow='auto'\n              padding='12px'\n            >\n              {\n                options?.map((option, index) => {\n                  return (\n                    <Container\n                      alignItems='center'\n                      backgroundColor={option === value ? getGlobalStyle('--color-background-gray-light') : getGlobalStyle('--color-background-white')}\n                      borderRadius='2px'\n                      clickable='pointer'\n                      key={index}\n                      minHeight='35px'\n                      onClick={handleDropdownItemClick(option)}\n                      padding='0 8px'\n                    >\n                      <Text\n                        clickable='pointer'\n                        fontSize='md'\n                        lineHeight='19px'\n                      >\n                        {option}\n                      </Text>\n                    </Container>\n                  )\n                })\n              }\n            </Column>\n          </Container>\n        )\n      }\n    </Container>\n  )\n}\n"],"names":[],"sourceRoot":""}