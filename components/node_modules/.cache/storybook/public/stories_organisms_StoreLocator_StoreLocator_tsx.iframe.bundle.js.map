{"version":3,"file":"stories_organisms_StoreLocator_StoreLocator_tsx.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AASA;AACA;AAMA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AAGA;AAAA;AAEA;AAIA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AAGA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;AClVA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;AC7GA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;AClBA;AAKA;AACA;AAKA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAGA;AAzDA;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;ACtSA;AACA;AACA;AACA;AACA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAnDA;;;;;;;;;;;;;;;;;;;;;;AClBA;AAKA;AAKA;AAOA;AACA;AAEA;AAAA;AAAA;AAAA;AAynOA;AACA;AAKA;AAMA;AACA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;ACvFA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAwCA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAGA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;AC5PA;AACA;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AA4EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAIA;;;;;;;;;;;;;;;;;;ACnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://components/./stories/organisms/StoreLocator/ModalState/AddressModal/AddressModalContent/index.tsx","webpack://components/./stories/organisms/StoreLocator/ModalState/AddressModal/index.tsx","webpack://components/./stories/organisms/StoreLocator/ModalState/MapModal/ManualAddressForm/FieldValue.tsx","webpack://components/./stories/organisms/StoreLocator/ModalState/MapModal/ManualAddressForm/RenderInputField.tsx","webpack://components/./stories/organisms/StoreLocator/ModalState/MapModal/ManualAddressForm/index.tsx","webpack://components/./stories/organisms/StoreLocator/ModalState/MapModal/MapModalContent/InputRender.tsx","webpack://components/./stories/organisms/StoreLocator/ModalState/MapModal/MapModalContent/index.tsx","webpack://components/./stories/organisms/StoreLocator/ModalState/MapModal/ModalHeader/index.tsx","webpack://components/./stories/organisms/StoreLocator/ModalState/MapModal/index.tsx","webpack://components/./stories/organisms/StoreLocator/ModalState/index.ts","webpack://components/./stories/organisms/StoreLocator/StoreLocator.tsx","webpack://components/./stories/organisms/StoreLocator/ModalState/AddressModal/index.module.css","webpack://components/./stories/organisms/StoreLocator/ModalState/MapModal/index.module.css","webpack://components/./stories/organisms/StoreLocator/ModalState/AddressModal/index.module.css?88d2","webpack://components/./stories/organisms/StoreLocator/ModalState/MapModal/index.module.css?d15b"],"sourcesContent":["import React, { useRef } from 'react'\nimport {\n  Button,\n  ButtonStatus,\n  Divider,\n  Icon,\n  RadioSelector,\n  Text,\n  Title\n} from '../../../../../atoms'\nimport { InputAdornment } from '../../../../../molecules'\nimport {\n  Column,\n  Container,\n  Row,\n  Spacer\n} from '../../../../../layout'\nimport { getGlobalStyle } from '../../../../../../helpers'\nimport { toCapitalize } from '../../../../../../utils'\nimport { ManualAddress } from '../../../ModalState/AddressModal/ManualAddress'\nimport { AddressListProps } from '../../../StoreLocator'\nimport styles from '../../AddressModal/index.module.css'\n\nexport interface UserAddressListProps {\n  addressName?: string;\n  addressType?: string;\n  city?: string;\n  complement?: string;\n  country?: string;\n  data?: UserAddressListProps\n  geoCoordinate?: number[];\n  id?: string;\n  index?: number;\n  neighborhood?: string;\n  number?: string;\n  postalCode?: string;\n  receiverName?: string;\n  reference?: string;\n  selectable?: boolean;\n  selected?: boolean;\n  site?: 'unimarc' | 'alvi';\n  state?: string;\n  street?: string;\n  addressSelector: (data: object, index: number) => void;\n}\ninterface AddressModalProps {\n  addressList: AddressListProps[];\n  confirmAddressButtonStatus: ButtonStatus;\n  isMobile?: boolean,\n  manualAddress?: boolean;\n  userAddressList: UserAddressListProps[];\n  value?: string,\n  addressOnChangeSearch?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  addressOnClearInput?: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n  addressSelector: (data: object, index: number) => void;\n  changeDeliveryMethod: () => void;\n  confirmUserAddress: () => void;\n  deleteAddress?: (data: object, index: number) => void;\n  onClick?: () => void;\n  onSelect?: (data) => void;\n  onSelectManualAddress?: () => void;\n}\n\nexport const AddressModalContent = ({\n  addressList,\n  confirmAddressButtonStatus,\n  isMobile = false,\n  manualAddress = false,\n  userAddressList,\n  value,\n  addressOnChangeSearch,\n  addressOnClearInput,\n  addressSelector,\n  changeDeliveryMethod,\n  confirmUserAddress,\n  onClick,\n  onSelect,\n  onSelectManualAddress\n}: AddressModalProps): React.ReactElement => {\n  const inputAdornmentRef = useRef<HTMLDivElement>(null)\n  const onClickClearInput = (e?: React.ChangeEvent<HTMLInputElement>) => {\n    addressOnClearInput(e, inputAdornmentRef)\n  }\n\n  return (\n    <>\n      <Container>\n        <Column>\n          {isMobile && (\n            <Spacer.Horizontal size={16} />\n          )}\n          <Row justifyContent={isMobile ? 'center' : 'start'}>\n            <Title\n              color={getGlobalStyle('--color-icons-black')}\n              customFontSize={getGlobalStyle(`--font-size-${isMobile ? 'lg' : '2xl'}`)}\n              fontWeight='semibold'\n              headingLevel='h5'\n              text='¿Dónde quieres recibir tu compra?'\n              textAlign='center'\n            />\n          </Row>\n          {!isMobile && (\n            <Container\n              absoluteDefault='topRight'\n              left='444px'\n              maxWidth='40px'\n              padding='24px 0px'\n              position='absolute'\n            >\n              <Icon\n                clickable='pointer'\n                color={getGlobalStyle('--color-icons-black')}\n                customSize={30}\n                name='Close2'\n                onClick={onClick}\n              />\n            </Container>\n          )}\n          {!isMobile && (\n            <>\n              <Spacer.Horizontal size={8} />\n              <Divider\n                color={getGlobalStyle('--color-neutral-gray')}\n                thickness={1}\n                verticalMargin={0}\n              />\n            </>\n          )}\n          <Spacer.Horizontal size={24} />\n          <Row>\n            <Text\n              fontSize='lg'\n              fontWeight='semibold'\n              textAlign='center'\n            >\n              Agrega o escoge una dirección\n            </Text>\n          </Row>\n          <Spacer.Horizontal size={16} />\n          <InputAdornment\n            background={getGlobalStyle('--color-background-white')}\n            border={`1px solid ${getGlobalStyle('--color-icons-black')}`}\n            borderRadius={getGlobalStyle('--border-radius-xl')}\n            fontSize='md'\n            inputAdornmentEnd={\n              value ? (\n                <Icon\n                  clickable='pointer'\n                  color={getGlobalStyle('--color-icons-gray')}\n                  customSize={12}\n                  name='Close'\n                  onClick={onClickClearInput}\n                />\n              ) : (\n                <Icon\n                  clickable='pointer'\n                  color={getGlobalStyle('--color-icons-gray')}\n                  customSize={18}\n                  name='SearchCart'\n                  onClick={onClickClearInput}\n                />\n              )\n            }\n            inputWidth='100%'\n            onChange={addressOnChangeSearch}\n            onFocus={null}\n            padding='12.5px 15px'\n            placeholder='Ingresa una nueva dirección...'\n            placeholderFocus='placeholder'\n            ref={inputAdornmentRef}\n            width='auto'\n          />\n          <Spacer.Horizontal size={12} />\n          <Row justifyContent='start'>\n            <Container margin='0px 2px 0px 0px' width='fit-content'>\n              <Icon customSize={20} name='Location2'/>\n            </Container>\n            <Text customColor={getGlobalStyle('--color-neutral-gray-dark')} fontSize='md'>\n              ¿No encuentras tu dirección?\n            </Text>\n            <Text\n              customClassName={styles.underlineText}\n              fontSize='md'\n              onClick={onSelectManualAddress}\n            > Ingrésala aquí </Text>\n          </Row>\n          <Spacer.Horizontal size={12} />\n        </Column>\n      </Container>\n      {addressList.length > 0 &&\n        <>\n          <Container maxHeight={isMobile ? '70vh' : '310px'} overflow='auto'>\n            <Column>\n              {\n                addressList.map((data, i) => {\n                  return (\n                    <Row\n                      clickable='pointer'\n                      key={i}\n                      onClick={() => {\n                        onSelect(data)\n                      }}\n                    >\n                      <Column\n                        clickable='pointer'\n                        padding='10px 10px 0px 0px'\n                        width='fit-content'\n                      >\n                        <Icon\n                          clickable='pointer'\n                          customSize={42}\n                          name='LocationInCircle'\n                        />\n                      </Column>\n                      <Column>\n                        <Spacer.Horizontal size={12} />\n                        <Text\n                          clickable='pointer'\n                          color='black'\n                          fontSize='md'\n                          fontWeight='semibold'\n                          isFlex\n                          textAlign='left'\n                        >\n                          {data.name}\n                        </Text>\n                        <Spacer.Horizontal size={2} />\n                        <Text\n                          clickable='pointer'\n                          color='gray'\n                          fontSize='md'\n                          fontWeight='regular'\n                          isFlex\n                          textAlign='left'\n                        >\n                          {data.city}\n                        </Text>\n                        <Spacer.Horizontal size={12} />\n                      </Column>\n                    </Row>\n                  )\n                })\n              }\n            </Column>\n          </Container>\n          {\n            manualAddress &&\n            <ManualAddress />\n\n          }\n        </>\n      }\n\n      {addressList.length === 0 && userAddressList.length > 0 &&\n        <>\n          <Spacer.Horizontal size={12} />\n          <Row>\n            <Text fontSize='lg' fontWeight='semibold'>\n              Direcciones guardadas\n            </Text>\n          </Row>\n          <Spacer.Horizontal size={8} />\n          <Column\n            customHeight={isMobile ? null : '160px'}\n            overflow='auto'\n            padding='0px -20px'\n          >\n            {\n              userAddressList.map((data, i) => {\n                return (\n                  <Container\n                    alignItems='center'\n                    clickable='pointer'\n                    key={i}\n                  >\n                    <RadioSelector checked={data.selected} onClick={() => { return addressSelector(data, i) }} />\n                    <Column margin='0px 0px 0px 10px' onClick={() => { return addressSelector(data, i) }}>\n                      <Spacer.Horizontal size={12} />\n                      <Text\n                        clickable='pointer'\n                        color='black'\n                        fontSize='md'\n                        fontWeight='semibold'\n                        isFlex\n                        textAlign='left'\n                      >\n                        {data.street.length > 0 ? data.street + ',' : ''} {data.number}\n                      </Text>\n                      <Spacer.Horizontal size={2} />\n                      <Text\n                        clickable='pointer'\n                        color='gray'\n                        fontSize='md'\n                        fontWeight='regular'\n                        isFlex\n                        textAlign='left'\n                        truncate={60}\n                      >\n                        {data.neighborhood + ', ' + toCapitalize(data.state.toLocaleLowerCase())}\n                      </Text>\n                      <Spacer.Horizontal size={8} />\n                    </Column>\n                  </Container>\n                )\n              })\n            }\n          </Column>\n          <Column\n            className={styles.spacerShadow}\n            margin={isMobile ? '0 0 0 -20px' : '0'}\n            minWidth={isMobile ? '100vw' : '495px'}\n            padding='20px 20px 0px 20px'\n            position='relative'\n          >\n            <Button\n              borderRadius={getGlobalStyle('--border-radius-lg')}\n              fontWeight={getGlobalStyle('--font-weight-semibold')}\n              label='Confirmar dirección'\n              onClick={confirmUserAddress}\n              size={isMobile ? 'sm' : 'medium'}\n              status={confirmAddressButtonStatus}\n              width='100%'\n            />\n            <Spacer.Horizontal size={12} />\n            <Button\n              borderRadius='24px'\n              fontWeight={getGlobalStyle('--font-weight-semibold')}\n              label='Cambiar a retiro en tienda'\n              onClick={changeDeliveryMethod}\n              size={isMobile ? 'sm' : 'medium'}\n              type='secondary'\n              width='100%'\n            />\n          </Column>\n        </>\n      }\n    </>\n  )\n}\n","import { useState, useEffect} from 'react'\nimport { Modal } from '../../../../molecules'\nimport { Column, Spacer } from '../../../../layout'\nimport { BigScreen, SmallScreen } from '../../../../../helpers/mediaQueries'\nimport { AddressModalContent, UserAddressListProps } from '../AddressModal/AddressModalContent'\nimport { ButtonStatus } from '../../../../atoms'\nimport { AddressListProps } from '../../StoreLocator'\n\nexport interface AddressModalProps {\n  addressList?: AddressListProps[];\n  confirmAddressButtonStatus?: ButtonStatus;\n  currentAddress?: UserAddressListProps;\n  isOpen?: boolean;\n  manualAddress?: boolean;\n  placeholderSearch?: string;\n  placeholderSearchPickUp?: string;\n  site?: 'unimarc' | 'alvi';\n  userAddressList?: UserAddressListProps[];\n  value?: string;\n  addressOnChangeSearch?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  addressOnClearInput?: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n  addressSelector?: (data: object, index: number) => void;\n  changeDeliveryMethod?: () => void;\n  confirmUserAddress?: () => void;\n  deleteAddress?: (data: object, index: number) => void;\n  onClick?: () => void;\n  onSelect?: (data: object) => void;\n  onSelectManualAddress?: () => void;\n}\n\nexport const AddressModal = ({\n  addressList,\n  confirmAddressButtonStatus,\n  isOpen = true,\n  manualAddress,\n  userAddressList,\n  value,\n  addressOnChangeSearch,\n  addressOnClearInput,\n  addressSelector,\n  changeDeliveryMethod,\n  confirmUserAddress,\n  deleteAddress,\n  onClick,\n  onSelect,\n  onSelectManualAddress\n}: AddressModalProps): React.ReactElement => {\n  const [screenHeight, setScreenHeight] = useState(`${(window.innerHeight * 0.94).toString()}px`)\n\n  useEffect(() => {\n    const resizeEvent = () => {\n      setScreenHeight(`${(window.innerHeight * 0.94).toString()}px`)\n    }\n    window.addEventListener('resize', resizeEvent)\n    return () => {\n      window.removeEventListener('resize', resizeEvent)\n    }\n  }, [window.innerHeight])\n\n  const AddressPropsUnimarc = {\n    addressList,\n    confirmAddressButtonStatus,\n    manualAddress,\n    userAddressList,\n    value,\n    addressOnChangeSearch,\n    addressOnClearInput,\n    addressSelector,\n    changeDeliveryMethod,\n    confirmUserAddress,\n    deleteAddress,\n    onClick,\n    onSelect,\n    onSelectManualAddress\n  }\n  return (\n    <>\n      <BigScreen>\n        <Modal\n          hiddenX\n          isOpen={isOpen}\n          maxHeight='550px'\n          maxWidth='495px'\n          minHeight='550px'\n          toggle={null}\n          toggleOutside={null}\n        >\n          <Spacer.Horizontal size={8} />\n          <AddressModalContent {...AddressPropsUnimarc} />\n        </Modal>\n      </BigScreen>\n      <SmallScreen>\n        <Modal\n          fullScreen\n          hiddenX\n          isOpen={isOpen}\n          marginFullScreen='1vh 0 0 0'\n          minHeightFullScreen={screenHeight}\n          toggle={onClick}\n          toggleOutside={onClick}\n        >\n          <Column customHeight={screenHeight}>\n            <Spacer.Horizontal size={8} />\n            <AddressModalContent {...AddressPropsUnimarc} isMobile/>\n          </Column>\n        </Modal>\n      </SmallScreen>\n    </>\n  )\n}\n","import React from 'react'\nimport { Text } from '../../../../../atoms'\nimport { Row, Spacer } from '../../../../../layout'\n\nexport const FieldValue = ({ fieldTitle, fieldValue }: { fieldTitle: string; fieldValue: string; }): React.ReactElement => {\n  return (\n    <>\n      <Row>\n        <Text fontSize='md' fontWeight='semibold'>\n          {fieldTitle}\n        </Text>\n      </Row>\n      <Spacer.Horizontal size={8} />\n      <Row>\n        <Text>{fieldValue}</Text>\n      </Row>\n      <Spacer.Horizontal size={18} />\n    </>\n  )\n}","import { Ref } from 'react'\nimport {\n  Text,\n  Icon,\n  Divider\n} from '../../../../../atoms'\nimport { InputAdornment } from '../../../../../molecules'\nimport {\n  Horizontal,\n  Row,\n  Column\n} from '../../../../../layout'\nimport { getGlobalStyle } from '../../../../../../helpers'\n\ninterface MapModalProps {\n  defaultValue?: string;\n  focusedInput: string;\n  inputRef: Ref<unknown>;\n  inputTitle: string;\n  inputValue: string;\n  placeholder: string;\n  type?: string;\n  clearIcon: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n  onChange: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  setFocusedInput: (e?: string) => void;\n}\n\nexport const RenderInputField = ({\n  defaultValue,\n  focusedInput,\n  inputRef,\n  inputTitle,\n  inputValue,\n  placeholder,\n  type,\n  clearIcon,\n  onChange,\n  setFocusedInput\n}: MapModalProps): React.ReactElement => {\n  const inputIsFocused = focusedInput === inputTitle\n\n  return (\n    <Column>\n      <Row>\n        <Text fontSize='md' fontWeight='semibold'>\n          {inputTitle}\n        </Text>\n      </Row>\n      <Horizontal size={8} />\n      <Row>\n        <>\n          <InputAdornment\n            defaultValue={defaultValue}\n            fontSize='base'\n            height='20px'\n            inputAdornmentEnd={\n              inputValue && (\n                <Icon\n                  clickable='pointer'\n                  color={getGlobalStyle('--color-neutral-gray-dark')}\n                  customSize={inputIsFocused ? 14 : 20}\n                  name={inputIsFocused ? 'Close' : 'Edit'}\n                  onClick={inputIsFocused ? clearIcon : undefined}\n                />\n              )\n            }\n            inputWidth='100%'\n            onChange={onChange}\n            onFocus={() => {setFocusedInput(inputTitle)}}\n            placeholder={placeholder}\n            placeholderFocus='placeholder'\n            ref={inputRef}\n            type={type}\n            width='auto'\n          />\n        </>\n      </Row>\n      <Divider\n        color={getGlobalStyle('--color-neutral-gray')}\n        thickness={1}\n        verticalMargin={6}\n      />\n    </Column>\n  )\n}","import React, {\n  useEffect,\n  useRef,\n  useState\n} from 'react'\nimport { Text, Button } from '../../../../../atoms'\nimport { Selector } from '../../../../../molecules'\nimport {\n  Column,\n  Container,\n  Spacer\n} from '../../../../../layout'\nimport { FieldValue } from './FieldValue'\nimport { RenderInputField } from './RenderInputField'\nimport { getGlobalStyle } from '../../../../../../helpers'\nimport styles from '../../MapModal/index.module.css'\nimport { MapModalProps } from '..'\n\ninterface ManualAddressFormProps extends MapModalProps {\n  isMobile?: boolean;\n  step2ManualAddress?: boolean;\n  valueAddressStreetNumber?: string;\n  setStep2ManualAddress: (props: boolean) => void;\n}\n\nexport const ManualAddressForm = ({\n  buttonStatus,\n  comunaList,\n  isMobile = false,\n  regionList,\n  step2ManualAddress,\n  valueAddressComments,\n  valueAddressStreetNumber,\n  valueAddressRef,\n  valueManualAddress,\n  buttonAddressMap,\n  changeDeliveryMethod,\n  mapAddressCommentsOnChangeSearch,\n  mapAddressCommentsOnClearInput,\n  mapAddressOnChangeSearch,\n  mapAddressOnClearInput,\n  mapAddressRefOnChangeSearch,\n  mapAddressRefOnClearInput,\n  mapAddressStreetNumberOnChangeSearch,\n  mapAddressStreetNumberOnClearInput,\n  markingConfirmButton,\n  regionSelector,\n  setStep2ManualAddress,\n  validateAddress\n}: ManualAddressFormProps): React.ReactElement => {\n  const [focusedInput, setFocusedInput] = useState('')\n  const [communeVal, setCommuneVal] = useState('')\n  const [apartment, setApartment] = useState('')\n  const [regionVal, setRegionVal] = useState('')\n  const [loadingBtn, setLoadingBtn] = useState(false)\n  const inputAdornmentRefAddress = useRef<HTMLDivElement>(null)\n  const inputAdornmentAddress = useRef<HTMLDivElement>(null)\n  const inputAdornmentStreetNumber = useRef<HTMLDivElement>(null)\n  const inputAdornmentRefComment = useRef<HTMLDivElement>(null)\n\n  const onClickClearInputAddressRef = (e?: React.ChangeEvent<HTMLInputElement>) => {\n    mapAddressRefOnClearInput(e, inputAdornmentRefAddress)\n  }\n  const onClickClearInputAddress = (e?: React.ChangeEvent<HTMLInputElement>) => {\n    mapAddressOnClearInput(e, inputAdornmentAddress)\n  }\n  const onClickClearInputAddressComment = (e?: React.ChangeEvent<HTMLInputElement>) => {\n    mapAddressCommentsOnClearInput(e, inputAdornmentRefComment)\n  }\n  const onClickClearInputStreetNumber = (e?: React.ChangeEvent<HTMLInputElement>) => {\n    mapAddressStreetNumberOnClearInput(e, inputAdornmentStreetNumber)\n  }\n\n  const onClickConfirmBtn = async () => {\n    setLoadingBtn(true)\n    // validate if markingConfirmButton is a function\n    if (typeof markingConfirmButton === 'function') {\n      markingConfirmButton()\n    }\n    const addressResult = await validateAddress({\n      description: `${valueManualAddress}, ${communeVal}, Chile`,\n      refreshMap: false\n    })\n    if (addressResult.error) return\n\n    setLoadingBtn(false)\n    setStep2ManualAddress(!step2ManualAddress)\n  }\n\n  const btnStatus = () => {\n    if (loadingBtn) return 'loading'\n\n    return (\n      communeVal.includes('Selecciona') || regionVal.includes('Seleccionar') ? 'disabled' : buttonStatus\n    )\n  }\n\n  const handleInputScroll = () => {\n    const activeElement = document?.activeElement as HTMLInputElement\n    if (activeElement) {\n      if (activeElement?.type === 'number') {\n        activeElement.blur()\n      }\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('wheel', handleInputScroll)\n    return () => {\n      window.removeEventListener('wheel', handleInputScroll)\n    }\n  }, [])\n\n  if (step2ManualAddress) return (\n    <>\n      <Spacer.Horizontal size={16} />\n      <Container customHeight={isMobile ? null : '135px'} overflow='auto'>\n        <Column maxWidth={isMobile ? '98%' : '100%'}>\n          <FieldValue fieldTitle='Dirección' fieldValue={valueManualAddress} />\n          <FieldValue fieldTitle='Región' fieldValue={regionVal} />\n          <FieldValue fieldTitle='Comuna' fieldValue={communeVal} />\n          <RenderInputField\n            clearIcon={onClickClearInputAddressRef}\n            defaultValue={apartment}\n            focusedInput={focusedInput}\n            inputRef={inputAdornmentRefAddress}\n            inputTitle='Departamento, casa u oficina'\n            inputValue={valueAddressRef}\n            onChange={mapAddressRefOnChangeSearch}\n            placeholder='Ingresa tu departamento/oficina/casa/piso'\n            setFocusedInput={setFocusedInput}\n          />\n          <Spacer.Horizontal size={18} />\n          <RenderInputField\n            clearIcon={onClickClearInputAddressComment}\n            defaultValue={apartment}\n            focusedInput={focusedInput}\n            inputRef={inputAdornmentRefComment}\n            inputTitle='Instrucciones adicionales'\n            inputValue={valueAddressComments}\n            onChange={mapAddressCommentsOnChangeSearch}\n            placeholder='Agrega información adicional'\n            setFocusedInput={setFocusedInput}\n          />\n          <Spacer.Horizontal size={18} />\n        </Column>\n      </Container>\n      <Column\n        className={styles.containerShadow}\n        margin={isMobile ? '0 0 0 -20px' : '0'}\n        minWidth={isMobile ? '100vw' : '495px'}\n        padding='20px 20px 0px 20px'\n        position='relative'\n      >\n        <Button\n          borderRadius={getGlobalStyle('--border-radius-xl')}\n          fontWeight={getGlobalStyle('--font-weight-semibold')}\n          label='Guardar dirección'\n          onClick={buttonAddressMap}\n          size='large'\n          status={buttonStatus}\n          width='100%'\n        />\n      </Column>\n    </>\n  )\n\n  return (\n    <>\n      <Column customHeight={isMobile ? null : '315px'} overflow='auto'>\n        <Column>\n          <Text fontSize='md' fontWeight='semibold'>\n            Región\n          </Text>\n          <Selector\n            appearance='none'\n            arrow\n            color='black'\n            iconName='DropDownCloseV2'\n            iconSize={20}\n            marginLess\n            onChange={(e) => {\n              if (!e.target.value) return\n\n              regionSelector(e)\n              setRegionVal(e.target.value)\n            }}\n            onFocus={() => { setFocusedInput('') }}\n            options={regionList}\n            padding='8px 0px 6px 0px'\n            placeholder='Selecciona tu región'\n            ref={(ref) => {\n              if (!ref?.value) return\n\n              setRegionVal(ref.value)\n            }}\n          />\n          <Spacer.Horizontal size={18} />\n          <Text fontSize='md' fontWeight='semibold'>\n            Comuna\n          </Text>\n          <Selector\n            appearance='none'\n            arrow\n            color='black'\n            iconName='DropDownCloseV2'\n            iconSize={20}\n            marginLess\n            onChange={(e) => {\n              if (!e.target.value) return\n\n              setCommuneVal(e.target.value)\n            }}\n            onFocus={() => { setFocusedInput('') }}\n            options={comunaList}\n            padding='8px 0px 6px 0px'\n            placeholder='Selecciona tu comuna'\n            ref={(ref) => {\n              if (!ref?.value) return\n\n              setCommuneVal(ref.value)\n            }}\n          />\n          <Spacer.Horizontal size={18} />\n          <RenderInputField\n            clearIcon={onClickClearInputAddress}\n            focusedInput={focusedInput}\n            inputRef={inputAdornmentAddress}\n            inputTitle='Ingresa nombre de tu calle'\n            inputValue={valueManualAddress}\n            onChange={mapAddressOnChangeSearch}\n            placeholder='Ingresa nombre de tu dirección'\n            setFocusedInput={setFocusedInput}\n          />\n          <Spacer.Horizontal size={18} />\n          <RenderInputField\n            clearIcon={onClickClearInputStreetNumber}\n            focusedInput={focusedInput}\n            inputRef={inputAdornmentStreetNumber}\n            inputTitle='Número de calle'\n            inputValue={valueAddressStreetNumber}\n            onChange={mapAddressStreetNumberOnChangeSearch}\n            placeholder='Ingresa número de tu dirección'\n            setFocusedInput={setFocusedInput}\n            type='number'\n          />\n\n          <Spacer.Horizontal size={18} />\n          <RenderInputField\n            clearIcon={onClickClearInputAddressRef}\n            focusedInput={focusedInput}\n            inputRef={inputAdornmentRefAddress}\n            inputTitle='Departamento/Casa/Piso (opcional)'\n            inputValue={valueAddressRef}\n            onChange={(e) => {\n              setApartment(e.target.value)\n              mapAddressRefOnChangeSearch(e)\n            }}\n            placeholder='Ingresa tu departamento/casa/piso'\n            setFocusedInput={setFocusedInput}\n          />\n        </Column>\n      </Column>\n      <Column\n        className={styles.containerShadow}\n        margin={isMobile ? '0 0 0 -20px' : '0'}\n        minWidth={isMobile ? '100vw' : '495px'}\n        padding='20px 20px 0px 20px'\n        position='relative'\n      >\n        <Column>\n          <Button\n            borderRadius={getGlobalStyle('--border-radius-xl')}\n            fontWeight={getGlobalStyle('--font-weight-semibold')}\n            label='Confirmar dirección'\n            onClick={onClickConfirmBtn}\n            size='large'\n            status={btnStatus()}\n            width='100%'\n          />\n          <Spacer.Horizontal size={12} />\n          <Button\n            borderRadius={getGlobalStyle('--border-radius-xl')}\n            fontWeight={getGlobalStyle('--font-weight-semibold')}\n            label='Cambiar a retiro en tienda'\n            onClick={changeDeliveryMethod}\n            size='large'\n            type='secondary'\n            width='100%'\n          />\n        </Column>\n      </Column>\n    </>\n  )\n}","import React, { Ref } from 'react'\nimport { Icon } from '../../../../../atoms'\nimport { InputAdornment } from '../../../../../molecules'\nimport { Row } from '../../../../../layout'\nimport { getGlobalStyle } from '../../../../../../helpers'\n\ninterface InputRenderProps {\n  focused: object;\n  inputRef: Ref<unknown>;\n  inputValue: string;\n  inputWarning: boolean\n  placeholder: string;\n  type: string;\n  clearInput: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  onChange: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  setFocused: (props?: object) => void;\n}\n\nexport const InputRender = ({\n  focused,\n  inputRef,\n  inputValue,\n  inputWarning,\n  placeholder,\n  type,\n  clearInput,\n  onChange,\n  setFocused\n}: InputRenderProps): React.ReactElement => {\n  const isStreetNumber = type === 'streetNumber'\n  const handleFocusInputs = (objectValTrue: string) => {\n    const newFocusedObject = {...focused}\n    Object.keys(newFocusedObject).forEach(key => {\n      if (key !== 'streetNumber') {\n        newFocusedObject[key] = key == objectValTrue\n      } else {\n        newFocusedObject[key] = inputWarning || key == objectValTrue\n      }\n    })\n    setFocused(newFocusedObject)\n  }\n\n  return (\n    <Row>\n      <InputAdornment\n        fontSize='base'\n        height='20px'\n        inputAdornmentEnd={\n          (inputValue || (isStreetNumber && inputWarning)) && (\n            <Icon\n              clickable='pointer'\n              color={(isStreetNumber && inputWarning) ? getGlobalStyle('--color-text-error') : getGlobalStyle('--color-neutral-gray-dark')}\n              customSize={focused[type] ? 12 : 20}\n              name={focused[type] ? 'Close' : 'Edit'}\n              onClick={focused[type] ? clearInput : undefined}\n            />\n          )\n        }\n        inputWidth='100%'\n        onChange={onChange}\n        onFocus={() => {return handleFocusInputs(type)}}\n        placeholder={placeholder}\n        placeholderFocus='placeholder'\n        ref={inputRef}\n        type={isStreetNumber && 'number'}\n        width='auto'\n      />\n    </Row>\n  )\n}","import React, {\n  useEffect,\n  useRef,\n  useState\n} from 'react'\nimport {\n  Text,\n  Divider,\n  Button\n} from '../../../../../atoms'\nimport {\n  Column,\n  Container,\n  Row,\n  Spacer,\n  Vertical\n} from '../../../../../layout'\nimport styles from '../../MapModal/index.module.css'\nimport { getGlobalStyle } from '../../../../../../helpers'\nimport { SLButtonStatus } from '../../../StoreLocator'\nimport { InputRender } from './InputRender'\n\ninterface MapModalProps {\n  buttonStatus: SLButtonStatus;\n  isMobile?: boolean;\n  selectedAddress: string;\n  streetNumberInput: boolean;\n  valueAddressComments: string;\n  valueAddressRef: string;\n  valueAddressStreetNumber: string;\n  buttonAddressMap: () => void;\n  mapAddressCommentsOnChangeSearch: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  mapAddressCommentsOnClearInput: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n  mapAddressRefOnChangeSearch: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  mapAddressRefOnClearInput: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n  mapAddressStreetNumberOnChangeSearch: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  mapAddressStreetNumberOnClearInput: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n}\n\ninterface FocusedProps {\n  streetNumber: boolean;\n  addressRef: boolean;\n  comments: boolean;\n}\n\nexport const MapModalContent = ({\n  buttonStatus,\n  isMobile,\n  selectedAddress,\n  streetNumberInput,\n  valueAddressComments,\n  valueAddressRef,\n  valueAddressStreetNumber,\n  buttonAddressMap,\n  mapAddressCommentsOnChangeSearch,\n  mapAddressCommentsOnClearInput,\n  mapAddressRefOnChangeSearch,\n  mapAddressRefOnClearInput,\n  mapAddressStreetNumberOnChangeSearch,\n  mapAddressStreetNumberOnClearInput\n}: MapModalProps): React.ReactElement => {\n  const inputAdornmentRefAddress = useRef<HTMLDivElement>(null)\n  const inputAdornmentRefComment = useRef<HTMLDivElement>(null)\n  const inputAdornmentRefStreetNumber = useRef<HTMLDivElement>(null)\n  const [inputWarning, setInputWarning] = useState(false)\n  const [focused, setFocused] = useState<FocusedProps>({\n    streetNumber: false,\n    addressRef: false,\n    comments: false\n  })\n  const inputRenderProps = {\n    focused,\n    inputWarning,\n    setFocused\n  }\n  const onClickClearInputAddressRef = (e?: React.ChangeEvent<HTMLInputElement>) => {\n    mapAddressRefOnClearInput(e, inputAdornmentRefAddress)\n  }\n  const onClickClearInputAddressComment = (e?: React.ChangeEvent<HTMLInputElement>) => {\n    mapAddressCommentsOnClearInput(e, inputAdornmentRefComment)\n  }\n  const onClickClearInputStreetNumber = (e?: React.ChangeEvent<HTMLInputElement>) => {\n    mapAddressStreetNumberOnClearInput(e, inputAdornmentRefStreetNumber)\n  }\n\n  const handleInputScroll = () => {\n    const activeElement = document?.activeElement as HTMLInputElement\n    if (activeElement) {\n      if (activeElement?.type === 'number') {\n        activeElement.blur()\n      }\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('wheel', handleInputScroll)\n    return () => {\n      window.removeEventListener('wheel', handleInputScroll)\n    }\n  }, [])\n\n  return (\n    <>\n      <Spacer.Horizontal size={8} />\n      <Column customHeight={isMobile ? null : '125px'} overflow='auto'>\n        <Container margin='10px 0px'>\n          <Row>\n            <Column customWidth='auto' justifyContent='center'>\n              <Row margin='0 0 10px 0'>\n                <Text fontSize='md' fontWeight='semibold'>\n                  Dirección\n                </Text>\n              </Row>\n              <Row justifyContent='between'>\n                <Text customClassName={styles.ellipsisText} fontSize='lg'>\n                  {selectedAddress}\n                </Text>\n                <Vertical size={8} />\n              </Row>\n            </Column>\n          </Row>\n        </Container>\n        <Container>\n          <Row>\n            <Column>\n              <Spacer.Horizontal size={12} />\n              {streetNumberInput &&\n                <Column>\n                  <Row>\n                    <Text fontSize='md' fontWeight='semibold'>\n                      Número de la calle\n                    </Text>\n                  </Row>\n                  <Spacer.Horizontal size={8} />\n                  <InputRender\n                    clearInput={(inputData) => {\n                      setInputWarning(true)\n                      return onClickClearInputStreetNumber(inputData)\n                    }}\n                    inputRef={inputAdornmentRefStreetNumber}\n                    inputValue={valueAddressStreetNumber}\n                    onChange={(inputData) => {\n                      setInputWarning(!inputData.target.value)\n                      return mapAddressStreetNumberOnChangeSearch(inputData)\n                    }}\n                    placeholder={'Ingresa el número de la calle'}\n                    type={'streetNumber'}\n                    {...inputRenderProps}\n                  />\n                  <Divider\n                    color={inputWarning ? getGlobalStyle('--color-text-error') : ''}\n                    thickness={1}\n                    verticalMargin={6}\n                  />\n                  {inputWarning ? (\n                    <>\n                      <Text color={'error'} fontSize='md'>\n                        Ingresa un número válido\n                      </Text>\n                      <Spacer.Horizontal size={4} />\n                    </>\n                  ) : (\n                    <Spacer.Horizontal size={18} />\n                  )}\n                </Column>\n              }\n              <Column>\n                <Row>\n                  <Text fontSize='md' fontWeight='semibold'>\n                    Departamento/Casa/Piso (opcional)\n                  </Text>\n                </Row>\n                <Spacer.Horizontal size={8} />\n                <InputRender\n                  clearInput={onClickClearInputAddressRef}\n                  inputRef={inputAdornmentRefAddress}\n                  inputValue={valueAddressRef}\n                  onChange={mapAddressRefOnChangeSearch}\n                  placeholder={'Ingresa el departamento / casa / piso'}\n                  type={'addressRef'}\n                  {...inputRenderProps}\n                />\n              </Column>\n              <Divider thickness={1} verticalMargin={6} />\n              <Spacer.Horizontal size={18} />\n              <Column>\n                <Row>\n                  <Text fontSize='md' fontWeight='semibold'>\n                    Instrucciones y comentarios (opcional)\n                  </Text>\n                </Row>\n                <Spacer.Horizontal size={8} />\n                <InputRender\n                  clearInput={onClickClearInputAddressComment}\n                  inputRef={inputAdornmentRefComment}\n                  inputValue={valueAddressComments}\n                  onChange={mapAddressCommentsOnChangeSearch}\n                  placeholder={'Ingresa alguna instrucciones y/o comentario'}\n                  type={'comments'}\n                  {...inputRenderProps}\n                />\n              </Column>\n              <Divider thickness={1} verticalMargin={6} />\n            </Column>\n          </Row>\n        </Container>\n      </Column>\n      <Spacer.Horizontal size={18} />\n      <Column\n        className={styles.containerShadow}\n        margin={isMobile ? '0 0 0 -20px' : '0'}\n        minWidth={isMobile ? '100vw' : '495px'}\n        padding='20px 20px 0px 20px'\n        position='relative'\n      >\n        <Button\n          borderRadius={getGlobalStyle('--border-radius-xl')}\n          fontWeight={getGlobalStyle('--font-weight-semibold')}\n          label='Guardar dirección'\n          onClick={buttonAddressMap}\n          size='large'\n          status={buttonStatus}\n          width='100%'\n        />\n      </Column>\n    </>\n  )\n}","import React from 'react'\nimport {\n  Divider,\n  Icon,\n  Title\n} from '../../../../../atoms'\nimport {\n  Column,\n  Container,\n  Row,\n  Spacer\n} from '../../../../../layout'\nimport { getGlobalStyle } from '../../../../../../helpers'\nimport { BigScreen, SmallScreen } from '../../../../../../helpers/mediaQueries'\n\ninterface MapModalProps {\n  title?: string;\n  back: () => void;\n}\n\nexport const ModalHeader = ({title = 'Información de la dirección', back}: MapModalProps): React.ReactElement => {\n\n  return (\n    <>\n      <BigScreen>\n        <>\n          <Container justifyContent='center'>\n            <Container margin='-3px 0px 0px 0px' maxWidth='30px'>\n              <Icon\n                clickable='pointer'\n                color={getGlobalStyle('--color-icons-black')}\n                customSize={30}\n                name='ArrowBack2'\n                onClick={back}\n                sizes='sm'\n              />\n            </Container>\n            <Container justifyContent='center'>\n              <Title\n                color={getGlobalStyle('--color-icons-black')}\n                customFontSize={getGlobalStyle('--font-size-2xl')}\n                fontWeight='semibold'\n                headingLevel='h5'\n                text={title}\n                textAlign='center'\n              />\n            </Container>\n          </Container>\n          <Spacer.Horizontal size={12} />\n          <Divider color={getGlobalStyle('--color-neutral-gray')} verticalMargin={0}/>\n          <Spacer.Horizontal size={18} />\n          <Spacer.Horizontal size={2} />\n        </>\n      </BigScreen>\n      <SmallScreen>\n        <Column>\n          <Row justifyContent='center'>\n            <Column\n              maxWidth='16px'\n              padding='0px 16px'\n              position='absolute'\n              top='31'\n              zIndex={getGlobalStyle('--z-index-5')}\n            >\n              <Icon\n                clickable='pointer'\n                color={getGlobalStyle('--color-icons-gray')}\n                customSize={16}\n                name='ArrowBackNavigate'\n                onClick={back}\n                sizes='sm'\n              />\n            </Column>\n            <Title\n              color={getGlobalStyle('--color-icons-black')}\n              customFontSize={getGlobalStyle('--font-size-xl')}\n              fontWeight='semibold'\n              headingLevel='h5'\n              text={title}\n              textAlign='center'\n            />\n          </Row>\n          <Spacer.Horizontal size={16} />\n        </Column>\n      </SmallScreen>\n    </>\n  )\n}","import { useEffect, useState } from 'react'\nimport { Text } from '../../../../atoms'\nimport { Modal } from '../../../../molecules'\nimport {\n  Row,\n  Column,\n  Spacer\n} from '../../../../layout'\nimport { BigScreen, SmallScreen } from '../../../../../helpers/mediaQueries'\nimport { MapModalContent } from '../MapModal/MapModalContent'\nimport { ErrorMapMessageProps } from '../../../StoreLocatorAlvi/ModalState/MapModal/helpers/ErrorMapMessageProps'\nimport { ManualAddressForm } from './ManualAddressForm'\nimport { ModalHeader } from './ModalHeader'\nimport { SLButtonStatus } from '../../StoreLocator'\n\nexport interface MapModalProps {\n  buttonStatus?: SLButtonStatus;\n  children?: React.ReactNode;\n  city?: string;\n  commune?: string;\n  comunaList?: string[];\n  errorAddress?: boolean;\n  errorAddressType?: string;\n  errorMapMessage?: string;\n  isOpen?: boolean;\n  regionList?: string[];\n  selectedAddress?: string;\n  selectedManualAddres?: boolean;\n  site?: 'unimarc' | 'alvi';\n  streetNumberInput?: boolean;\n  titleModal?: string;\n  valueAddressComments: string;\n  valueAddressRef?: string;\n  valueAddressStreetNumber?: string;\n  valueManualAddress?: string;\n  back?: () => void;\n  buttonAddressMap: () => void;\n  changeDeliveryMethod: () => void;\n  mapAddressCommentsOnChangeSearch: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  mapAddressCommentsOnClearInput: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n  mapAddressOnChangeSearch: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  mapAddressOnClearInput: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n  mapAddressRefOnChangeSearch: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  mapAddressRefOnClearInput: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n  mapAddressStreetNumberOnChangeSearch: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  mapAddressStreetNumberOnClearInput: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n  markingConfirmButton?: () => void;\n  onClick?: () => void;\n  regionSelector?: (e?: React.ChangeEvent<HTMLSelectElement>) => void;\n  validateAddress: (data: object) => Promise<{error: boolean}> | {error: boolean};\n}\n\nconst MapMakerText = () => {\n  return (\n    <Column alignItems='end' margin='8px 0 0 0'>\n      <Text color='gray' fontSize='md'>*Ajusta el marcador para ubicar la dirección.</Text>\n    </Column>\n  )\n}\n\nexport const MapModal = ({\n  buttonStatus,\n  children,\n  comunaList,\n  errorAddress,\n  errorAddressType,\n  errorMapMessage,\n  isOpen = true,\n  regionList,\n  selectedAddress,\n  selectedManualAddres = false,\n  streetNumberInput,\n  valueAddressComments,\n  valueAddressRef,\n  valueAddressStreetNumber,\n  valueManualAddress,\n  back,\n  changeDeliveryMethod,\n  buttonAddressMap,\n  mapAddressCommentsOnChangeSearch,\n  mapAddressCommentsOnClearInput,\n  mapAddressOnChangeSearch,\n  mapAddressOnClearInput,\n  mapAddressRefOnChangeSearch,\n  mapAddressRefOnClearInput,\n  mapAddressStreetNumberOnChangeSearch,\n  mapAddressStreetNumberOnClearInput,\n  markingConfirmButton,\n  onClick,\n  regionSelector,\n  validateAddress\n}: MapModalProps): React.ReactElement => {\n  const [step2ManualAddress, setStep2ManualAddress] = useState<boolean>(false)\n  const [screenHeight, setScreenHeight] = useState(`${(window.innerHeight * 0.94).toString()}px`)\n\n  useEffect(() => {\n    const resizeEvent = () => {\n      setScreenHeight(`${(window.innerHeight * 0.94).toString()}px`)\n    }\n    window.addEventListener('resize', resizeEvent)\n    return () => {\n      window.removeEventListener('resize', resizeEvent)\n    }\n  }, [window.innerHeight])\n\n  const MapModalPropsGlobalUnimarc = {\n    buttonStatus,\n    selectedAddress,\n    streetNumberInput,\n    valueAddressComments,\n    valueAddressRef,\n    valueAddressStreetNumber,\n    buttonAddressMap,\n    mapAddressCommentsOnChangeSearch,\n    mapAddressCommentsOnClearInput,\n    mapAddressRefOnChangeSearch,\n    mapAddressRefOnClearInput,\n    mapAddressStreetNumberOnChangeSearch,\n    mapAddressStreetNumberOnClearInput\n  }\n  const ManualAddressProps = {\n    buttonStatus,\n    comunaList,\n    regionList,\n    step2ManualAddress,\n    valueAddressComments,\n    valueAddressRef,\n    valueAddressStreetNumber,\n    valueManualAddress,\n    buttonAddressMap,\n    changeDeliveryMethod: () => {\n      back()\n      changeDeliveryMethod()\n    },\n    mapAddressCommentsOnChangeSearch,\n    mapAddressCommentsOnClearInput,\n    mapAddressOnChangeSearch,\n    mapAddressOnClearInput,\n    mapAddressRefOnChangeSearch,\n    mapAddressRefOnClearInput,\n    mapAddressStreetNumberOnChangeSearch,\n    mapAddressStreetNumberOnClearInput,\n    markingConfirmButton,\n    regionSelector,\n    setStep2ManualAddress,\n    validateAddress\n  }\n  const errorPropsMessageUnimarc = {\n    errorAddress,\n    errorAddressType,\n    errorMapMessage\n  }\n\n  return (\n    <>\n      <BigScreen>\n        <Modal\n          hiddenX\n          isOpen={isOpen}\n          maxHeight='550px'\n          maxWidth='495px'\n          minHeight='550px'\n          toggle={null}\n          toggleOutside={null}\n        >\n          <Spacer.Horizontal size={8} />\n          {selectedManualAddres ? (\n            <>\n              <ModalHeader back={back} title={step2ManualAddress ? 'Información de la dirección' : '¿Dónde quieres recibir tu compra?'}/>\n              {step2ManualAddress && (\n                <>\n                  <Column alignItems='center' customWidth='495px'>\n                    <Row minWidth='100%'>\n                      {children}\n                    </Row>\n                    <ErrorMapMessageProps {...errorPropsMessageUnimarc} top='330'/>\n                  </Column>\n                  <MapMakerText/>\n                </>\n              )}\n              <ManualAddressForm {...ManualAddressProps}/>\n            </>\n          ) : (\n            <>\n              <ModalHeader back={back}/>\n              <Column alignItems='center' customWidth='495px'>\n                <Row minWidth='100%'>\n                  {children}\n                </Row>\n                <ErrorMapMessageProps {...errorPropsMessageUnimarc} top='330'/>\n              </Column>\n              <MapMakerText/>\n              <MapModalContent {...MapModalPropsGlobalUnimarc} />\n            </>\n          )}\n        </Modal>\n      </BigScreen>\n\n      <SmallScreen>\n        <Modal\n          fullScreen\n          hiddenX\n          isOpen={isOpen}\n          marginFullScreen='1vh 0 0 0'\n          minHeightFullScreen={screenHeight}\n          toggle={onClick}\n          toggleOutside={onClick}\n        >\n          <Column customHeight={screenHeight}>\n            <ErrorMapMessageProps {...errorPropsMessageUnimarc}/>\n            <Spacer.Horizontal size={8} />\n            {selectedManualAddres ? (\n              <>\n                <ModalHeader back={back}/>\n                {step2ManualAddress && (\n                  <Column\n                    alignItems='center'\n                    customWidth='495px'\n                    justifyContent='center'\n                  >\n                    <Row minWidth='100vw'>\n                      {children}\n                    </Row>\n                  </Column>\n                )}\n                { step2ManualAddress && <MapMakerText/>}\n                <Spacer.Horizontal size={8} />\n                <ManualAddressForm {...ManualAddressProps} isMobile/>\n              </>\n            ) : (\n              <>\n                <ModalHeader back={back}/>\n                <Column\n                  alignItems='center'\n                  customWidth='495px'\n                  justifyContent='center'\n                >\n                  <Row minWidth='100vw'>\n                    {children}\n                  </Row>\n                  <ErrorMapMessageProps {...errorPropsMessageUnimarc}/>\n                </Column>\n                <MapMakerText/>\n                <Spacer.Horizontal size={16} />\n                <MapModalContent {...MapModalPropsGlobalUnimarc} isMobile/>\n              </>\n            )}\n          </Column>\n        </Modal>\n      </SmallScreen>\n    </>\n  )\n}","export * from './AddressModal'\nexport * from '../../FailModal'\nexport * from './MapModal'","import { useCallback } from 'react'\nimport { AddressModal, MapModal } from './ModalState'\nimport { FailModal } from '../FailModal'\nimport { TitleProps } from '../../atoms/Title/Title'\nimport { UserAddressListProps } from './ModalState/AddressModal/AddressModalContent'\nimport { Site } from '../../../shared/interfaces/Site'\nimport { ButtonStatus } from '../../atoms'\nimport { SimulationItem, SimulationModal } from '../SimulationModal/SimulationModal'\n\nexport interface AddressListProps {\n  activeMap: boolean;\n  city: string;\n  description: string;\n  failModal: boolean;\n  name: string;\n}\n\nexport type SLButtonStatus = 'initial' | 'loading' | 'disabled'\n\nexport interface StoreLocatorProps {\n  addressList?: AddressListProps[];\n  buttonStatus: SLButtonStatus;\n  children?: React.ReactNode;\n  city?: string;\n  commune?: string;\n  comunaList?: string[];\n  confirmAddressButtonStatus: ButtonStatus;\n  contentPosition?: TitleProps['textAlign'];\n  currentAddress?: UserAddressListProps;\n  directionModal: boolean;\n  errorAddress: boolean;\n  errorAddressType: string;\n  errorMapMessage: string;\n  failModal: boolean;\n  failModalButtonText: string;\n  failModalColorTitle: string;\n  failModalContent: string;\n  simulationItems?: SimulationItem[];\n  simulationUserAddress?: boolean;\n  failModalTitle: string;\n  manualAddress?: boolean;\n  mapModal: boolean;\n  placeholderSearch?: string;\n  regionList?: string[];\n  selectedAddress: string;\n  selectedManualAddres: boolean;\n  site?: Site;\n  streetNumberInput: boolean;\n  titleModal?: string;\n  titlePosition?: TitleProps['textAlign'];\n  userAddressList?: UserAddressListProps[];\n  valueAddressComments: string;\n  valueAddressRef: string;\n  valueAddressStreetNumber: string;\n  valueManualAddress?: string;\n  valueSearch: string;\n  addressOnChangeSearch: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  addressOnClearInput: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n  addressSelector: (data: object, index: number) => void;\n  buttonAddressMap: (withSimulation?: boolean) => void;\n  changeDeliveryMethod: () => void;\n  confirmUserAddress: (withSimulation?: boolean) => void;\n  deleteAddress: (data: object, index: number) => void;\n  errorModal: () => void;\n  failModalEvent: () => void;\n  handleKeepAddress?: () => void;\n  handleOnClick: () => void;\n  handleSelectManualAddress?: () => void;\n  mapAddressCommentsOnChangeSearch: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  mapAddressCommentsOnClearInput: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n  mapAddressOnChangeSearch: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  mapAddressOnClearInput: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n  mapAddressRefOnChangeSearch: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  mapAddressRefOnClearInput: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n  mapAddressStreetNumberOnChangeSearch: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  mapAddressStreetNumberOnClearInput: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n  mapBackModal: () => void;\n  mapCloseModal: () => void;\n  markingConfirmButton?: () => void;\n  regionSelector?: (e?: React.ChangeEvent<HTMLSelectElement>) => void;\n  validateAddress: (data: object) => Promise<{error: boolean}> | {error: boolean};\n}\n\nexport const StoreLocator = ({\n  addressList,\n  buttonStatus,\n  children,\n  comunaList,\n  confirmAddressButtonStatus,\n  contentPosition,\n  directionModal,\n  errorAddress,\n  errorAddressType,\n  errorMapMessage,\n  failModal,\n  failModalButtonText,\n  failModalColorTitle,\n  failModalContent,\n  simulationItems,\n  simulationUserAddress = false,\n  failModalTitle,\n  manualAddress,\n  mapModal,\n  regionList,\n  selectedAddress,\n  selectedManualAddres,\n  streetNumberInput,\n  titlePosition,\n  userAddressList,\n  valueAddressComments,\n  valueAddressRef,\n  valueAddressStreetNumber,\n  valueManualAddress,\n  valueSearch,\n  addressOnChangeSearch,\n  addressOnClearInput,\n  addressSelector,\n  buttonAddressMap,\n  changeDeliveryMethod,\n  confirmUserAddress,\n  deleteAddress,\n  errorModal,\n  failModalEvent,\n  handleKeepAddress,\n  handleOnClick,\n  handleSelectManualAddress,\n  mapAddressCommentsOnChangeSearch,\n  mapAddressCommentsOnClearInput,\n  mapAddressOnChangeSearch,\n  mapAddressOnClearInput,\n  mapAddressRefOnChangeSearch,\n  mapAddressRefOnClearInput,\n  mapAddressStreetNumberOnChangeSearch,\n  mapAddressStreetNumberOnClearInput,\n  mapBackModal,\n  mapCloseModal,\n  markingConfirmButton,\n  regionSelector,\n  validateAddress\n}: StoreLocatorProps): React.ReactElement => {\n  const simulationModalAction = useCallback(() => {\n    return simulationUserAddress ? confirmUserAddress(false) : buttonAddressMap(false)\n  }, [simulationUserAddress])\n\n  return (\n    <>\n      {\n        directionModal &&\n        <AddressModal\n          addressList={addressList}\n          addressOnChangeSearch={addressOnChangeSearch}\n          addressOnClearInput={addressOnClearInput}\n          addressSelector={addressSelector}\n          changeDeliveryMethod={changeDeliveryMethod}\n          confirmAddressButtonStatus={confirmAddressButtonStatus}\n          confirmUserAddress={confirmUserAddress}\n          deleteAddress={deleteAddress}\n          manualAddress={manualAddress}\n          onClick={handleOnClick}\n          onSelect={validateAddress}\n          onSelectManualAddress={handleSelectManualAddress}\n          userAddressList={userAddressList}\n          value={valueSearch}\n        />\n      }\n      {simulationItems?.length > 0 &&\n        <SimulationModal\n          action={simulationModalAction}\n          buttonStatus={buttonStatus}\n          handleKeepAddress={handleKeepAddress}\n          items={simulationItems}\n          labelPrimary='No, dejar la actual'\n          labelSecondary='Si, quiero cambiarla'\n        />\n      }\n      {\n        failModal &&\n        <FailModal\n          action={failModalEvent}\n          buttonText={failModalButtonText}\n          colorTitle={failModalColorTitle}\n          content={failModalContent}\n          contentPosition={contentPosition}\n          handleKeepAddress={handleKeepAddress}\n          labelSecondary='Mantener mi dirección'\n          onClick={errorModal}\n          title={failModalTitle}\n          titlePosition={titlePosition}\n        />\n      }\n      {\n        mapModal &&\n        <MapModal\n          back={mapBackModal}\n          buttonAddressMap={buttonAddressMap}\n          buttonStatus={buttonStatus}\n          changeDeliveryMethod={changeDeliveryMethod}\n          comunaList={comunaList}\n          errorAddress={errorAddress}\n          errorAddressType={errorAddressType}\n          errorMapMessage={errorMapMessage}\n          mapAddressCommentsOnChangeSearch={mapAddressCommentsOnChangeSearch}\n          mapAddressCommentsOnClearInput={mapAddressCommentsOnClearInput}\n          mapAddressOnChangeSearch={mapAddressOnChangeSearch}\n          mapAddressOnClearInput={mapAddressOnClearInput}\n          mapAddressRefOnChangeSearch={mapAddressRefOnChangeSearch}\n          mapAddressRefOnClearInput={mapAddressRefOnClearInput}\n          mapAddressStreetNumberOnChangeSearch={mapAddressStreetNumberOnChangeSearch}\n          mapAddressStreetNumberOnClearInput={mapAddressStreetNumberOnClearInput}\n          markingConfirmButton={markingConfirmButton}\n          onClick={mapCloseModal}\n          regionList={regionList}\n          regionSelector={regionSelector}\n          selectedAddress={selectedAddress}\n          selectedManualAddres={selectedManualAddres}\n          streetNumberInput={streetNumberInput}\n          validateAddress={validateAddress}\n          valueAddressComments={valueAddressComments}\n          valueAddressRef={valueAddressRef}\n          valueAddressStreetNumber={valueAddressStreetNumber}\n          valueManualAddress={valueManualAddress}\n        >\n          {children}\n        </MapModal>\n      }\n    </>\n  )\n}","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".OIOmqHZUJWdiHftEQyj2 {\\n  color: var(--color-neutral-black);\\n  cursor: pointer;\\n  padding-left: 5px;\\n  text-decoration: underline;\\n}\\n\\n.VZTcUD93Lo4IL0F6KpqJ {\\n  box-shadow: 0px -2px 2px 0px rgba(198, 198, 198, 0.3);\\n}\\n\\n@media only screen and (min-width: 768px) and (max-width: 820px) {\\n  .VZTcUD93Lo4IL0F6KpqJ {\\n    bottom: -1.5vh;\\n  }\\n}\\n\\n@media only screen and (min-width: 821px) and (max-width: 1024px) {\\n  .VZTcUD93Lo4IL0F6KpqJ {\\n    bottom: -2.5vh;\\n  }\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./stories/organisms/StoreLocator/ModalState/AddressModal/index.module.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,iCAAiC;EACjC,eAAe;EACf,iBAAiB;EACjB,0BAA0B;AAC5B;;AAEA;EACE,qDAAqD;AACvD;;AAEA;EACE;IACE,cAAc;EAChB;AACF;;AAEA;EACE;IACE,cAAc;EAChB;AACF\",\"sourcesContent\":[\".underlineText {\\n  color: var(--color-neutral-black);\\n  cursor: pointer;\\n  padding-left: 5px;\\n  text-decoration: underline;\\n}\\n\\n.spacerShadow {\\n  box-shadow: 0px -2px 2px 0px rgba(198, 198, 198, 0.3);\\n}\\n\\n@media only screen and (min-width: 768px) and (max-width: 820px) {\\n  .spacerShadow {\\n    bottom: -1.5vh;\\n  }\\n}\\n\\n@media only screen and (min-width: 821px) and (max-width: 1024px) {\\n  .spacerShadow {\\n    bottom: -2.5vh;\\n  }\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"underlineText\": \"OIOmqHZUJWdiHftEQyj2\",\n\t\"spacerShadow\": \"VZTcUD93Lo4IL0F6KpqJ\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".JWQ9ESLvbR34PHwB90k2 {\\n  position: absolute;\\n}\\n\\n.c7ggrtq5R8ex7naqvcrR {\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  width: 100%;\\n}\\n\\n.uNJ7VTiQYBcQ_QwKWoDl {\\n  border-bottom: 1px solid var(--color-neutral-gray);\\n  width: 100%;\\n}\\n\\n.nJerQDS1m4CL_wWpF8nK {\\n  border: 1px solid var(--color-text-info-light);\\n  border-radius: var(--border-radius-xl);\\n  margin-bottom: -50px;\\n  top: -50px;\\n}\\n\\n.nJerQDS1m4CL_wWpF8nK p {\\n  color: var(--color-text-info-light);\\n}\\n\\n.H6O_g_Az8bPSFvk6ML5M {\\n  box-shadow: 0px -2px 2px 0px rgba(198, 198, 198, 0.3);\\n}\\n\\n@media only screen and (min-width: 768px) and (max-width: 820px) {\\n  .H6O_g_Az8bPSFvk6ML5M {\\n    bottom: -1.5vh;\\n  }\\n}\\n\\n@media only screen and (min-width: 821px) and (max-width: 1024px) {\\n  .H6O_g_Az8bPSFvk6ML5M {\\n    bottom: -2.5vh;\\n  }\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./stories/organisms/StoreLocator/ModalState/MapModal/index.module.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,gBAAgB;EAChB,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,kDAAkD;EAClD,WAAW;AACb;;AAEA;EACE,8CAA8C;EAC9C,sCAAsC;EACtC,oBAAoB;EACpB,UAAU;AACZ;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,qDAAqD;AACvD;;AAEA;EACE;IACE,cAAc;EAChB;AACF;;AAEA;EACE;IACE,cAAc;EAChB;AACF\",\"sourcesContent\":[\".message--image-center {\\n  position: absolute;\\n}\\n\\n.ellipsisText {\\n  display: inline-block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  width: 100%;\\n}\\n\\n.formContainer {\\n  border-bottom: 1px solid var(--color-neutral-gray);\\n  width: 100%;\\n}\\n\\n.mapTooltip {\\n  border: 1px solid var(--color-text-info-light);\\n  border-radius: var(--border-radius-xl);\\n  margin-bottom: -50px;\\n  top: -50px;\\n}\\n\\n.mapTooltip p {\\n  color: var(--color-text-info-light);\\n}\\n\\n.containerShadow {\\n  box-shadow: 0px -2px 2px 0px rgba(198, 198, 198, 0.3);\\n}\\n\\n@media only screen and (min-width: 768px) and (max-width: 820px) {\\n  .containerShadow {\\n    bottom: -1.5vh;\\n  }\\n}\\n\\n@media only screen and (min-width: 821px) and (max-width: 1024px) {\\n  .containerShadow {\\n    bottom: -2.5vh;\\n  }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"message--image-center\": \"JWQ9ESLvbR34PHwB90k2\",\n\t\"ellipsisText\": \"c7ggrtq5R8ex7naqvcrR\",\n\t\"formContainer\": \"uNJ7VTiQYBcQ_QwKWoDl\",\n\t\"mapTooltip\": \"nJerQDS1m4CL_wWpF8nK\",\n\t\"containerShadow\": \"H6O_g_Az8bPSFvk6ML5M\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./index.module.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n  var p;\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      continue;\n    }\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      continue;\n    }\n    if (!a[p]) {\n      return false;\n    }\n  }\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./index.module.css\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./index.module.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./index.module.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n  var p;\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      continue;\n    }\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      continue;\n    }\n    if (!a[p]) {\n      return false;\n    }\n  }\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./index.module.css\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./index.module.css\";\n       export default content && content.locals ? content.locals : undefined;\n"],"names":[],"sourceRoot":""}