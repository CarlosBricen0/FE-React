{"version":3,"file":"atoms-Draggable-Draggable-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AAvGA","sources":["webpack://components/./stories/atoms/Draggable/Draggable.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react'\n\nexport interface DraggableProps {\n  children: React.ReactNode;\n  moveX?: boolean;\n  moveY?: boolean;\n  maxY?: number;\n  maxX?: number;\n  minY?: number;\n  minX?: number;\n}\n\nexport const Draggable = ({ \n  children,\n  moveY = false,\n  moveX = false,\n  minX,\n  minY,\n  maxX,\n  maxY\n}: DraggableProps): React.ReactElement => {\n  const elemRef = useRef(null)\n  const dragProps = useRef<{\n    dragStartLeft: number;\n    dragStartTop: number;\n    dragStartX: number;\n    dragStartY: number;\n  }>()\n\n  useEffect(() => {\n    if (elemRef.current) {\n      elemRef.current.style.left = `${minX | 0}px`\n      elemRef.current.style.top = `${minY | 0}px`\n    }\n  }, [minX, minY])\n\n  useEffect(() => {\n    return () => {\n      window.removeEventListener('mousemove', startDragging, false)\n      window.removeEventListener('mouseup', stopDragging, false)\n    }\n  }, [])\n\n  const initialiseDrag = event => {\n    const { target, clientX, clientY } = event\n    const { offsetTop, offsetLeft } = target\n    const { left, top } = elemRef.current.getBoundingClientRect()\n\n    dragProps.current = {\n      dragStartLeft: left - offsetLeft,\n      dragStartTop: top - offsetTop,\n      dragStartX: clientX,\n      dragStartY: clientY\n    }\n\n    window.addEventListener('mousemove', startDragging, false)\n    window.addEventListener('mouseup', stopDragging, false)\n  }\n\n  const stopDragging = () => {\n    window.removeEventListener('mousemove', startDragging, false)\n    window.removeEventListener('mouseup', stopDragging, false)\n  }\n\n  const handleChange = ({ touches }) => {\n    const { clientX, clientY } = touches[0]\n\n    handleValidation({ valueX: clientX, valueY: clientY })\n  }\n\n  const startDragging = ({ clientX, clientY }) => {\n    const valueX = dragProps.current.dragStartLeft + clientX - dragProps.current.dragStartX\n    const valueY = dragProps.current.dragStartTop + clientY - dragProps.current.dragStartY\n\n    handleValidation({ valueX, valueY })\n  }\n\n  const handleValidation = ({ valueX, valueY }) => {\n\n    if (moveX) {\n      if (maxX && maxX > valueX) {\n        valueX = maxX\n      } else if (minX && minX < valueX) {\n        valueX = minX\n      }\n\n      elemRef.current.style.left = `${valueX}px`\n    }\n\n    if (moveY) {\n      if (maxY && maxY > valueY) {\n        valueY = maxY\n      } else if (minY && minY < valueY) {\n        valueY = minY\n      }\n\n      elemRef.current.style.top = `${valueY}px`\n    }\n  }\n\n  return (\n    <div\n      onMouseDown={initialiseDrag}\n      onTouchMove={handleChange}\n      ref={elemRef}\n      style={{\n        width: '100%',\n        position: 'fixed',\n        touchAction: 'none'\n      }}\n    >\n      {children}\n    </div >\n  )\n\n}"],"names":[],"sourceRoot":""}