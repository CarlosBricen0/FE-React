{"version":3,"file":"stories_organisms_Header_MyProfile_MyProfileContent_index_tsx-stories_organisms_Header_StoreL-a1d760.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAIA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AAAA;AAEA;AAEA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AApCA;;;;;;;;;;;;;;;;;AChBA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAGA;AA1CA;;;;;;;;;;;;;;;;;;;ACTA;AAKA;AAKA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;AChGA;AAMA;AAMA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AAAA;AAGA;AAAA;AAKA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAIA;AACA;AACA;AAAA;AAGA;AAIA;AACA;AACA;AAAA;AAGA;AAGA;AACA;AACA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAKA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;AC9OA;AAKA;AAKA;AAMA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAKA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;ACrUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://components/./stories/organisms/BanefitsAlvi/ShabitInline/index.tsx","webpack://components/./stories/organisms/BanefitsAlvi/helpers/index.ts","webpack://components/./stories/organisms/Header/MyProfile/MyProfileContent/ModalMyProfileLoguot/index.tsx","webpack://components/./stories/organisms/Header/MyProfile/MyProfileContent/MyProfileItem/index.tsx","webpack://components/./stories/organisms/Header/MyProfile/MyProfileContent/index.tsx","webpack://components/./stories/organisms/Header/StoreLocatorHeader/index.tsx","webpack://components/./stories/organisms/Header/StoreLocatorHeader/StoreLocatorHeader.module.css","webpack://components/./stories/organisms/Header/StoreLocatorHeader/StoreLocatorHeader.module.css?fca0"],"sourcesContent":["import React from 'react'\nimport { Icon, Text } from '../../../atoms'\nimport { Row, Spacer } from '../../../layout'\nimport { ShabitName } from '../BenefitsAlvi'\nimport {\n  getShabitColorByName,\n  shabitTitleByShabitNameMap,\n  starsCountByShabitNameMap\n} from '../helpers'\n\nexport interface ShabitInlineProps {\n  name: ShabitName\n  title?: string\n  onClick?: () => void\n}\n\nexport const ShabitInline = ({\n  name,\n  title,\n  onClick\n} : ShabitInlineProps) : React.ReactElement<ShabitInlineProps> => {\n  const shabitTitle = title || shabitTitleByShabitNameMap[name]\n  const starsCount = starsCountByShabitNameMap[name]\n  const color = getShabitColorByName(name)\n\n  return (\n    <Row\n      alignItems='center'\n      clickable='pointer'\n      onClick={onClick}\n      width='fit-content'\n    >\n      {[...Array(starsCount)].map((index) => {return (\n        <Icon \n          clickable='pointer'\n          color={color}\n          key={`${index}`}\n          name='Star'\n        />\n      )})}\n\n      <Spacer.Vertical size={8} />\n\n      <Text \n        clickable='pointer'\n        customColor={color}\n        underline='always'\n      >\n        Socio {shabitTitle}\n      </Text>\n    </Row>\n  )\n}","import { getGlobalStyle } from '../../../../helpers'\nimport { ShabitName } from '../BenefitsAlvi'\n\nexport const starsCountByShabitNameMap : Record<ShabitName, number> = {\n  bronze: 1,\n  silver: 2,\n  gold: 3,\n  vip: 4\n}\n\nexport const shabitTitleByShabitNameMap : Record<ShabitName, string> = {\n  'bronze': 'bronce',\n  'silver': 'plata',\n  'gold': 'oro',\n  'vip': 'vip'\n}\n\nexport const getShabitColorByName = (name: ShabitName) : string => {\n  return getGlobalStyle(`--color-alvi-shabits-${name}-solid`)\n}","import { Column, Spacer } from '../../../../../layout'\nimport { Modal } from '../../../../../molecules/Modal/Modal'\nimport { Button, Text } from '../../../../../atoms'\nimport { Site } from '../../../../../../shared/interfaces/Site'\n\nexport interface ModalMyProfileLogoutProps {\n  site?: Site;\n  onClickCloseLogoutMobile?: () => void;\n  onClickLogout?: () => void;\n}\n\nexport const ModalMyProfileLogout = ({\n  site = 'unimarc',\n  onClickCloseLogoutMobile,\n  onClickLogout\n}: ModalMyProfileLogoutProps): React.ReactElement<ModalMyProfileLogoutProps> => {\n  return (\n    <Modal\n      customIcon= 'ErrorIcon'\n      errorModal={true}\n      iconSize= {60}\n      isOpen={true}\n      maxHeight='245px'\n      maxWidth='315px'\n      site={site}\n      toggle={onClickCloseLogoutMobile}\n      toggleOutside={onClickCloseLogoutMobile}\n    >\n      <Column alignItems='center'>\n        <Spacer.Horizontal size={24} />\n        <Text\n          color='black'\n          fontSize='lg'\n          fontWeight='semibold'\n        >\n          Cerrar sesión\n        </Text>\n        <Spacer.Horizontal size={16} />\n        <Text color='black' fontSize='md'>\n          ¿Estás seguro que quieres cerrar tu sesión? Recuerda que cuando quieras podrás iniciarla con tu RUT y contraseña.\n        </Text>\n        <Spacer.Horizontal size={24} />\n        <Button\n          borderRadius='24px'\n          label='Aceptar'\n          onClick={onClickLogout}\n          site={site}\n          width='100%'\n        />\n        <Spacer.Horizontal size={4} />\n      </Column>\n    </Modal>\n  )\n}","import { ReactNode } from 'react'\nimport { Icons } from '../../../../../../assets/SvgComponents/SvgIcons'\nimport {\n  BigScreen,\n  getGlobalStyle,\n  SmallScreen\n} from '../../../../../../helpers'\nimport {\n  Color,\n  Icon,\n  Text\n} from '../../../../../atoms'\nimport { Row, Spacer } from '../../../../../layout'\n\nexport interface MyProfileItemProps {\n  children: ReactNode;\n  icon: keyof (typeof Icons);\n  iconColor?: string;\n  textColor?: Color;\n  onClick?: () => void;\n}\n\nexport const MyProfileItem = ({\n  children,\n  icon,\n  iconColor = getGlobalStyle('--color-icons-black'),\n  textColor = 'black',\n  onClick\n}: MyProfileItemProps) => {\n  return (\n    <>\n      <BigScreen>\n        <Row\n          alignItems='center'\n          clickable='pointer'\n          onClick={onClick}\n          padding='4px 12px'\n        >\n          <Icon\n            clickable='pointer'\n            color={iconColor}\n            customSize={20}\n            name={icon}\n          />\n\n          <Spacer.Vertical size={12} />\n\n          <Text\n            clickable='pointer'\n            color={textColor}\n            fontSize='md'\n            underline='hover'\n          >\n            {children}\n          </Text>\n        </Row>\n      </BigScreen>\n\n      <SmallScreen>\n        <Row\n          alignItems='center'\n          clickable='pointer'\n          justifyContent='between'\n          onClick={onClick}\n        >\n          <Row alignItems='center'>\n            <Icon\n              clickable='pointer'\n              color={iconColor}\n              name={icon}\n              sizes='sm'\n            />\n\n            <Spacer.Vertical size={12} />\n\n            <Text\n              clickable='pointer'\n              color={textColor}\n              fontSize='md'\n              underline='hover'\n            >\n              {children}\n            </Text>\n          </Row>\n\n          <Icon\n            clickable='pointer'\n            color={getGlobalStyle('--color-icons-gray')}\n            name='ArrowRightNavigate'\n            sizes='xs'\n          />\n        </Row>\n      </SmallScreen>\n    </>\n\n  )\n}","import {\n  BigScreen,\n  getGlobalStyle,\n  SmallScreen\n} from '../../../../../helpers'\nimport { Site } from '../../../../../shared/interfaces/Site'\nimport {\n  Divider,\n  Icon,\n  Picture,\n  Text\n} from '../../../../atoms'\nimport {\n  Column,\n  Container,\n  Row,\n  Spacer\n} from '../../../../layout'\nimport { ShabitInline } from '../../../BanefitsAlvi/ShabitInline'\nimport { getShabitColorByName } from '../../../BanefitsAlvi/helpers'\nimport { ModalMyProfileLogout } from './ModalMyProfileLoguot'\nimport { MyProfileItem } from './MyProfileItem'\n\nexport interface MyProfileContentProps {\n  customBannerUrl?: string;\n  isVisibleModalLogout?: boolean;\n  isVisibleMyProfile?: boolean;\n  padding?: string;\n  site?: Site;\n  userFirstName?: string;\n  userShabitName?: string;\n  onClickCloseLogoutMobile?: () => void;\n  onClickCloseMyProfile?: () => void;\n  onClickGoToMyCards?: () => void;\n  onClickGoToMyCoupons?: () => void;\n  onClickGoToMyLists?: () => void;\n  onClickGoToMyOrders?: () => void;\n  onClickLogout?: () => void;\n  onClickLogoutMobile?: () => void;\n  onClickBanner?: () => void;\n}\n\nexport const MyProfileContent = ({\n  customBannerUrl,\n  isVisibleModalLogout,\n  isVisibleMyProfile,\n  padding = '0px',\n  site,\n  userFirstName,\n  userShabitName,\n  onClickCloseLogoutMobile,\n  onClickCloseMyProfile,\n  onClickGoToMyCards,\n  onClickGoToMyCoupons,\n  onClickGoToMyLists,\n  onClickGoToMyOrders,\n  onClickLogout,\n  onClickLogoutMobile,\n  onClickBanner\n}: MyProfileContentProps) => {\n  const siteUrl = site === 'unimarc' ? 'unimarc' : 'alviclpoc'\n  return (\n    <>\n      <BigScreen>\n        <Row\n          alignItems='center'\n          backgroundColor='white'\n          borderRadius={getGlobalStyle('--border-radius-md')}\n          justifyContent='center'\n          minWidth='465px'\n          padding={padding}\n        >\n          <Column alignItems='center'>\n            {/* banner - my profile */}\n            <Picture\n              anchor\n              borderRadius='8px'\n              height='100%'\n              onClick={onClickBanner}\n              src={customBannerUrl ?? `https://${siteUrl}.vtexassets.com/arquivos/bannersesion.jpg`}\n              url='#'\n              width='250px'\n            />\n          </Column>\n          <Spacer.Vertical size={32} />\n          <Column justifyContent='start' minHeight='230px'>\n            <MyProfileItem\n              icon='BagTick'\n              iconColor={getGlobalStyle('--color-icons-gray')}\n              onClick={onClickGoToMyOrders}\n            >\n              Mis compras\n            </MyProfileItem>\n            {/* my cards */}\n            {\n              site === 'unimarc' &&\n              <>\n                <Column width='106%'>\n                  <MyProfileItem\n                    icon='Card'\n                    iconColor={getGlobalStyle('--color-icons-gray')}\n                    onClick={onClickGoToMyCards}\n                  >\n                    Mis medios de pago\n                  </MyProfileItem>\n                </Column>\n                <MyProfileItem\n                  icon='MyLists'\n                  iconColor={getGlobalStyle('--color-icons-gray')}\n                  onClick={onClickGoToMyLists}\n                >\n                  Mis listas\n                </MyProfileItem>\n              </>\n            }\n            {/* my lists */}\n            <MyProfileItem\n              icon='Coupon2'\n              iconColor={getGlobalStyle('--color-icons-gray')}\n              onClick={onClickGoToMyCoupons}\n            >\n              Mis cupones\n            </MyProfileItem>\n            <Divider verticalMargin={8} />\n            <MyProfileItem\n              icon='Logout2'\n              iconColor={getGlobalStyle('--color-icons-gray')}\n              onClick={onClickLogout}\n              textColor='neutral-dark'\n            >\n              Cerrar sesión\n            </MyProfileItem>\n          </Column>\n        </Row>\n      </BigScreen>\n      <SmallScreen>\n        <>\n          {isVisibleMyProfile &&\n            <Container position='fixed' zIndex='2'>\n              <Column\n                backgroundColor='white'\n                customHeight='100vh'\n                padding='20px'\n                position='fixed'\n              >\n                <Spacer.Horizontal size={16} />\n                <Row alignItems='center' justifyContent='between'>\n                  <Text color='black' fontSize='lg'>Mi cuenta</Text>\n                  <Icon\n                    clickable='pointer'\n                    color={getGlobalStyle('--color-icons-black')}\n                    customSize={17}\n                    name='Close'\n                    onClick={onClickCloseMyProfile}\n                  />\n                </Row>\n                <Spacer.Horizontal size={16} />\n                {site === 'alvi' &&\n                  <Row>\n                    <Column>\n                      <Text customColor={getGlobalStyle('--color-neutral-gray-dark')}>\n                        Hola\n                      </Text>\n                      <Text fontSize='2xl'fontWeight='bold'>\n                        {userFirstName}\n                      </Text>\n                      <Spacer.Horizontal size={4} />\n                      <ShabitInline\n                        name={userShabitName}\n                        onClick={onClickBanner}\n                      />\n                    </Column>\n                    <Column width='fit-content'>\n                      <Icon\n                        color={getShabitColorByName(userShabitName)}\n                        name='UserCircle2'\n                        sizes='2xl'\n                      />\n                    </Column>\n                  </Row>\n                }\n                <Spacer.Horizontal size={32} />\n                <MyProfileItem\n                  icon='BagTick'\n                  iconColor={getGlobalStyle('--color-icons-gray')}\n                  onClick={onClickGoToMyOrders}\n                >\n                  Mis compras\n                </MyProfileItem>\n                <Divider/>\n                {/* my cards */}\n                <MyProfileItem\n                  icon='Card'\n                  iconColor={getGlobalStyle('--color-icons-gray')}\n                  onClick={onClickGoToMyCards}\n                >\n                  Mis medios de pago\n                </MyProfileItem>\n                <Divider/>\n                {/* my lists */}\n                <MyProfileItem\n                  icon='MyLists'\n                  iconColor={getGlobalStyle('--color-icons-gray')}\n                  onClick={onClickGoToMyLists}\n                >\n                  Mis listas\n                </MyProfileItem>\n                <Divider/>\n                <MyProfileItem\n                  icon='Coupon2'\n                  iconColor={getGlobalStyle('--color-icons-gray')}\n                  onClick={onClickGoToMyCoupons}\n                >\n                  Mis cupones\n                </MyProfileItem>\n                <Divider/>\n                <MyProfileItem\n                  icon='Logout2'\n                  iconColor={getGlobalStyle('--color-icons-gray')}\n                  onClick={onClickLogoutMobile}\n                  textColor='neutral-dark'\n                >\n                  Cerrar sesión\n                </MyProfileItem>\n                <Divider/>\n              </Column>\n            </Container>\n          }\n          {isVisibleModalLogout &&\n            <ModalMyProfileLogout\n              onClickCloseLogoutMobile={onClickCloseLogoutMobile}\n              onClickLogout={onClickLogout}\n              site={site}\n            />\n          }\n        </>\n      </SmallScreen>\n    </>\n  )\n}","import { Icons } from '../../../../assets/SvgComponents/SvgIcons'\nimport {\n  BigScreen,\n  getGlobalStyle,\n  SmallScreen\n} from '../../../../helpers'\nimport {\n  Color,\n  Icon,\n  Text\n} from '../../../atoms'\nimport {\n  Column,\n  Container,\n  Row,\n  Spacer\n} from '../../../layout'\nimport styles from './StoreLocatorHeader.module.css'\n\nexport interface StoreLocatorHeaderProps {\n  addressSelected?: string;\n  iconStoreLocator?: keyof (typeof Icons);\n  isLoggedIn?: boolean;\n  isMobile?: boolean;\n  isPickup?: boolean;\n  loggedOutText?: string;\n  site?: 'unimarc' | 'alvi';\n  smallScreenSLVisible?: boolean;\n  timeTable?: string;\n  size?: 'md' | 'lg';\n  onClickStoreLocator: () => void;\n}\n\nexport const StoreLocatorHeader = ({\n  addressSelected = '',\n  iconStoreLocator = 'Location',\n  isLoggedIn,\n  isMobile,\n  isPickup,\n  loggedOutText = 'Selecciona tu dirección',\n  site = 'unimarc',\n  smallScreenSLVisible = true,\n  timeTable = '',\n  size = 'md',\n  onClickStoreLocator\n}: StoreLocatorHeaderProps) => {\n  const siteUnimarc = site === 'unimarc'\n  const customSize = siteUnimarc ? 26 : 24\n  const customSizeDropdownIcon = siteUnimarc ? 10 : 11\n  const fontSize = size === 'lg' ? 'sm' : 'md'\n\n  const setColor = (): Color => {\n    if (size === 'lg') return 'black'\n    return 'white'\n  }\n\n  const setTruncate = () => {\n    if (size === 'lg') return 100\n    return 20\n  }\n\n  const setHeight = () => {\n    if (size === 'lg') return '46px'\n    return isLoggedIn ? '43px' : '29px'\n  }\n\n  const setFontWeight = () => {\n    if (size === 'lg') return 'semibold'\n    return 'regular'\n  }\n\n  const textColor = isMobile ? 'black' : setColor()\n  const truncate = isMobile ? 30 : setTruncate()\n\n  return (\n    <>\n      <BigScreen>\n        <Container customWidth='max-content' minWidth='243px'>\n          <Row\n            alignItems='center'\n            clickable='pointer'\n            customHeight={size === 'lg' ? '46px' : ''}\n          >\n            {isLoggedIn &&\n              <Row onClick={onClickStoreLocator}>\n                <Column customWidth='max-content'>\n                  <Icon\n                    clickable='pointer'\n                    color={setColor()}\n                    customSize={22}\n                    name={iconStoreLocator}\n                    site={site}\n                  />\n                </Column>\n                <Spacer.Vertical size={4} />\n                <Column>\n                  <Row alignItems='center' clickable='pointer'>\n                    <Column customWidth='max-content'>\n                      {size === 'lg' ? (\n                        <Text\n                          clickable='pointer'\n                          color='black'\n                          fontSize='md'\n                          underline='hover'\n                        >\n                          {isPickup ? 'Retiro en tienda' : 'Despacho a domicilio'}\n                        </Text>\n                      ):(\n                        <Text\n                          clickable='pointer'\n                          color={textColor}\n                          fontSize={fontSize}\n                          fontWeight='semibold'\n                          truncate={truncate}\n                          underline='hover'\n                        >\n                          {addressSelected}\n                        </Text>\n                      )}\n                    </Column>\n                    <Spacer.Vertical size={4} />\n                    <Column customWidth='max-content'>\n                      <Icon\n                        clickable='pointer'\n                        color={setColor()}\n                        customSize={customSizeDropdownIcon}\n                        name='DropDownClose'\n                      />\n                    </Column>\n                  </Row>\n                  <Row>\n                    {size === 'lg' &&\n                      <>\n                        <Text\n                          clickable='pointer'\n                          color={textColor}\n                          fontSize={fontSize}\n                          fontWeight='semibold'\n                          truncate={truncate}\n                          underline='hover'\n                        >\n                          {addressSelected}\n                        </Text>\n                        <Spacer.Vertical size={4} /> - <Spacer.Vertical size={4} />\n                        <Text\n                          clickable='pointer'\n                          color={textColor}\n                          fontSize='sm'\n                        >\n                          {timeTable}\n                        </Text>\n                      </>\n                    }\n                    {(size === 'md' && timeTable) &&\n                      <Text\n                        clickable='pointer'\n                        color={textColor}\n                        fontSize='sm'\n                      >\n                        {timeTable}\n                      </Text>\n                    }\n                  </Row>\n                </Column>\n              </Row>\n            }\n            {!isLoggedIn &&\n              <Row\n                alignItems='center'\n                clickable='pointer'\n                onClick={onClickStoreLocator}\n              >\n                <Column customWidth='max-content'>\n                  <Icon\n                    clickable='pointer'\n                    color={setColor()}\n                    customSize={customSize}\n                    name={iconStoreLocator}\n                    site={site}\n                  />\n                </Column>\n                <Spacer.Vertical size={8} />\n                <Column customWidth='max-content'>\n                  <Text\n                    clickable='pointer'\n                    color={setColor()}\n                    customClassName={styles['text-hover']}\n                    fontSize='md'\n                    fontWeight={setFontWeight()}\n                  >\n                    {loggedOutText}\n                  </Text>\n                </Column>\n                <Spacer.Vertical size={8} />\n                <Column customWidth='max-content'>\n                  <Icon\n                    clickable='pointer'\n                    color={setColor()}\n                    customSize={customSizeDropdownIcon}\n                    name='DropDownClose'\n                  />\n                </Column>\n              </Row>\n            }\n          </Row>\n        </Container>\n      </BigScreen>\n      {smallScreenSLVisible &&\n        <SmallScreen>\n          <Container>\n            <Row\n              alignItems='center'\n              backgroundColor={getGlobalStyle('--color-neutral-gray-white')}\n              boxShadow={getGlobalStyle('--box-shadow-2xs')}\n              customClassName={siteUnimarc ? '' : `${styles.wrapperRow}`}\n              customHeight={setHeight()}\n              padding='4px 18px'\n              position='sticky'\n              zIndex='1'\n            >\n              {isLoggedIn &&\n                <Row onClick={onClickStoreLocator} >\n                  <Column customWidth='max-content'>\n                    <Spacer.Horizontal size={1} />\n                    <Icon\n                      clickable='pointer'\n                      color={getGlobalStyle('--color-base-black')}\n                      customSize={16}\n                      name={iconStoreLocator}\n                      site={site}\n                    />\n                  </Column>\n                  <Spacer.Vertical size={2} />\n                  <Column>\n                    <Row\n                      alignItems='center'\n                      clickable='pointer'\n                      justifyContent='between'\n                    >\n                      <Column customWidth='max-content'>\n                        <Text\n                          clickable='pointer'\n                          color={textColor}\n                          fontSize={fontSize}\n                          fontWeight='semibold'\n                          truncate={truncate}\n                          underline='hover'\n                        >\n                          {addressSelected}\n                        </Text>\n                      </Column>\n                      <Spacer.Vertical size={4} />\n                    </Row>\n                    <Row>\n                      {timeTable &&\n                        <Text\n                          clickable='pointer'\n                          color={textColor}\n                          fontSize='sm'\n                        >\n                          {timeTable}\n                        </Text>\n                      }\n                    </Row>\n                  </Column>\n                  <Column\n                    customWidth='max-content'\n                    justifyContent='center'\n                    minHeight='34px'\n                  >\n                    <Icon\n                      clickable='pointer'\n                      color={getGlobalStyle('--color-text-gray-light')}\n                      customSize={11}\n                      name='DropDownClose'\n                      site={site}\n                    />\n                  </Column>\n                </Row>\n              }\n              {!isLoggedIn &&\n                <Row\n                  alignItems='center'\n                  clickable='pointer'\n                  onClick={onClickStoreLocator}\n                >\n                  <Row alignItems='center'>\n                    <Column customWidth='max-content'>\n                      <Icon\n                        clickable='pointer'\n                        color={getGlobalStyle('--color-base-black')}\n                        customSize={14}\n                        name={iconStoreLocator}\n                        site={site}\n                      />\n                    </Column>\n                    <Spacer.Vertical size={8} />\n                    <Column customWidth='max-content'>\n                      <Text\n                        clickable='pointer'\n                        fontSize='md'\n                        fontWeight={'semibold'}\n                      >\n                        {loggedOutText}\n                      </Text>\n                    </Column>\n                  </Row>\n                  <Spacer.Vertical size={8} />\n                  <Column customWidth='max-content'>\n                    <Icon\n                      clickable='pointer'\n                      color={getGlobalStyle('--color-base-black')}\n                      customSize={10}\n                      name='DropDownClose'\n                      site={site}\n                    />\n                  </Column>\n                </Row>\n              }\n            </Row>\n          </Container>\n        </SmallScreen>\n      }\n    </>\n  )\n}","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".LCDioLwh0fSMaJ0pYJHH {\\n  box-shadow: var(--box-shadow-2xs);\\n}\\n.nYMEr3wYm8G507S9jecY:hover{\\n  text-decoration: underline;\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./stories/organisms/Header/StoreLocatorHeader/StoreLocatorHeader.module.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,iCAAiC;AACnC;AACA;EACE,0BAA0B;AAC5B\",\"sourcesContent\":[\".wrapperRow {\\n  box-shadow: var(--box-shadow-2xs);\\n}\\n.text-hover:hover{\\n  text-decoration: underline;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"wrapperRow\": \"LCDioLwh0fSMaJ0pYJHH\",\n\t\"text-hover\": \"nYMEr3wYm8G507S9jecY\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./StoreLocatorHeader.module.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n  var p;\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      continue;\n    }\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      continue;\n    }\n    if (!a[p]) {\n      return false;\n    }\n  }\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./StoreLocatorHeader.module.css\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./StoreLocatorHeader.module.css\";\n       export default content && content.locals ? content.locals : undefined;\n"],"names":[],"sourceRoot":""}