{"version":3,"file":"organisms-BanefitsAlvi-BenefitsAlvi-stories.40f66dcf9be584c763ba.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;AC3FA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;AC1GA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sources":["webpack://components/./stories/organisms/BanefitsAlvi/BenefitsCategory/index.tsx","webpack://components/./stories/organisms/BanefitsAlvi/BenefitsTab/index.tsx","webpack://components/./stories/organisms/BanefitsAlvi/helpers/index.ts"],"sourcesContent":["import { BigScreen, getGlobalStyle, SmallScreen } from '../../../../helpers'\nimport { Picture, Text } from '../../../atoms'\nimport { Column, Row } from '../../../layout'\n\nexport interface BenefitsCategoryProps {\n  title: string;\n  benefits: Benefit[];\n}\n\ninterface Benefit {\n  title: string;\n  description: string;\n  icon: string;\n}\n\nexport const BenefitsCategory = ({\n  title,\n  benefits\n}: BenefitsCategoryProps) => {\n  return (\n    <>\n      <BigScreen>\n        <Column\n          border={`1px solid ${getGlobalStyle('--color-neutral-gray')}`}\n          borderRadius={getGlobalStyle('--border-radius-sm')}\n          padding='18px'\n        >\n          <Row margin='0 0 18px 0'>\n            <Text fontSize='xl' fontWeight='bold'>{title}</Text>\n          </Row>\n          <Row>\n            {benefits.map((benefit) => {\n              return (\n                <Row key={`${benefit.title}-${benefit.description}`}>\n                  <Column padding='0 25px 0 0' width='fit-content'>\n                    <Picture\n                      height='40px'\n                      src={benefit.icon}\n                      width='40px'\n                    />\n                  </Column>\n                  <Column>\n                    <Row margin='0 0 4px 0'>\n                      <Text fontWeight='semibold'>{benefit.title}</Text>\n                    </Row>\n                    <Text>{benefit.description}</Text>\n                  </Column>\n                </Row>\n              )\n            })}\n          </Row>\n        </Column>\n      </BigScreen>\n      <SmallScreen>\n        <Column \n          borderRadius={getGlobalStyle('--border-radius-sm')}\n          boxShadow={getGlobalStyle('--box-shadow-2xs')}\n          padding='16px'\n        >\n          <Row margin='0 0 18px 0'>\n            <Text\n              customColor={getGlobalStyle('--color-neutral-gray-dark')}\n              fontSize='md'\n              fontWeight='bold'\n            >{title}</Text>\n          </Row>\n          <Column gap={'16px'}>\n            {benefits.map((benefit) => {\n              return (\n                <Row key={`${benefit.title}-${benefit.description}`}>\n                  <Column padding='0 25px 0 0' width='fit-content'>\n                    <Picture \n                      height='40px'\n                      src={benefit.icon}\n                      width='40px'\n                    />\n                  </Column>\n                  <Column>\n                    <Row margin='0 0 4px 0'>\n                      <Text fontSize='md' fontWeight='semibold'>{benefit.title}</Text>\n                    </Row>\n                    <Text fontSize='md'>{benefit.description}</Text>\n                  </Column>\n                </Row>\n              )\n            })}\n          </Column>\n        </Column>\n      </SmallScreen>\n    </>\n  )\n}","import { \n  BigScreen, \n  getGlobalStyle, \n  SmallScreen \n} from '../../../../helpers'\nimport { Icon, Text } from '../../../atoms'\nimport { Column, Container, Row } from '../../../layout'\nimport { ShabitName } from '../BenefitsAlvi'\nimport { starsCountByShabitNameMap } from '../helpers'\nimport { getBenefitsTabColorByName, getBenefitsTabIconByStatus } from './helpers'\n\nexport interface BenefitsTabProps {\n  name: ShabitName;\n  selected?: boolean;\n  status?: BenefitsTabStatus;\n  title: string;\n  onClick?: () => void;\n}\n\nexport type BenefitsTabStatus = 'active' | 'locked' | 'completed';\n\nexport const BenefitsTab = ({\n  name,\n  selected,\n  status = 'locked',\n  title,\n  onClick\n}: BenefitsTabProps) => {\n\n  const starsCount = starsCountByShabitNameMap[name]\n  const textColor = selected ? getGlobalStyle('--color-base-black') : getGlobalStyle('--color-neutral-gray-silver')\n  const color = selected ? getBenefitsTabColorByName(name) : getGlobalStyle('--color-neutral-gray-silver')\n  const colorIcon = status !== 'locked' || selected ? getBenefitsTabColorByName(name) : getGlobalStyle('--color-neutral-gray-silver')\n  const iconName = getBenefitsTabIconByStatus(status)\n\n  return (\n    <>\n      <Column \n        alignItems='center' \n        clickable='pointer'\n        justifyContent='center'\n        onClick={onClick}\n        padding='0 1px'\n      >\n        <Container\n          alignItems='center'\n          clickable='pointer'\n          customHeight='30px'\n          justifyContent='center'\n          width='30px'\n        >\n          <Icon \n            clickable='pointer'\n            color={colorIcon}\n            name={iconName}\n            sizes='md'\n          />\n        </Container>\n        <Row\n          clickable='pointer'\n          justifyContent='center'\n          margin='8px 0 0 0'\n        >\n          {[...Array(starsCount)].map((index) => {return (\n            <Icon\n              clickable='pointer'\n              color={color}\n              key={`${index}`}\n              name='Star'\n            />\n          )})}\n        </Row>\n        <Row\n          clickable='pointer'\n          justifyContent='center'\n          margin='8px 0 0 0'\n        >\n          <Text\n            clickable='pointer'\n            customColor={textColor}\n            fontFamily={getGlobalStyle('--font-family-montserrat')}\n            fontSize='md'\n            fontWeight='semibold'\n            letterSpacing='1.25px'\n            textTransform='uppercase'\n          >\n            {title}\n          </Text>\n        </Row>\n        <BigScreen>\n          <Container \n            backgroundColor={color}\n            customHeight='3px'\n            margin='4px 0 0 0'\n          />         \n        </BigScreen>\n        <SmallScreen>\n          <Container \n            backgroundColor={color}\n            customHeight='3px'\n            margin='16px 0 0 0'\n          />\n        </SmallScreen>\n      </Column>\n    </>\n  )\n}","import { getGlobalStyle } from '../../../../helpers'\nimport { ShabitName } from '../BenefitsAlvi'\n\nexport const starsCountByShabitNameMap : Record<ShabitName, number> = {\n  bronze: 1,\n  silver: 2,\n  gold: 3,\n  vip: 4\n}\n\nexport const shabitTitleByShabitNameMap : Record<ShabitName, string> = {\n  'bronze': 'bronce',\n  'silver': 'plata',\n  'gold': 'oro',\n  'vip': 'vip'\n}\n\nexport const getShabitColorByName = (name: ShabitName) : string => {\n  return getGlobalStyle(`--color-alvi-shabits-${name}-solid`)\n}"],"names":[],"sourceRoot":""}