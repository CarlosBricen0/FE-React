{"version":3,"file":"stories_atoms_Input_Input_tsx.40f66dcf9be584c763ba.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAGA","sources":["webpack://components/./stories/atoms/Input/Input.tsx"],"sourcesContent":["import React from 'react'\nimport classNames from 'classnames'\n\nimport styles from './Input.module.css'\nimport { getGlobalStyle } from '../../../helpers'\n\ntype FontSize = 'base' | 'xs' | 'sm' | 'md' | 'lg'\ntype TextAlign = 'left' | 'center' | 'right' | 'justify'\n\nexport interface InputProps extends Omit<React.HTMLProps<HTMLInputElement>, 'ref'> {\n  adornmentStyle?: object;\n  adornmentText?: string;\n  autoFocus?: boolean;\n  background?: string;\n  border?: 'quantityButton';\n  borderRadius?: string;\n  color?: string;\n  customClassName?: string;\n  defaultValue?: string;\n  disabled?: boolean;\n  fontSize?: FontSize;\n  fontWeight?: 'regular' | 'semibold' | 'medium' | 'bold'\n  height?: string;\n  id?: string;\n  inputMode?: 'none' | 'search' | 'text' | 'numeric' | 'tel' | 'url' | 'email' | 'decimal';\n  margin?: string;\n  maxWidth?: string;\n  padding?: string;\n  placeholderColor?: string;\n  placeholderFocus?: string;\n  site?: 'unimarc' | 'alvi';\n  textAlign?: TextAlign;\n  title?: string;\n  type?: string;\n  width?: string;\n  onBlur?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  onChange?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  onFocus?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  onKeyPress?: (e?: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\nexport const Input = React.forwardRef(function Input({\n  adornmentStyle,\n  adornmentText,\n  autoFocus = false,\n  background = getGlobalStyle('--color-base-white'),\n  border,\n  borderRadius = 'initial',\n  color = 'initial',\n  customClassName,\n  defaultValue,\n  disabled = false,\n  fontSize = 'base',\n  fontWeight = 'regular',\n  height = 'auto',\n  id,\n  inputMode,\n  margin,\n  maxWidth,\n  padding,\n  placeholderColor,\n  placeholderFocus = '',\n  textAlign,\n  title,\n  type,\n  width = 'auto',\n  onKeyPress,\n  ...props\n}: InputProps, ref?: React.LegacyRef<HTMLInputElement>): React.ReactElement<InputProps> {\n\n  return (\n    <>\n      <input\n        autoFocus={autoFocus}\n        className={classNames(\n          styles.input,\n          [styles[`font--weight--${fontWeight}`]], {\n            [styles[`font--size--${fontSize}`]]: fontSize,\n            [styles[`input--${placeholderFocus}`]]: placeholderFocus,\n            [styles[`border--quantityButton`]]: border === 'quantityButton',\n            [styles[`padding--newsletter`]]: padding === 'newsletter',\n            [styles[`padding--login--alvi`]]: padding === 'login--alvi',\n            [styles[`padding-attachment-page`]]: padding === 'attachment-page',\n            [styles[`input--placeholder--${placeholderColor}`]]: placeholderColor\n          }, customClassName)}\n        defaultValue={defaultValue}\n        disabled={disabled}\n        id={id}\n        inputMode={inputMode}\n        onKeyPress={onKeyPress}\n        ref={ref}\n        style={{\n          background,\n          borderRadius,\n          height,\n          textAlign,\n          width,\n          color,\n          maxWidth,\n          margin\n        }}\n        title={title}\n        type={type}\n        {...props}\n      />\n      {adornmentText && (\n        <div\n          style={{\n            background,\n            borderRadius,\n            height,\n            textAlign,\n            width,\n            color,\n            maxWidth,\n            ...adornmentStyle\n          }}\n        >\n          <span>{adornmentText}</span>\n        </div>\n      )}\n    </>\n  )\n})\n"],"names":[],"sourceRoot":""}