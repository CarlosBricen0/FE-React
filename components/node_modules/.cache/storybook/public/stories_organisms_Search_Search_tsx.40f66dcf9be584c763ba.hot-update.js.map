{"version":3,"file":"stories_organisms_Search_Search_tsx.40f66dcf9be584c763ba.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AACA;AAGA;AAhFA;;;;;;;;;;;;;;;;;;;ACPA;AACA;AAKA;AACA;AAIA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;ACnGA;AAKA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;AClIA;AACA;AACA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAGA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;;AC1CA;AAKA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;AC5IA;AAKA;AAKA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAKA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;AC/HA;AAKA;AAKA;AACA;AAGA;AAAA;AAAA;AAiCA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AA3BA;;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;ACnEA;AAEA;AAMA;AAMA;AACA;AAAA;AAAA;AAAA;AAksources":["webpack://components/./stories/organisms/Search/DropDownSearch/BackboneSearch/index.tsx","webpack://components/./stories/organisms/Search/DropDownSearch/BodySearch/index.tsx","webpack://components/./stories/organisms/Search/DropDownSearch/DropDownSearch.tsx","webpack://components/./stories/organisms/Search/DropDownSearch/HeadSearch/index.tsx","webpack://components/./stories/organisms/Search/DropDownSearch/ShelfSearch/ContainerShelf/ContainerAlvi.tsx","webpack://components/./stories/organisms/Search/DropDownSearch/ShelfSearch/ContainerShelf/ContainerUnimarc.tsx","webpack://components/./stories/organisms/Search/DropDownSearch/ShelfSearch/ShelfSearch.tsx","webpack://components/./stories/organisms/Search/DropDownSearch/SuggestionRow/SuggestionRow.tsx","webpack://components/./stories/organisms/Search/Search.tsx"],"sourcesContent":["import React from 'react'\n\nimport { Backbone, Divider } from '../../../../atoms'\nimport { Column, Row, Spacer } from '../../../../layout'\nimport { BigScreen, SmallScreen } from '../../../../../helpers/mediaQueries'\nimport { getGlobalStyle } from '../../../../../helpers'\n\nexport const BackboneSearch = (): React.ReactElement => {\n  return (\n    <Column>\n      <BigScreen>\n        <Column>\n          <Row customWidth='30'>\n            <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={12} />\n          </Row>\n          <Spacer.Horizontal size={8} />\n          {[1, 2, 3, 4, 5].map(value => {\n            return (\n              <React.Fragment key={value}>\n                <Spacer.Horizontal size={12} />\n                <Row customWidth='70'>\n                  <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={10} />\n                </Row>\n              </React.Fragment>\n            )\n          })}\n        </Column >\n      </BigScreen>\n\n      <SmallScreen>\n        <Column>\n          <Spacer.Horizontal size={12} />\n          <Row customWidth='30'>\n            <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={12} />\n          </Row>\n          <Spacer.Horizontal size={8} />\n          {[1, 2, 3, 4, 5].map(value => {\n            return (\n              <React.Fragment key={value}>\n                <Spacer.Horizontal size={16} />\n                <Row customWidth='70'>\n                  <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={12} />\n                </Row>\n              </React.Fragment>\n            )\n          })}\n        </Column >\n      </SmallScreen>\n\n      <Divider verticalMargin={15} />\n      <Spacer.Horizontal size={4} />\n      <Row customWidth='30'>\n        <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={12} />\n      </Row>\n      <Spacer.Horizontal size={8} />\n      <Column >\n        {[1, 2, 3, 4, 5].map(value => {\n          return (\n            <React.Fragment key={value}>\n              <Spacer.Horizontal size={8} />\n              <Row>\n                <Row customWidth='18'>\n                  <Backbone height={60} />\n                </Row>\n                <Spacer.Vertical size={12} />\n                <Column>\n                  <Row customWidth='60'>\n                    <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={12} />\n                  </Row>\n                  <Spacer.Horizontal size={16} />\n                  <Row justifyContent='between'>\n                    <Row customWidth='30'>\n                      <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={20} />\n                    </Row>\n                    <Row customWidth='15'>\n                      <Backbone borderRadius={getGlobalStyle('--border-radius-sm')} height={16} />\n                    </Row>\n                  </Row>\n                  <Spacer.Horizontal size={24} />\n                </Column>\n              </Row>\n            </React.Fragment>\n          )\n        })}\n      </Column>\n    </Column >\n  )\n}","import { ShelfSearch, ShelfSearchProps } from '../ShelfSearch/ShelfSearch'\nimport {\n  Column,\n  Row,\n  Spacer\n} from '../../../../layout'\nimport { Divider, Text } from '../../../../atoms'\nimport {\n  BigScreen,\n  SmallScreen,\n  getGlobalStyle\n} from '../../../../../helpers'\n\nexport interface BodySearchProps {\n  data: ShelfSearchProps[];\n  isLoggedIn?: boolean;\n  isMobile?: boolean;\n  linkWrapper?: React.FunctionComponent;\n  quantityButtonProps: ShelfSearchProps['quantityButtonProps'];\n  site?: string;\n  validationStatus?: string;\n  handleOnClickShelfSearch?: ShelfSearchProps['handleOnClickShelfSearch'];\n  handleSearchImpressions?: (props?: object) => void;\n}\n\nexport const BodySearch = ({\n  data,\n  isLoggedIn,\n  isMobile,\n  linkWrapper,\n  site = 'unimarc',\n  validationStatus,\n  handleSearchImpressions,\n  ...props\n}: BodySearchProps): React.ReactElement<BodySearchProps> => {\n  if (!data || data?.length == 0) return null\n  const customFontSize = site == 'unimarc' ? 'sm' : 'md'\n\n  const productsCollection = []\n  const productsPush = ({ ref, product }) => {\n    productsCollection.push({ ref, product })\n    if (data.length != productsCollection.length) return\n\n    handleSearchImpressions(productsCollection)\n  }\n\n  return (\n    <>\n      <Column>\n        <BigScreen>\n          <>\n            <Spacer.Horizontal size={8} />\n            <Divider color={getGlobalStyle('--color-neutral-gray')} verticalMargin={6} />\n            <Spacer.Horizontal size={4} />\n            <Text fontSize={customFontSize} fontWeight='semibold'>\n              Productos\n            </Text>\n            <Spacer.Horizontal size={8} />\n          </>\n        </BigScreen>\n\n        <SmallScreen>\n          <>\n            <Row>\n              <Spacer.Horizontal size={8} />\n            </Row>\n            <Divider color={getGlobalStyle('--color-neutral-gray')} verticalMargin={12} />\n            <Text fontSize='md' fontWeight='semibold'>\n              Productos\n            </Text>\n            <Row>\n              <Spacer.Horizontal size={12} />\n            </Row>\n          </>\n        </SmallScreen>\n        {data?.map(item => {\n          return (\n            <ShelfSearch\n              isLoggedIn={isLoggedIn}\n              isMobile={isMobile}\n              key={item.itemId}\n              linkWrapper={linkWrapper}\n              productRef={productsPush}\n              site={site}\n              validationStatus={validationStatus}\n              {...{\n                ...item,\n                ...props,\n                quantityButtonProps: {\n                  ...props?.quantityButtonProps,\n                  ...item?.quantityButtonProps\n                }\n              }}\n            />\n          )\n        })}\n      </Column>\n    </>\n  )\n}","import {\n  BigScreen,\n  SmallScreen,\n  getGlobalStyle\n} from '../../../../helpers'\nimport {\n  Column,\n  Container,\n  Row,\n  Spacer\n} from '../../../layout'\nimport { HeadSearch, HeadSearchProps } from './HeadSearch'\nimport { BodySearch, BodySearchProps } from './BodySearch'\nimport { BackboneSearch } from './BackboneSearch'\nimport { InputIcon, InputIconProps } from '../../../molecules'\nimport { Icon } from '../../../atoms'\nimport { Icons } from '../../../../assets/SvgComponents/SvgIcons'\nimport styles from './DropDownSearch.module.css'\n\nexport interface DropDownSearchProps {\n  backgroundGradientButton?: string;\n  bodySearch?: BodySearchProps;\n  headSearch?: HeadSearchProps;\n  iconArrowSearch?: keyof (typeof Icons);\n  iconArrowSize?: number;\n  inputSearchProps?: InputIconProps;\n  isLoadingSearch?: boolean;\n  isLoggedIn?: boolean;\n  isMobile?: boolean;\n  linkWrapper?: React.FunctionComponent;\n  site?: 'unimarc' | 'alvi';\n  validationStatus?: string;\n  onCloseArrowBack?: () => void;\n}\n\nexport const DropDownSearch = ({\n  bodySearch,\n  headSearch,\n  iconArrowSearch = 'ArrowBack',\n  iconArrowSize = 24,\n  inputSearchProps,\n  isLoadingSearch = false,\n  isLoggedIn,\n  isMobile,\n  linkWrapper,\n  site = 'unimarc',\n  validationStatus,\n  onCloseArrowBack\n}: DropDownSearchProps): React.ReactElement<DropDownSearchProps> => {\n\n  return (\n    <>\n      <BigScreen>\n        <>\n          <Container position='relative'>\n            <Column\n              backgroundColor={getGlobalStyle('--color-base-white')}\n              borderRadius='0 0 8px 8px'\n              customClassName={styles.scrollBar}\n              maxHeight='32rem'\n              overflow='scroll'\n              padding='8px 14px'\n              position='absolute'\n            >\n              {isLoadingSearch ?\n                <BackboneSearch />\n                :\n                <>\n                  <HeadSearch {...headSearch} site={site} />\n                  <BodySearch\n                    {...bodySearch}\n                    isLoggedIn={isLoggedIn}\n                    linkWrapper={linkWrapper}\n                    site={site}\n                    validationStatus={validationStatus}\n                  />\n                </>\n              }\n            </Column>\n          </Container>\n        </>\n      </BigScreen>\n\n      <SmallScreen>\n        <Container position='fixed'>\n          <Column\n            backgroundColor={getGlobalStyle('--color-base-white')}\n            borderRadius='0 0 8px 8px'\n            customHeight='100vh'\n            overflow='scroll'\n            padding='8px 14px'\n            position='absolute'\n          >\n            <Row>\n              <Spacer.Horizontal size={24} />\n            </Row>\n            <Row alignItems='center'>\n              <Icon\n                clickable='pointer'\n                color={getGlobalStyle('--color-icons-black')}\n                customSize={iconArrowSize}\n                name={iconArrowSearch}\n                onClick={onCloseArrowBack}\n              />\n              <Spacer.Vertical size={8} />\n              <InputIcon {...inputSearchProps} autofocus={true} />\n            </Row>\n            <Row>\n              <Spacer.Horizontal size={16} />\n            </Row>\n            {isLoadingSearch ?\n              <BackboneSearch />\n              :\n              <>\n                <HeadSearch {...headSearch} site={site} />\n                <BodySearch\n                  {...bodySearch}\n                  isLoggedIn={isLoggedIn}\n                  isMobile={isMobile}\n                  linkWrapper={linkWrapper}\n                  site={site}\n                  validationStatus={validationStatus}\n                />\n              </>\n            }\n          </Column>\n        </Container>\n      </SmallScreen>\n    </>\n  )\n}","import { Text } from '../../../../atoms'\nimport { SuggestionRow } from '..'\nimport { BigScreen, SmallScreen } from '../../../../../helpers/mediaQueries'\n\nexport interface HeadSearchProps {\n  site?: string;\n  suggestionsTitle?: string;\n  suggestionsData?: { text: string, onClick: () => void }[]\n}\n\nexport const HeadSearch = ({\n  site = 'unimarc',\n  suggestionsTitle = 'Más buscados',\n  suggestionsData\n}: HeadSearchProps): React.ReactElement<HeadSearchProps> => {\n  const customFontSize = site == 'unimarc' ? 'sm' : 'md'\n\n  return (\n    <>\n      <BigScreen>\n        <Text fontSize={customFontSize} fontWeight='semibold'>\n          {suggestionsTitle}\n        </Text>\n      </BigScreen>\n\n      <SmallScreen>\n        <Text fontSize='md' fontWeight='semibold'>\n          {suggestionsTitle}\n        </Text>\n      </SmallScreen>\n\n      {suggestionsData?.map(({ text, onClick }) => {\n        return (\n          <SuggestionRow\n            key={text}\n            onClickSuggestion={onClick}\n            suggestion={text}\n          />\n        )\n      })}\n    </>\n  )\n}","import {\n  Link,\n  Picture,\n  Text\n} from '../../../../../atoms'\nimport {\n  Column,\n  Row,\n  Spacer\n} from '../../../../../layout'\nimport { currencyFormat } from '../../../../../../helpers'\nimport { AddToCartAndQuantity } from '../../../../../molecules'\nimport { ShelfSearchProps } from '../ShelfSearch'\nimport { PropertiesProducts } from '../../../../ShelfAlvi/helpers/PropertiesProducts'\nimport styles from './ContainerAlvi.module.css'\n\nconst ContainerAlvi = ({\n  brand,\n  buttonStatus = 'initial',\n  img,\n  isDisabled,\n  isLoading,\n  isLoggedIn = false,\n  isMobile = false,\n  itemId,\n  maxQuantity,\n  price,\n  priceSteps,\n  productUrl,\n  quantity = 0,\n  quantityButtonProps,\n  sellers,\n  title,\n  tooltipProps,\n  validationStatus,\n  handleOnClickShelfSearch\n}: ShelfSearchProps): React.ReactElement<ShelfSearchProps> => {\n  const brandSize = isMobile ? 'xs' : 'sm'\n  const titleSize = isMobile ? 'sm' : 'md'\n  const { sortPriceStep } = PropertiesProducts({ product: { priceSteps } })\n  const finalPrice = isLoggedIn && validationStatus !== '0' ? currencyFormat({ number: (sortPriceStep[0] ? sortPriceStep[0].promotionalPrice : price), bool: false })\n    : currencyFormat({ number: sellers[0].price, bool: false })\n  const titlePrice = isLoggedIn && validationStatus !== '0' ? `Desde ${sortPriceStep[0] && sortPriceStep[0].minQuantity} un` : 'Precio regular'\n\n  return (\n    <>\n      <Column clickable='pointer' customWidth='20.4'>\n        <Link\n          clickable\n          href={productUrl}\n          underline='none'\n        >\n          <Picture\n            alt={title}\n            border='none'\n            borderRadius='none'\n            height='72px'\n            src={img}\n            url={productUrl}\n            width='100%'\n          />\n        </Link>\n      </Column>\n      <Spacer.Vertical size={12} />\n      <Column customWidth='82'>\n        <Text\n          clickable='pointer'\n          color='black'\n          customClassName={styles.brand}\n          fontSize={brandSize}\n          fontWeight='semibold'\n          underline='hover'\n        >\n          {brand}\n        </Text>\n        <Row>\n          <Link href={productUrl} underline='none'>\n            <Text\n              clickable='pointer'\n              color='black'\n              fontSize={titleSize}\n              truncate={40}\n              underline='hover'\n            >\n              {title}\n            </Text>\n          </Link>\n        </Row>\n        <Spacer.Horizontal size={8} />\n        <Row alignItems='center' justifyContent='between'>\n          <Column justifyContent='start'>\n            <Text\n              color='gray'\n              fontSize='xs'\n              fontWeight='regular'\n            >\n              {titlePrice}\n            </Text>\n            <Row alignItems='end'>\n              <Text\n                color='blue'\n                fontSize='md'\n                fontWeight='semibold'\n              >\n                {finalPrice}\n              </Text>\n              <Spacer.Vertical size={4} />\n              <Text\n                color='blue'\n                fontSize='sm'\n                fontWeight='semibold'\n              >\n                c/u\n              </Text>\n            </Row>\n          </Column>\n          <Column maxWidth='max-content'>\n            <AddToCartAndQuantity\n              customWidth='120px'\n              disabled={isDisabled}\n              handleOnClick={handleOnClickShelfSearch}\n              isLoading={isLoading}\n              itemId={itemId}\n              quantity={quantity}\n              quantityButtonProps={{\n                maxQuantity,\n                ...quantityButtonProps\n              }}\n              quantityButtonStyles={quantityButtonProps?.quantityButtonStyles}\n              site='alvi'\n              statusButton={buttonStatus}\n              tooltipProps={tooltipProps}\n            />\n          </Column>\n        </Row>\n      </Column>\n    </>\n  )\n}\n\nexport default ContainerAlvi","import {\n  Link,\n  Picture,\n  Text\n} from '../../../../../atoms'\nimport {\n  Column,\n  Row,\n  Spacer\n} from '../../../../../layout'\nimport { currencyFormat } from '../../../../../../helpers'\nimport { AddToCartAndQuantity } from '../../../../../molecules'\nimport { ShelfSearchProps } from '../ShelfSearch'\n\nconst ContainerUnimarc = ({\n  buttonStatus = 'initial',\n  img,\n  inOffer,\n  isDisabled,\n  isLoading,\n  itemId,\n  linkWrapper,\n  listPrice,\n  maxQuantity,\n  price,\n  productUrl,\n  quantity = 0,\n  quantityButtonProps,\n  title,\n  tooltipProps,\n  handleOnClickShelfSearch\n}: ShelfSearchProps): React.ReactElement<ShelfSearchProps> => {\n  return (\n    <>\n      <Column clickable='pointer' customWidth='18'>\n        <Link\n          href={productUrl}\n          underline='none'\n          wrapper={linkWrapper}\n        >\n          <Picture\n            alt={title}\n            border='none'\n            borderRadius='none'\n            height='60px'\n            src={img}\n            width='100%'\n          />\n        </Link>\n      </Column>\n      <Spacer.Vertical size={12} />\n      <Column customWidth='82'>\n        <Link\n          href={productUrl}\n          underline='none'\n          wrapper={linkWrapper}\n        >\n          <Text\n            clickable='pointer'\n            color='black'\n            fontSize='sm'\n            truncate={40}\n            underline='hover'\n          >\n            {title}\n          </Text>\n        </Link>\n        <Spacer.Horizontal size={4} />\n        <Row alignItems='center' justifyContent='between'>\n          <Column maxWidth='max-content'>\n            <AddToCartAndQuantity\n              disabled={isDisabled}\n              handleOnClick={handleOnClickShelfSearch}\n              isLoading={isLoading}\n              itemId={itemId}\n              quantity={quantity}\n              quantityButtonProps={{\n                maxQuantity,\n                ...quantityButtonProps\n              }}\n              quantityButtonStyles={quantityButtonProps?.quantityButtonStyles}\n              statusButton={buttonStatus}\n              tooltipProps={tooltipProps}\n            />\n          </Column>\n          <Column\n            alignItems='center'\n            customWidth='16'\n            justifyContent='end'\n          >\n            {inOffer\n              ? (\n                <>\n                  <Text\n                    color='guardsman-red'\n                    fontSize='md'\n                    fontWeight='semibold'\n                  >\n                    {currencyFormat({ number: price, bool: false })}\n                  </Text>\n                  {price !== listPrice && (\n                    <Text\n                      color='black'\n                      fontSize='sm'\n                      underline='line-through'\n                    >\n                      {currencyFormat({ number: listPrice, bool: false })}\n                    </Text>\n                  )}\n                </>\n              )\n              : (\n                <Text\n                  color='guardsman-red'\n                  fontSize='md'\n                  fontWeight='semibold'\n                >\n                  {currencyFormat({ number: price, bool: false })}\n                </Text>\n              )}\n          </Column>\n        </Row>\n      </Column>\n    </>\n  )\n}\n\nexport default ContainerUnimarc","import {\n  ButtonStatus,\n  Divider,\n  TooltipProps\n} from '../../../../atoms'\nimport {\n  Column,\n  Row\n} from '../../../../layout'\nimport { QuantityButtonProps } from '../../../../molecules'\nimport ContainerUnimarc from './ContainerShelf/ContainerUnimarc'\nimport ContainerAlvi from './ContainerShelf/ContainerAlvi'\nimport { PartnerPriceProps } from '../../../ShelfAlvi/PartnerPrice'\nimport { Seller } from '../../../../../shared/interfaces/IIntelligenceSearch'\nimport { getGlobalStyle } from '../../../../../helpers'\n\nexport interface ShelfSearchProps {\n  [key: string]: unknown;\n  backgroundGradientButton?: string;\n  brand?: string;\n  buttonStatus?: ButtonStatus;\n  format?: string;\n  img?: string;\n  inOffer?: boolean;\n  isDisabled?: boolean;\n  isLoading?: boolean;\n  isLoggedIn?: boolean;\n  isMobile?: boolean;\n  itemId?: string | number;\n  linkWrapper?: React.FunctionComponent;\n  listPrice?: number;\n  maxQuantity?: number;\n  price?: number;\n  priceSteps?: Array<PartnerPriceProps>;\n  product?: { itemId?: string };\n  productUrl?: string;\n  quantity?: number;\n  quantityButtonProps?: Omit<QuantityButtonProps, 'value'>;\n  sellers?: Seller[];\n  site?: string;\n  title?: string;\n  tooltipProps?: TooltipProps;\n  validationStatus?: string;\n  handleOnClickShelfSearch?: (props?: unknown) => void;\n  productRef?: (props?: object) => void;\n}\n\nconst itemsIdCollection = []\nconst nodesCollection = []\n\nexport const ShelfSearch = (props: ShelfSearchProps): React.ReactElement<ShelfSearchProps> => {\n  const {\n    product,\n    site = 'unimarc',\n    title,\n    productRef\n  } = props\n\n  const updateNodoRefs = ref => {\n    if (ref && itemsIdCollection.indexOf(product?.itemId) == -1) {\n      itemsIdCollection.push(product?.itemId)\n      nodesCollection.push(ref)\n      productRef({ ref, product })\n    }\n  }\n  return (\n    <Column ref={updateNodoRefs}>\n      <Row\n        alignItems='center'\n        customHeight='100%'\n        key={title}\n      >\n        {site === 'unimarc' ? <ContainerUnimarc {...props} /> : <ContainerAlvi {...props} />}\n      </Row>\n      <Divider color={getGlobalStyle('--color-neutral-gray')} verticalMargin={8} />\n    </Column>\n  )\n}\n","import { Row, Column, Spacer} from '../../../../layout'\nimport { Icon, Text } from '../../../../atoms'\nimport { BigScreen, SmallScreen } from '../../../../../helpers/mediaQueries'\nimport { getGlobalStyle } from '../../../../../helpers'\n\ninterface SuggestionRowProps {\n  suggestion?: string;\n  onClickSuggestion?: () => void;\n}\n\nexport const SuggestionRow = ({\n  suggestion = 'suggestion',\n  onClickSuggestion\n}: SuggestionRowProps): React.ReactElement<SuggestionRowProps> => {\n  return (\n    <>\n      <BigScreen>\n        <Column onClick={onClickSuggestion}>\n          <Spacer.Horizontal size={12} />\n          <Row\n            alignItems='center'\n            clickable='pointer'\n            justifyContent='between'\n          >\n            <Text\n              clickable='pointer'\n              fontSize='sm'\n              underline='hover'\n            >\n              {suggestion}\n            </Text>\n            <Icon\n              clickable='pointer'\n              color='black'\n              name='ArrowRight'\n              sizes='xs'\n            />\n          </Row>\n        </Column>\n      </BigScreen>\n\n      <SmallScreen>\n        <Column onClick={onClickSuggestion}>\n          <Spacer.Horizontal size={24} />\n          <Row\n            alignItems='center'\n            clickable='pointer'\n            justifyContent='between'\n          >\n            <Text\n              clickable='pointer'\n              fontSize='md'\n              underline='hover'\n            >\n              {suggestion}\n            </Text>\n            <Icon\n              clickable='pointer'\n              color={getGlobalStyle('--color-icons-gray')}\n              customSize={16}\n              name='ArrowRight'\n            />\n          </Row>\n        </Column>\n      </SmallScreen>\n    </>\n  )\n}","import { useEffect, useRef } from 'react'\nimport { Icons } from '../../../assets/SvgComponents/SvgIcons'\nimport {\n  getGlobalStyle,\n  BigScreen,\n  SmallScreen\n} from '../../../helpers'\nimport { Site } from '../../../shared/interfaces/Site'\nimport {\n  Row,\n  Column,\n  Container\n} from '../../layout'\nimport { ChildrenBaseContainerProps } from '../../layout/BaseContainer/BaseContainer'\nimport { InputIcon, InputIconProps } from '../../molecules'\nimport { DropDownSearch, DropDownSearchProps } from './DropDownSearch/DropDownSearch'\n\nexport interface SearchProps {\n  backgroundGradientIconSearch?: string;\n  backgroundIconSearch?: string;\n  backgroundSearch?: string;\n  borderSearch?: string;\n  clearButton?: boolean;\n  colorIcon?: string;\n  containerProps?: ChildrenBaseContainerProps;\n  dropDownSearch?: DropDownSearchProps;\n  iconArrowSearch?: keyof (typeof Icons);\n  iconArrowSize?: number;\n  iconSearch?: keyof (typeof Icons);\n  iconWidth?: string;\n  inputAdornmentRef?: React.MutableRefObject<HTMLDivElement>;\n  isLoggedIn?: boolean;\n  isMobile?: boolean;\n  isVisibleDropDownSearch?: boolean;\n  linkWrapper?: React.FunctionComponent;\n  searchPlaceholder?: string;\n  site?: Site;\n  sizeLogoMobile?: number;\n  validationStatus?: string;\n  valueInputSearch?: string;\n  onBlurSearch?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  onChangeSearch?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  onClearInput?: (e?: React.ChangeEvent<HTMLInputElement>, refAdornm?: unknown) => void;\n  onClickSearch?: () => void;\n  onCloseSearch?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  onFocusSearch?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  onKeyPressSearch?: (e?: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\nexport const Search = ({\n  backgroundGradientIconSearch,\n  backgroundIconSearch = getGlobalStyle('--color-primary-red'),\n  backgroundSearch = getGlobalStyle('--color-base-transparent'),\n  borderSearch = `2px solid ${getGlobalStyle('--color-base-white')}`,\n  clearButton = false,\n  colorIcon = 'white',\n  containerProps,\n  dropDownSearch,\n  iconArrowSearch,\n  iconArrowSize,\n  iconSearch = 'SearchCart',\n  iconWidth = '15',\n  inputAdornmentRef,\n  isLoggedIn,\n  isMobile,\n  isVisibleDropDownSearch = false,\n  linkWrapper,\n  searchPlaceholder = '¿Qué productos necesitas hoy?',\n  site = 'unimarc',\n  validationStatus,\n  valueInputSearch,\n  onBlurSearch,\n  onChangeSearch,\n  onClearInput,\n  onClickSearch,\n  onCloseSearch,\n  onFocusSearch,\n  onKeyPressSearch\n}: SearchProps): React.ReactElement<SearchProps> => {\n  const unimarcSite = site === 'unimarc'\n  const columnSearchRef = useRef(null)\n  const fontSizePlaceholderMovil = unimarcSite ? 'base' : 'md'\n  const sizeIconSearch = unimarcSite ? 20 : 21\n  const sizeWrapperSearch = unimarcSite ? '40px' : '35px'\n\n  const inputSearchProps: InputIconProps = {\n    background: getGlobalStyle('--color-base-white'),\n    backgroundGradientIconSearch: backgroundGradientIconSearch,\n    backgroundIcon: backgroundIconSearch,\n    border: borderSearch,\n    borderRadius: getGlobalStyle('--border-radius-lg'),\n    clearButton,\n    colorIcon: colorIcon,\n    customSizeIcon: 20,\n    fontSize: 'base',\n    icon: iconSearch,\n    iconArrowSize: iconArrowSize,\n    iconBorderRadius: getGlobalStyle('--border-radius-lg'),\n    iconWidth: iconWidth,\n    inputAdornmentRef,\n    padding: '7px 10px',\n    placeholder: searchPlaceholder,\n    placeholderFocus: 'placeholder',\n    site,\n    value: valueInputSearch,\n    onClearInput,\n    onClickSearch,\n    onFocusSearch,\n    onChangeSearch,\n    onKeyPressSearch\n  }\n\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (columnSearchRef.current && !columnSearchRef.current.contains(event.target)) {\n        onCloseSearch()\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [columnSearchRef])\n\n  return (\n    <>\n      <BigScreen>\n        <Row\n          customWidth='100'\n          ref={columnSearchRef}\n          {...containerProps}\n        >\n          <Column backgroundColor={backgroundSearch} borderRadius='8px 8px 0 0'>\n            <Container padding='8px'>\n              <InputIcon\n                {...inputSearchProps}\n                backgroundGradientIconSearch={backgroundGradientIconSearch}\n                customSizeIcon={24}\n                fontSize='md'\n                iconWidth={iconWidth}\n                onBlurSearch={onBlurSearch}\n                padding='7px 16px'\n              />\n            </Container>\n            {isVisibleDropDownSearch &&\n              <DropDownSearch\n                {...dropDownSearch}\n                isLoggedIn={isLoggedIn}\n                linkWrapper={linkWrapper}\n                site={site}\n                validationStatus={validationStatus}\n              />\n            }\n          </Column>\n        </Row>\n      </BigScreen>\n\n      <SmallScreen>\n        <>\n          <Row >\n            <InputIcon\n              {...inputSearchProps}\n              backgroundIcon={backgroundIconSearch}\n              clearButton={false}\n              customSizeIcon={sizeIconSearch}\n              fontSize={fontSizePlaceholderMovil}\n              height={sizeWrapperSearch}\n              iconWidth={iconWidth}\n              isMobile={isMobile}\n            />\n          </Row>\n          {isVisibleDropDownSearch &&\n            <DropDownSearch\n              {...{\n                ...dropDownSearch,\n                backgroundIcon: backgroundIconSearch,\n                iconArrowSearch,\n                iconArrowSize,\n                inputSearchProps,\n                onCloseArrowBack: onCloseSearch\n              }}\n              isLoggedIn={isLoggedIn}\n              isMobile={isMobile}\n              linkWrapper={linkWrapper}\n              site={site}\n              validationStatus={validationStatus}\n            />\n          }\n        </>\n      </SmallScreen>\n    </>\n  )\n}"],"names":[],"sourceRoot":""}