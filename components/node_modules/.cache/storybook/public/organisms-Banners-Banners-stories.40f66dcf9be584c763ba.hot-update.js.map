{"version":3,"file":"organisms-Banners-Banners-stories.40f66dcf9be584c763ba.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;ACvIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;ACrGA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAnBA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;ACzGA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AA/BA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AACA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AAGA","sources":["webpack://components/./stories/organisms/Banners/CarouselBanners/index.tsx","webpack://components/./stories/organisms/Banners/CollageBanner/index.tsx","webpack://components/./stories/organisms/Banners/GridBanners/index.tsx","webpack://components/./stories/organisms/Banners/OnlyOneBanner/index.tsx","webpack://components/./stories/organisms/Banners/OnlyThreeBanner/index.tsx"],"sourcesContent":["import classNames from 'classnames'\nimport React from 'react'\nimport { BigScreen, getGlobalStyle, SmallScreen } from '../../../../helpers'\nimport { Picture } from '../../../atoms'\nimport { Column, Row } from '../../../layout'\nimport { Carousel } from '../../Carousel/Carousel'\n\nimport styles from './CarouselBanners.module.css'\n\nexport interface CarouselBannersItemProps {\n  img?: string;\n  image?: string;\n  onRedirect?: () => void;\n}\n\nexport interface CarouselBannersProps {\n  banners?: CarouselBannersItemProps[];\n  infinite?: boolean;\n  itemsToShow?: number;\n  minHeight?: string;\n  linkWrapper?: React.FunctionComponent;\n  nextImage?: React.FunctionComponent;\n  saleChannel?: string | string [];\n  showDots?: boolean;\n  whitoutPadding?: boolean;\n  zoomIn?: boolean;\n  promoData?: (props?: object) => void;\n}\n\nexport const CarouselBanners = ({\n  banners = [],\n  infinite = true,\n  itemsToShow = 3,\n  minHeight,\n  linkWrapper,\n  nextImage,\n  saleChannel,\n  showDots = true,\n  whitoutPadding = false,\n  zoomIn = false,\n  promoData\n}: CarouselBannersProps): React.ReactElement<CarouselBannersProps> => {\n\n  const responsive = {\n    desktop: {\n      breakpoint: {\n        max: 3000,\n        min: 1024\n      },\n      items: itemsToShow,\n      slidesToSlide: itemsToShow\n    }\n  }\n\n  return (\n    <>\n      <BigScreen>\n        <Carousel\n          deviceType='desktop'\n          infinite={infinite}\n          marginArrows='14px'\n          opacityArrows\n          responsive={responsive}\n          showDots={showDots}\n          ssr\n        >\n          {banners?.map((banner, key) => {\n            const itemSaleChannels = banner['saleChannels'] ? banner?.['saleChannels'] : ''\n            if (itemSaleChannels?.includes(saleChannel) || itemSaleChannels === ''){\n              return (\n                <Column\n                  clickable='pointer'\n                  key={key}\n                  onClick={banner.onRedirect}\n                  padding='0 10px'\n                >\n                  <Picture\n                    anchor\n                    borderRadius={getGlobalStyle('--border-radius-md')}\n                    catchImgRef={(ref) => { return promoData && promoData({ ref, banner }) }}\n                    customClassName={classNames(styles['carousel-item'], {\n                      [styles['carousel-item--zoom-in']]: zoomIn\n                    })}\n                    height='auto'\n                    linkWrapper={linkWrapper}\n                    minHeight={`${minHeight}px`}\n                    nextImage={nextImage}\n                    src={banner.img}\n                    url={banner?.['url']}\n                    width='100%'\n                  />\n                </Column>\n              )\n            }\n            return null\n          }\n          )}\n        </Carousel>\n      </BigScreen>\n\n      <SmallScreen>\n        <Row className={whitoutPadding ? styles['carouselMobile--without-padding'] : styles.carouselMobile}>\n          {banners?.map((banner, key) => {\n            const itemSaleChannels = banner['saleChannels'] ? banner?.['saleChannels'] : ''\n            if (itemSaleChannels?.includes(saleChannel) || itemSaleChannels === ''){\n              return (\n                <Column\n                  clickable='pointer'\n                  height='min-content'\n                  key={key}\n                  minWidth='245px'\n                  onClick={banner.onRedirect}\n                  padding='0 12px 0px 0'\n                >\n                  <Picture\n                    anchor\n                    borderRadius='12px'\n                    catchImgRef={(ref) => { return promoData && promoData({ ref, banner }) }}\n                    customClassName={styles.carouselItem}\n                    height='auto'\n                    linkWrapper={linkWrapper}\n                    nextImage={nextImage}\n                    src={banner.img}\n                    url={banner?.['url']}\n                    width='100%'\n                  />\n                </Column>\n              )\n            }\n            return null\n          })}\n        </Row>\n      </SmallScreen>\n    </>\n  )\n}","import React from 'react'\nimport { BigScreen, SmallScreen } from '../../../../helpers'\nimport { Column, Row } from '../../../layout'\nimport { Picture } from '../../../atoms'\nimport { Carousel } from '../../Carousel/Carousel'\n\nexport interface CollageBannerProps {\n  autoPlay?: boolean;\n  banners?: Array<{ img: string, url?: string, onRedirect?: () => void }>;\n  maxWidth?: string;\n  linkWrapper?: React.FunctionComponent;\n  nextImage?: React.FunctionComponent;\n  promoData?: (props?: object) => void;\n  saleChannel?: string | string[];\n}\n\nexport const CollageBanner = ({\n  autoPlay = true,\n  banners = [],\n  maxWidth,\n  linkWrapper,\n  nextImage,\n  promoData\n}: CollageBannerProps): React.ReactElement<CollageBannerProps> => {\n  const containerProps = { maxWidth: '1120px', minHeight: '450px' }\n\n  return (\n    <>\n      <BigScreen>\n        <Row\n          gap='20px'\n          isWrap\n          justifyContent='between'\n          maxWidth={maxWidth}\n        >\n          {banners?.map((banner) => {\n            return (\n              <Column\n                clickable='pointer'\n                key={banner?.img}\n                onClick={banner.onRedirect}\n                width='fit-content'\n              >\n                <Picture\n                  anchor\n                  borderRadius='12px'\n                  catchImgRef={(ref) => {return promoData({ref, banner})}}\n                  height='auto'\n                  linkWrapper={linkWrapper}\n                  nextImage={nextImage}\n                  src={banner?.img}\n                  url={banner?.url}\n                  width='fit-content'\n                />\n              </Column>\n            )\n          })}\n        </Row>\n      </BigScreen>\n      <SmallScreen>\n        <Carousel\n          arrows={false}\n          autoPlay={autoPlay}\n          containerProps={containerProps}\n          deviceType={'mobile'}\n          focusOnSelect\n          infinite\n          opacityArrows\n          pauseOnHover\n          showDots\n          ssr\n        >\n          {banners?.map((banner, index) => {\n            return (\n              <Picture\n                anchor\n                catchImgRef={(ref) => {\n                  return promoData({ ref, banner })\n                }}\n                height='100%'\n                key={banner?.img}\n                linkWrapper={linkWrapper}\n                nextImage={nextImage}\n                priority={index === 0}\n                src={banner?.img}\n                style={{\n                  cursor: 'pointer',\n                  height: '100%',\n                  width: '100%',\n                  padding: '0 5px'\n                }}\n                title={`collage-${index}`}\n                url={banner?.url}\n                width='100%'\n              />\n            )\n          })}\n        </Carousel>\n      </SmallScreen>\n    </>\n  )\n}","import React from 'react'\nimport { BigScreen, SmallScreen } from '../../../../helpers'\nimport { Picture } from '../../../atoms'\nimport { Column, Row } from '../../../layout'\n\nimport styles from './GridBannersbanners.module.css'\n\nexport interface BannerPictureProps {\n  banner?: {\n    img?: string\n  };\n  linkWrapper?: React.FunctionComponent;\n  nextImage?: React.FunctionComponent;\n  promoData?: (props?: object) => void;\n}\n\nconst BannerPicture = ({\n  banner,\n  linkWrapper,\n  nextImage,\n  promoData\n}: BannerPictureProps) => {\n  return (\n    <Picture\n      anchor\n      borderRadius='12px'\n      catchImgRef={(ref) => {return promoData({ref, banner})}}\n      height='auto'\n      linkWrapper={linkWrapper}\n      nextImage={nextImage}\n      src={banner.img}\n      url={banner?.['url']}\n      width='100%'\n    />\n  )\n}\n\nexport interface GridBannersProps {\n  banners?: Array<{ img: string, onRedirect?: () => void }>;\n  linkWrapper?: React.FunctionComponent;\n  nextImage?: React.FunctionComponent;\n  promoData?: (props?: object) => void;\n  saleChannel?: string | string[];\n}\n\nexport const GridBanners = ({\n  banners = [],\n  linkWrapper,\n  nextImage,\n  promoData,\n  saleChannel\n}: GridBannersProps): React.ReactElement<GridBannersProps> => {\n  return (\n    <>\n      <BigScreen>\n        <Row className={styles.grid}>\n          {banners?.map((banner, key) => {\n            const itemSaleChannels = banner['saleChannels'] ? banner?.['saleChannels'] : ''\n            if (itemSaleChannels?.includes(saleChannel) || itemSaleChannels === ''){\n              return (\n                <Column\n                  clickable='pointer'\n                  key={key}\n                  onClick={banner.onRedirect}\n                  padding='6px'\n                >\n                  <BannerPicture\n                    banner={banner}\n                    linkWrapper={linkWrapper}\n                    nextImage={nextImage}\n                    promoData={promoData}\n                  />\n                </Column>\n              )\n            }\n            return null\n          })}\n        </Row>\n      </BigScreen>\n\n      <SmallScreen>\n        <Row className={styles.gridMobile}>\n          {banners?.map((banner, key) => {\n            return (\n              <Column\n                clickable='pointer'\n                height='min-content'\n                key={key}\n                minWidth='245px'\n                onClick={banner.onRedirect}\n                padding='0 12px 0px 0'\n              >\n                <BannerPicture\n                  banner={banner}\n                  linkWrapper={linkWrapper}\n                  nextImage={nextImage}\n                  promoData={promoData}\n                />\n              </Column>\n            )\n          })}\n        </Row>\n      </SmallScreen>\n    </>\n  )\n}","import React from 'react'\nimport { BigScreen, SmallScreen } from '../../../../helpers'\nimport { Picture } from '../../../atoms'\nimport { Container, Row } from '../../../layout'\n\nimport styles from './OnlyOneBanner.module.css'\n\nexport interface OnlyOneBannersProps {\n  banner?: string;\n  bannerSaleChannels?: string | string[];\n  linkWrapper?: React.FunctionComponent;\n  isPriority?: boolean;\n  nextImage?: React.FunctionComponent;\n  saleChannel?: string;\n  url?: string;\n  onRedirect?: () => void;\n  promoData?: (props?: object) => void;\n}\n\nconst OnlyOneBannerImage = ({\n  banner,\n  linkWrapper,\n  isPriority,\n  nextImage,\n  url,\n  onRedirect,\n  promoData\n}: OnlyOneBannersProps) => {\n  return (\n    <Row\n      className={styles.unoSolo}\n      clickable='pointer'\n      customWidth='100'\n      maxWidth='1120px'\n    >\n      <Picture\n        anchor\n        borderRadius='12px'\n        catchImgRef={promoData}\n        height='100%'\n        linkWrapper={linkWrapper}\n        nextImage={nextImage}\n        onClick={onRedirect}\n        priority={isPriority}\n        src={banner}\n        url={url}\n        width='100%'\n      />\n    </Row>\n  )\n}\n\nexport const OnlyOneBanner = ({\n  banner,\n  bannerSaleChannels,\n  linkWrapper,\n  isPriority,\n  nextImage,\n  url,\n  onRedirect,\n  promoData,\n  saleChannel\n}: OnlyOneBannersProps): React.ReactElement<OnlyOneBannersProps> => {\n  const itemSaleChannels = bannerSaleChannels ? bannerSaleChannels : ''\n  if (itemSaleChannels.includes(saleChannel) || itemSaleChannels === ''){\n    return (\n      <Container justifyContent='center'>\n        <BigScreen>\n          <OnlyOneBannerImage\n            banner={banner}\n            isPriority={isPriority}\n            linkWrapper={linkWrapper}\n            nextImage={nextImage}\n            onRedirect={onRedirect}\n            promoData={promoData}\n            url={url}\n          />\n        </BigScreen>\n        <SmallScreen>\n          <OnlyOneBannerImage\n            banner={banner}\n            isPriority={isPriority}\n            linkWrapper={linkWrapper}\n            nextImage={nextImage}\n            onRedirect={onRedirect}\n            promoData={promoData}\n            url={url}\n          />\n        </SmallScreen>\n      </Container>\n    )\n  }\n  return null\n}","import { BigScreen, SmallScreen } from '../../../../helpers'\nimport { Picture } from '../../../atoms'\nimport { Column, Row } from '../../../layout'\nimport { BannerPictureProps, GridBannersProps } from '../GridBanners'\nimport styles from './OnlyThreeBanner.module.css'\n\nconst BannerPicture = ({\n  banner,\n  linkWrapper,\n  nextImage,\n  promoData\n}: BannerPictureProps) => {\n  return (\n    <Picture\n      anchor\n      catchImgRef={(ref) => {return promoData({ref, banner})}}\n      height='auto'\n      linkWrapper={linkWrapper}\n      nextImage={nextImage}\n      src={banner.img}\n      url={banner?.['url']}\n      width='100%'\n    />\n  )\n}\n\nexport const OnlyThreeBanner = ({\n  banners = [],\n  linkWrapper,\n  nextImage,\n  promoData\n}: GridBannersProps) => {\n  return (\n    <>\n      <BigScreen>\n        <Row padding='9px 10px 20px 10px'>\n          {banners?.map((banner, key) => {\n            return (\n              <Column\n                className={styles.desktop}\n                clickable='pointer'\n                key={key}\n                onClick={banner.onRedirect}\n                padding='0px 10px 0px 10px'\n              >\n                <BannerPicture\n                  banner={banner}\n                  linkWrapper={linkWrapper}\n                  nextImage={nextImage}\n                  promoData={promoData}\n                />\n              </Column>\n            )\n          })}\n        </Row>\n      </BigScreen>\n\n      <SmallScreen>\n        <Column padding={'0px 28px 8px 28px'}>\n          {banners?.map((banner, key) => {\n            return (\n              <Row\n                clickable='pointer'\n                height='min-content'\n                justifyContent='center'\n                key={key}\n                minWidth='245px'\n                onClick={banner.onRedirect}\n                padding={'0px 0px 24px 0px'}\n              >\n                <BannerPicture\n                  banner={banner}\n                  linkWrapper={linkWrapper}\n                  nextImage={nextImage}\n                  promoData={promoData}\n                />\n              </Row>\n            )\n          })}\n        </Column>\n      </SmallScreen>\n    </>\n  )\n}"],"names":[],"sourceRoot":""}