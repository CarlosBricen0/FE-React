{"version":3,"file":"stories_atoms_Button_Button_tsx.40f66dcf9be584c763ba.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AA6CA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AA3EA;AA6EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AACA;;;;;;;;;;;;;;;;;;AC7KA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://components/./stories/atoms/Button/Button.tsx","webpack://components/./stories/atoms/Icon/Icon.tsx"],"sourcesContent":["import classNames from 'classnames'\nimport React, { createElement, CSSProperties } from 'react'\nimport { Icons } from '../../../assets/SvgComponents/SvgIcons'\nimport { getGlobalStyle } from '../../../helpers'\nimport { Site } from '../../../shared/interfaces/Site'\nimport styles from './Button.module.css'\nimport { Icon } from '../Icon/Icon'\nimport { Text } from '../'\n\nexport type ButtonStatus = 'initial' | 'loading' | 'disabled' | 'disabled-red';\nexport type Type = 'primary' | 'secondary' | 'primary-ca' | 'secondary-ca' | 'sub-category' | 'plain' | 'semibold' | 'primary-alvi' | 'primary-out-hover' | 'primary-green' | 'secondary-green'\nexport type Size = 'xs' | 'small' | 'medium' | 'large' | 'sm' | 'md' | 'lg' | 'xl';\n\nexport interface ButtonProps {\n  actionType?: React.ButtonHTMLAttributes<HTMLButtonElement>['type'];\n  background?: string;\n  border?: CSSProperties['border'];\n  borderRadius?: string;\n  buttonRef?: React.Ref<HTMLButtonElement>;\n  color?: string;\n  customClassName?: string;\n  fontSize?: string;\n  fontWeight?: string;\n  fullWidth?: true | false;\n  height?: string;\n  id?: string;\n  label: string;\n  margin?: string;\n  maxWidth?: string;\n  minWidth?: string;\n  padding?: CSSProperties['padding'];\n  site?: Site;\n  size?: Size;\n  status?: ButtonStatus;\n  type?: Type;\n  underline?: typeof Text.arguments.underline;\n  width?: string;\n  iconName?: keyof (typeof Icons);\n  onClick?: () => void;\n  onMouseEnter?: () => void;\n  onMouseLeave?: () => void;\n}\n\ninterface LabelButtonProps {\n  color: string;\n  iconName?: keyof (typeof Icons);\n  customClassName?:string;\n  label: string;\n  status: string;\n}\n\nconst brandWhite = getGlobalStyle('--color-base-white')\n\nconst typeColors = {\n  primary: brandWhite,\n  secondary: getGlobalStyle('--color-primary-red'),\n  'primary-ca': brandWhite,\n  'secondary-ca': getGlobalStyle('--color-secondary-blue'),\n  'sub-category': brandWhite\n}\n\nconst typedColorsAlvi = {\n  'primary': brandWhite,\n  'secondary': getGlobalStyle('--color-neutral-gray-dark')\n}\n\nexport const Button = ({\n  actionType,\n  background,\n  border,\n  borderRadius,\n  buttonRef,\n  color,\n  customClassName,\n  fontSize,\n  fontWeight,\n  fullWidth = false,\n  height,\n  iconName,\n  id,\n  label,\n  margin,\n  maxWidth,\n  minWidth = '200px',\n  padding,\n  site = 'unimarc',\n  size = 'medium',\n  status = 'initial',\n  type = 'primary',\n  underline = 'none',\n  width = 'auto',\n  onClick,\n  onMouseEnter,\n  onMouseLeave\n}: ButtonProps): React.ReactElement<ButtonProps> => {\n\n  const classSite = site === 'alvi' ? styles[`button__alvi__${type}`] : ''\n  const fontColor = site === 'alvi' ? typedColorsAlvi[type] : typeColors[type]\n\n  return (\n    <button\n      aria-label={label}\n      className={classNames(styles.button, customClassName, classSite, {\n        [styles[`button__${type}`]]: type,\n        [styles[`button--${size}`]]: size,\n        [styles[`button--${status}`]]: status,\n        [styles[`button--${underline}`]]: underline,\n        [styles[`button--fullwidth`]]: fullWidth,\n        [styles[`button--icon`]]: iconName && status !== 'loading'\n      })}\n      disabled={status === 'disabled' || status === 'disabled-red' || status === 'loading'}\n      id={id}\n      onClick={onClick}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      ref={buttonRef}\n      style={{\n        background,\n        border,\n        borderRadius,\n        color,\n        fontSize,\n        fontWeight,\n        height,\n        margin,\n        maxWidth,\n        minWidth,\n        padding,\n        width\n      }}\n      type={actionType}\n    >\n      <GetLabelButton\n        color={fontColor}\n        customClassName={styles.icon}\n        iconName={iconName}\n        label={label}\n        status={status}\n      />\n    </button>\n  )\n}\n\nconst GetLabelButton = ({\n  color,\n  iconName,\n  label,\n  status\n}: LabelButtonProps): React.ReactElement => {\n  if (status === 'initial' || status === 'disabled' || status === 'disabled-red') {\n    if(iconName){\n      return (\n        <>\n          <label>{label}</label>\n          <Icon\n            clickable='pointer'\n            color='white'\n            customSize={20}\n            name={iconName}\n          />\n        </>\n      )\n    }\n    return <>{label}</>\n  }\n\n  return (createElement(getComponent(Icons)('Loading'), { color, sizemap: 22 }))\n}\n\nconst getComponent = <T, U extends keyof T>(obj: T) => {\n  return (\n    key: U\n  ) => { return obj[key] }\n}\n","import React, { createElement } from 'react'\nimport { Icons } from '../../../assets/SvgComponents/SvgIcons'\nimport { getGlobalStyle } from '../../../helpers'\nimport { Site } from '../../../shared/interfaces/Site'\n\nexport type SizeIcon = 'xs' | '2xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'\nexport interface IconProps {\n  clickable?: string;\n  color?: string;\n  customSize?: number;\n  name: keyof (typeof Icons);\n  site?: Site;\n  sizes?: SizeIcon;\n  strokeWidth?: string;\n  viewBox?: string;\n  onClick?: () => void;\n}\n\nconst iconSize = {\n  xs: 14,\n  '2xs': 20,\n  sm: 25,\n  md: 35,\n  lg: 50,\n  xl: 70,\n  '2xl': 80\n}\n\nexport const Icon = ({\n  clickable = 'auto',\n  color = getGlobalStyle('--color-icons-primary'),\n  customSize,\n  name = 'Error',\n  site = 'unimarc',\n  sizes = 'xs',\n  strokeWidth,\n  onClick,\n  ...props\n}: IconProps): React.ReactElement => {\n\n  const sizemap = customSize || iconSize[sizes]\n  const id = name\n  const role = name\n\n  return createElement(Icons[name], {\n    color,\n    id,\n    role,\n    site,\n    sizemap,\n    strokeWidth,\n    style: {\n      cursor: clickable\n    },\n    onClick,\n    ...props\n  })\n}"],"names":[],"sourceRoot":""}