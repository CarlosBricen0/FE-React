{"version":3,"file":"organisms-DeliverySelector-DeliverySelectorType-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;ACxIA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;ACvIA;AAEA;AACA;AAMA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;AC1GA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://components/./stories/organisms/DeliverySelector/Components/DeliverySelector/DeliverySelectorContent/index.tsx","webpack://components/./stories/organisms/DeliverySelector/Components/DeliverySelector/index.tsx","webpack://components/./stories/organisms/DeliverySelector/DeliverySelectorType.tsx","webpack://components/./stories/organisms/FailModal/helpers/ContentModal.tsx","webpack://components/./stories/organisms/FailModal/index.tsx","webpack://components/./stories/organisms/DeliverySelector/Components/DeliverySelector/DeliverySelector.module.css","webpack://components/./stories/organisms/DeliverySelector/Components/DeliverySelector/DeliverySelectorContent/DeliverySelectorContent.module.css","webpack://components/./stories/organisms/DeliverySelector/Components/DeliverySelector/DeliverySelector.module.css?f54d","webpack://components/./stories/organisms/DeliverySelector/Components/DeliverySelector/DeliverySelectorContent/DeliverySelectorContent.module.css?1418"],"sourcesContent":["import React from 'react'\nimport { getGlobalStyle } from '../../../../../../helpers'\nimport {\n  Button,\n  ButtonStatus,\n  Icon,\n  RadioSelector,\n  Text\n} from '../../../../../atoms'\nimport { Column, Container, Spacer } from '../../../../../layout'\nimport styles from './DeliverySelectorContent.module.css'\n\ninterface DeliverySelectorContentProps {\n  CACSelectorButtonStatus: ButtonStatus;\n  enabledDeliverySelector: boolean;\n  enabledStoreSelector: boolean;\n  activeDeliverySelector: () => void;\n  activeStoreSelector?: () => void;\n  cacSelectorButton: () => void;\n  closeDeliverySelector: () => void;\n}\n\nexport const DeliverySelectorContent = ({\n  CACSelectorButtonStatus,\n  enabledDeliverySelector,\n  enabledStoreSelector,\n  activeDeliverySelector,\n  activeStoreSelector,\n  cacSelectorButton,\n  closeDeliverySelector\n}: DeliverySelectorContentProps): React.ReactElement => {\n\n  return (\n    <>\n      <Container>\n        <Column>\n          <Container\n            absoluteDefault='topRight'\n            maxWidth='80px'\n            padding='32px'\n            position='absolute'\n          >\n            <Icon\n              clickable='pointer'\n              color={getGlobalStyle('--color-icons-black')}\n              customSize={18}\n              name='Close'\n              onClick={closeDeliverySelector}\n            />\n          </Container>\n\n          <Spacer.Horizontal size={32} />\n          <Text fontWeight='semibold'>¿Cómo quieres recibir tu compra?</Text>\n          <Spacer.Horizontal size={32} />\n\n          <Container\n            alignItems='center'\n            borderRadius={getGlobalStyle('--border-radius-md')}\n            clickable='pointer'\n            customClassName={styles.boxSelector}\n            justifyContent='between'\n            onClick={activeDeliverySelector}\n            padding='12px'\n          >\n            <Column\n              backgroundColor={getGlobalStyle('--color-background-gray-light')}\n              borderRadius='20px'\n              justifyContent='center'\n              maxWidth='50px'\n              padding='10px'\n            >\n              <Container margin='3px 0px -4px 3px'>\n                <Icon\n                  clickable='pointer'\n                  color={getGlobalStyle('--color-icons-gray')}\n                  customSize={30}\n                  name='Motorcycle'\n                />\n              </Container>\n            </Column>\n\n            <Column margin='0px 0px 0px 15px'>\n              <Text clickable='pointer' fontWeight='regular'>Despacho a domicilio</Text>\n            </Column>\n\n            <RadioSelector checked={enabledDeliverySelector} />\n          </Container>\n          <Spacer.Horizontal size={24} />\n          <Container\n            alignItems='center'\n            borderRadius='12px'\n            clickable='pointer'\n            customClassName={styles.boxSelector}\n            justifyContent='between'\n            onClick={activeStoreSelector}\n            padding='12px'\n          >\n            <Column\n              backgroundColor={getGlobalStyle('--color-background-gray-light')}\n              borderRadius={getGlobalStyle('--border-radius-lg')}\n              justifyContent='center'\n              maxWidth='50px'\n              padding='10px'\n            >\n              <Container >\n                <Icon\n                  clickable='pointer'\n                  color={getGlobalStyle('--color-icons-gray')}\n                  customSize={30}\n                  name='Shop'\n                />\n              </Container>\n            </Column>\n\n            <Column margin='0px 0px 0px 15px'>\n              <Text clickable='pointer' fontWeight='regular'>Retiro en tienda </Text>\n            </Column>\n\n            <RadioSelector checked={enabledStoreSelector} />\n          </Container>\n\n          <Spacer.Horizontal size={24} />\n          <Button\n            borderRadius='24px'\n            fontWeight={getGlobalStyle('--font-weight-semibold')}\n            label='Confirmar'\n            onClick={cacSelectorButton}\n            size='large'\n            status={CACSelectorButtonStatus}\n            width='100%'\n          />\n          <Spacer.Horizontal size={4} />\n        </Column>\n      </Container>\n    </>\n  )\n}\n","import {\n  Container,\n  Column,\n  Spacer\n} from '../../../../layout'\nimport { Modal } from '../../../../molecules'\nimport { SmallScreen, BigScreen } from '../../../../../helpers/mediaQueries'\nimport { DeliverySelectorContent } from './DeliverySelectorContent'\nimport { Overlay, ButtonStatus } from '../../../../atoms'\nimport styles from './DeliverySelector.module.css'\nimport { getGlobalStyle } from '../../../../../helpers'\n\ninterface DeliverySelectorProps {\n  CACSelectorButtonStatus: ButtonStatus;\n  enabledDeliverySelector: boolean;\n  enabledStoreSelector: boolean;\n  activeDeliverySelector: () => void;\n  activeStoreSelector?: () => void;\n  cacSelectorButton: () => void;\n  closeDeliverySelector: () => void;\n}\n\nexport const DeliverySelector = ({\n  CACSelectorButtonStatus,\n  enabledDeliverySelector,\n  enabledStoreSelector,\n  activeDeliverySelector,\n  activeStoreSelector,\n  cacSelectorButton,\n  closeDeliverySelector\n}: DeliverySelectorProps): React.ReactElement => {\n\n  const deliverySelectorContentProps = {\n    CACSelectorButtonStatus,\n    activeDeliverySelector,\n    activeStoreSelector,\n    cacSelectorButton,\n    closeDeliverySelector,\n    enabledDeliverySelector,\n    enabledStoreSelector\n  }\n\n  return (\n    <>\n      <BigScreen>\n        <Modal\n          hiddenX\n          isOpen\n          maxWidth='495px'\n          toggle={null}\n          toggleOutside={null}\n        >\n          <Spacer.Horizontal size={24} />\n          <DeliverySelectorContent {...deliverySelectorContentProps} />\n        </Modal>\n      </BigScreen>\n      <SmallScreen>\n        <Container\n          customHeight='100%'\n          position='fixed'\n          zIndex={getGlobalStyle('--z-index-20')}\n        >\n          <Overlay />\n          <Column\n            backgroundColor={getGlobalStyle('--color-base-white')}\n            borderRadius='16px 16px 0 0'\n            customClassName={styles.toFooter}\n            overflow='scroll'\n            padding='8px 14px'\n            position='fixed'\n            zIndex={getGlobalStyle('--z-index-30')}\n          >\n            <Spacer.Horizontal size={24} />\n            <DeliverySelectorContent {...deliverySelectorContentProps} />\n          </Column>\n        </Container>\n      </SmallScreen>\n    </>\n  )\n}\n","import { useCallback } from 'react'\nimport { DeliverySelector } from './Components/DeliverySelector'\nimport { ClickAndCollect } from '../ClickAndCollect/ClickAndCollect'\nimport { FailModal } from '../FailModal'\nimport { ButtonStatus } from '../../atoms'\nimport { TitleProps } from '../../atoms/Title/Title'\nimport { SimulationItem, SimulationModal } from '../SimulationModal/SimulationModal'\n\ninterface DeliverySelectorTypeProps {\n  CACSelectorButtonStatus: ButtonStatus;\n  comunaList: Array<string>;\n  comunaSelected?: string;\n  contentPosition: TitleProps['textAlign'];\n  enabledDeliverySelector: boolean;\n  enabledStoreSelector: boolean;\n  failModalButtonText: string;\n  failModalColorTitle: string;\n  failModalContent: string;\n  failModalIsOpen: boolean;\n  failModalTitle: string;\n  openDeliverySelector: boolean;\n  openStoreSelector: boolean;\n  regionList: Array<string>;\n  simulationItems?: SimulationItem[];\n  storeList: {\n    neighborhood: string;\n    formatedAddress: string;\n    selected: boolean;\n  }[];\n  storeSelectorButtonStatus: ButtonStatus;\n  titlePosition: TitleProps['textAlign'];\n  activeDeliverySelector: () => void;\n  activeStoreSelector?: () => void;\n  cacSelectorButton: () => void;\n  changeDeliveryMethod: () => void;\n  closeDeliverySelector: () => void;\n  closeStoreSelector?: () => void;\n  comunaSelector: (e?: React.ChangeEvent<HTMLSelectElement>) => void;\n  errorModal: () => void;\n  errorModalAction: () => void;\n  regionSelector: (e?: React.ChangeEvent<HTMLSelectElement>) => void;\n  storeSelector: (data:object, index:number) => void;\n  storeSelectorButton: (withSimulation?: false) => void;\n}\n\nexport const DeliverySelectorType = ({\n  CACSelectorButtonStatus,\n  comunaList,\n  comunaSelected,\n  contentPosition,\n  enabledDeliverySelector,\n  enabledStoreSelector,\n  failModalButtonText,\n  failModalColorTitle,\n  failModalContent,\n  failModalIsOpen,\n  failModalTitle,\n  openDeliverySelector,\n  openStoreSelector,\n  regionList,\n  simulationItems,\n  storeList,\n  storeSelectorButtonStatus,\n  titlePosition,\n  activeDeliverySelector,\n  activeStoreSelector,\n  cacSelectorButton,\n  changeDeliveryMethod,\n  closeDeliverySelector,\n  closeStoreSelector,\n  comunaSelector,\n  errorModal,\n  errorModalAction,\n  regionSelector,\n  storeSelector,\n  storeSelectorButton\n}: DeliverySelectorTypeProps): React.ReactElement => {\n  const simulationModalAction = useCallback(() => { return storeSelectorButton(false) }, [])\n\n  return (\n    <>\n      {\n        openDeliverySelector &&\n          <DeliverySelector\n            CACSelectorButtonStatus={CACSelectorButtonStatus}\n            activeDeliverySelector={activeDeliverySelector}\n            activeStoreSelector={activeStoreSelector}\n            cacSelectorButton={cacSelectorButton}\n            closeDeliverySelector={closeDeliverySelector}\n            enabledDeliverySelector={enabledDeliverySelector}\n            enabledStoreSelector={enabledStoreSelector}\n          />\n      }\n      {\n        simulationItems?.length > 0 &&\n          <SimulationModal\n            action={simulationModalAction}\n            buttonStatus={storeSelectorButtonStatus}\n            handleKeepAddress={closeStoreSelector}\n            items={simulationItems}\n            labelPrimary='No, dejar la actual'\n            labelSecondary='Si, quiero cambiarla'\n          />\n      }\n      {\n        failModalIsOpen &&\n          <FailModal\n            action={errorModalAction}\n            buttonText={failModalButtonText}\n            colorTitle={failModalColorTitle}\n            content={failModalContent}\n            contentPosition={contentPosition}\n            onClick={errorModal}\n            title={failModalTitle}\n            titlePosition={titlePosition}\n          />\n      }\n      {\n        openStoreSelector &&\n          <ClickAndCollect\n            changeDeliveryMethod={changeDeliveryMethod}\n            closeStoreSelector={closeStoreSelector}\n            comunaList={comunaList}\n            comunaSelected={comunaSelected}\n            comunaSelector={comunaSelector}\n            regionList={regionList}\n            regionSelector={regionSelector}\n            storeList={storeList}\n            storeSelector={storeSelector}\n            storeSelectorButton={storeSelectorButton}\n            storeSelectorButtonStatus={storeSelectorButtonStatus}\n          />\n      }\n    </>\n  )\n}","import React from 'react'\nimport { FailModalProps } from '..'\nimport { getGlobalStyle } from '../../../../helpers'\nimport {\n  Button,\n  Icon,\n  Text,\n  Title\n} from '../../../atoms'\nimport { Container, Spacer } from '../../../layout'\n\nconst ContentModal = ({\n  alviSite,\n  backgroundColor,\n  boldButton,\n  buttonStatus,\n  buttonText,\n  buttonWidth,\n  content,\n  contentColor,\n  contentPosition,\n  labelSecondary,\n  showButton = true,\n  sizeTitle,\n  title,\n  titleColor,\n  titlePosition,\n  unimarcSite,\n  action,\n  handleKeepAddress,\n  onClick\n}: FailModalProps) => {\n  const containerPadding = unimarcSite ? '0px 4px' : ''\n  const btnColor = getGlobalStyle(alviSite ? '--color-alvi-primary-blue' : '--color-primary-red')\n\n  return (\n    <>\n      <Spacer.Horizontal size={32} />\n      <Container padding={containerPadding}>\n        <Title\n          backgroundColor={null}\n          color={titleColor}\n          customFontSize={sizeTitle}\n          fontWeight='semibold'\n          headingLevel='h5'\n          text={title}\n          textAlign={titlePosition}\n        />\n      </Container>\n      {alviSite && (\n        <Container\n          absoluteDefault='topRight'\n          justifyContent='center'\n          maxWidth='80px'\n          padding='20px 0 0 0'\n          position='absolute'\n        >\n          <Icon\n            clickable='pointer'\n            color={getGlobalStyle('--color-icons-gray')}\n            customSize={18}\n            name='Close'\n            onClick={onClick}\n          />\n        </Container>\n      )}\n      <Spacer.Horizontal size={24} />\n      <Container padding={containerPadding}>\n        <Text\n          color={contentColor}\n          fontSize='lg'\n          fontWeight='regular'\n          textAlign={contentPosition}\n        >\n          {content}\n        </Text>\n      </Container>\n      <Spacer.Horizontal size={24} />\n      <Button\n        background={backgroundColor}\n        borderRadius='24px'\n        fontWeight={boldButton}\n        label={buttonText}\n        onClick={action}\n        size='large'\n        status={alviSite ? buttonStatus : 'initial'}\n        width={buttonWidth}\n      />\n      {showButton && (\n        <Button\n          background='transparent'\n          border={`1px solid ${btnColor}`}\n          borderRadius='24px'\n          color={btnColor}\n          fontWeight={boldButton}\n          label={labelSecondary}\n          margin='12px 0 0 0'\n          onClick={handleKeepAddress || onClick}\n          size='large'\n          type='secondary'\n          width={buttonWidth}\n        />\n      )}\n    </>\n  )\n}\n\nexport default ContentModal","import { ButtonStatus, Color } from '../../atoms'\nimport { Modal } from '../../molecules'\nimport { BigScreen, SmallScreen } from '../../../helpers/mediaQueries'\nimport { getGlobalStyle } from '../../../helpers'\nimport { TitleProps } from '../../atoms/Title/Title'\nimport ContentModal from './helpers/ContentModal'\nimport { Site } from '../../../shared/interfaces/Site'\nimport { DataResponseCart } from '../ModalWithoutStock/ModalWithoutStock'\n\nexport interface FailModalProps {\n  alviSite?: boolean;\n  arrFail?: DataResponseCart;\n  backgroundColor?: string;\n  boldButton?: string;\n  buttonStatus?: ButtonStatus;\n  buttonText?: string;\n  buttonWidth?: string;\n  colorTitle?: string;\n  content?: string;\n  contentColor?: Color;\n  contentPosition?: TitleProps['textAlign'];\n  isOpen?: boolean;\n  isOpenModalOutStock?: boolean;\n  labelSecondary?: string;\n  showButton?: boolean;\n  site?: Site;\n  sizeTitle?: string;\n  title?: string;\n  titleColor?: string;\n  titlePosition?: TitleProps['textAlign'];\n  unimarcSite?: boolean;\n  action?: () => void;\n  handleKeepAddress?: () => void;\n  handleModal?: () => void;\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n  onClick?: () => void;\n  saveAddress?: () => void;\n}\n\nexport const FailModal = ({\n  buttonStatus,\n  buttonText,\n  colorTitle,\n  content,\n  contentPosition,\n  isOpen = true,\n  labelSecondary = 'Conservar mi dirección',\n  showButton,\n  site = 'unimarc',\n  title,\n  titlePosition,\n  action,\n  handleKeepAddress,\n  handleModal = () => { return },\n  onClick\n}: FailModalProps): React.ReactElement => {\n  const unimarcSite = site === 'unimarc'\n  const alviSite = site === 'alvi'\n  const backgroundColor = getGlobalStyle(unimarcSite ? '--color-primary-red-header' : '--color-alvi-primary-blue-gradient')\n  const boldButton = getGlobalStyle(unimarcSite ? '--font-weight-bold' : '--font-weight-semibold')\n  const buttonWidth = unimarcSite ? '100%' : '280px'\n  const contentColor = unimarcSite ? 'black' : 'neutral-alvi'\n  const sizeTitle = getGlobalStyle(unimarcSite ? '--font-size-titles-xs' : '--font-size-titles-sm')\n  const titleColor = colorTitle ? colorTitle : getGlobalStyle('--color-base-black')\n  const widthContentModal = '328px'\n  const heightButton = showButton ? '346px' : '280px'\n  const minHeightModal: string = alviSite ? heightButton : 'initial'\n\n  const contentModalProps = {\n    alviSite,\n    backgroundColor,\n    boldButton,\n    buttonStatus,\n    buttonText,\n    buttonWidth,\n    colorTitle,\n    content,\n    contentColor: contentColor as Color,\n    contentPosition,\n    isOpen: true,\n    labelSecondary,\n    showButton,\n    site,\n    sizeTitle,\n    title,\n    titleColor,\n    titlePosition,\n    unimarcSite,\n    widthContentModal,\n    action,\n    handleKeepAddress,\n    handleModal: () => { return },\n    onClick\n  }\n  const contentModalPropsMobile = {\n    ...contentModalProps,\n    buttonText: 'Cambiar dirección',\n    labelSecondary: labelSecondary\n  }\n  return (\n    <>\n      <BigScreen>\n        <Modal\n          errorModal={true}\n          hiddenX\n          isOpen={isOpen}\n          maxWidth={widthContentModal}\n          minHeight={minHeightModal}\n          site={site}\n          toggle={() => { return }}\n          toggleOutside={handleModal}\n        >\n          <ContentModal {...contentModalProps} />\n        </Modal>\n      </BigScreen>\n\n      <SmallScreen>\n        <Modal\n          errorModal={true}\n          hiddenX\n          isOpen={isOpen}\n          maxWidth={widthContentModal}\n          minHeight={minHeightModal}\n          site={site}\n          toggle={null}\n          toggleOutside={handleModal}\n        >\n          <ContentModal {...contentModalPropsMobile} />\n        </Modal>\n      </SmallScreen>\n    </>\n  )\n}","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".DTa8245c16lMMK0AGLU_{\\n    bottom:0;\\n    top:initial;\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./stories/organisms/DeliverySelector/Components/DeliverySelector/DeliverySelector.module.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,QAAQ;IACR,WAAW;AACf\",\"sourcesContent\":[\".toFooter{\\n    bottom:0;\\n    top:initial;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"toFooter\": \"DTa8245c16lMMK0AGLU_\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".XyFWth70DOftjtyHyirr {\\n  box-shadow: var(--box-shadow-xl);\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./stories/organisms/DeliverySelector/Components/DeliverySelector/DeliverySelectorContent/DeliverySelectorContent.module.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,gCAAgC;AAClC\",\"sourcesContent\":[\".boxSelector {\\n  box-shadow: var(--box-shadow-xl);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"boxSelector\": \"XyFWth70DOftjtyHyirr\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./DeliverySelector.module.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n  var p;\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      continue;\n    }\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      continue;\n    }\n    if (!a[p]) {\n      return false;\n    }\n  }\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./DeliverySelector.module.css\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./DeliverySelector.module.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\n      import API from \"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./DeliverySelectorContent.module.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n  var p;\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      continue;\n    }\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      continue;\n    }\n    if (!a[p]) {\n      return false;\n    }\n  }\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./DeliverySelectorContent.module.css\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./DeliverySelectorContent.module.css\";\n       export default content && content.locals ? content.locals : undefined;\n"],"names":[],"sourceRoot":""}