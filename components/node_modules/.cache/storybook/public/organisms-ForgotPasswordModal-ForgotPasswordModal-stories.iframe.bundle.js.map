{"version":3,"file":"organisms-ForgotPasswordModal-ForgotPasswordModal-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAKA;AAKA;AAQA;AAKA;AAEA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;AC1OA;AACA;AACA;AACA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AAGA;AApCA;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AAKA;AASA;AAKA;AAEA;AAAA;AAAA;AAgBA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAEA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AA7RA;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://components/./stories/organisms/ForgotPasswordModal/DeliveryMediumStep/DeliveryMediumStep.tsx","webpack://components/./stories/organisms/ForgotPasswordModal/ResetPasswordStep/PasswordRequirementIndicator/PasswordRequerimentIndicator.tsx","webpack://components/./stories/organisms/ForgotPasswordModal/ResetPasswordStep/ResetPasswordStep.tsx","webpack://components/./utils/formatRut.ts","webpack://components/./stories/organisms/ForgotPasswordModal/DeliveryMediumStep/DeliveryMediumStep.module.css","webpack://components/./stories/organisms/ForgotPasswordModal/DeliveryMediumStep/DeliveryMediumStep.module.css?6988"],"sourcesContent":["import { useMemo, useState } from 'react'\nimport {\n  BigScreen,\n  getGlobalStyle,\n  SmallScreen\n} from '../../../../helpers'\nimport {\n  cleanRut,\n  formatRut,\n  validateRut\n} from '../../../../utils/formatRut'\nimport {\n  Button,\n  ButtonStatus,\n  Icon,\n  Picture,\n  Text,\n  Title\n} from '../../../atoms'\nimport {\n  Column,\n  Container,\n  Row\n} from '../../../layout'\nimport { InputAdornment, Notification } from '../../../molecules'\nimport { CommonStepProps, ForgotPasswordStep } from '../ForgotPasswordModal'\nimport styles from './DeliveryMediumStep.module.css'\n\nexport interface DeliveryMediumStepProps extends CommonStepProps<ForgotPasswordStep.DeliveryMedium> {\n  error?: React.ReactNode;\n  imageSrc?: string;\n  loading?: boolean;\n  text?: React.ReactNode;\n  title?: string;\n  onSubmit: (rut: string, deliveryMedium: string) => void\n}\n\nconst getButtonStatus = (isValidRut: boolean, loading: boolean) : ButtonStatus => {\n  if (loading) return 'loading'\n  if (isValidRut) return 'initial'\n  return 'disabled'\n}\n\nexport const DeliveryMediumStep = ({\n  error,\n  imageSrc,\n  loading,\n  site,\n  text,\n  title,\n  onBack,\n  onSubmit\n}: DeliveryMediumStepProps) : React.ReactElement<DeliveryMediumStepProps> => {\n  const [rut, setRut] = useState('')\n\n  const handleSubmit = (deliveryMedium: 'EMAIL' | 'SMS') => {\n    onSubmit?.(rut, deliveryMedium)\n  }\n\n  const handleSubmitEmail = (e?: React.FormEvent) => {\n    e?.preventDefault()\n    handleSubmit('EMAIL')\n  }\n\n  const handleSubmitSMS = () => {\n    handleSubmit('SMS')\n  }\n\n  const handleBlurRut = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setRut(formatRut(e.target.value))\n  }\n\n  const handleChangeRut = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setRut(e.target.value)\n  }\n\n  const isValidRut = useMemo(() => {\n    return validateRut(cleanRut(rut))\n  }, [rut])\n\n  const buttonStatus = getButtonStatus(isValidRut, loading)\n\n  return (\n    <>\n      <Row onSubmit={handleSubmitEmail} tagName='form'>\n        <BigScreen>\n          <Column>\n            <Container className={styles['imageContainer']}>\n              <Picture\n                alt='delivery-medium-image'\n                className={styles['imageContainer__image']}\n                height='497px'\n                src={imageSrc}\n                width='395px'\n              />\n            </Container>\n          </Column>\n        </BigScreen>\n        <Container\n          position='relative'\n        >\n          <Container\n            position='absolute'\n          >\n            <Icon\n              clickable='pointer'\n              color={getGlobalStyle('--color-alvi-neutral-gray-dark')}\n              name='ArrowBackNavigate'\n              onClick={onBack}\n              sizes='xs'\n            />\n          </Container>\n          <Column className={styles['container']} position='relative'>\n            <Notification\n              align='top-center'\n              message={error}\n              show={error != undefined}\n              site={site}\n            />\n            <SmallScreen>\n              <Title\n                customFontSize='18px'\n                fontWeight='semibold'\n                headingLevel='h1'\n                text={title}\n              />\n            </SmallScreen>\n            <BigScreen>\n              <Title\n                customFontSize='24px'\n                fontWeight='semibold'\n                headingLevel='h1'\n                text={title}\n              />\n            </BigScreen>\n            <BigScreen>\n              <Container margin='8px 0 0 0'>\n                <Text\n                  fontSize='md'\n                  isFlex={false}\n                  type='span'\n                >\n                  {text}\n                </Text>\n              </Container>\n            </BigScreen>\n            <SmallScreen>\n              <Container margin='16px 0 0 0'>\n                <Text\n                  fontSize='md'\n                  isFlex={false}\n                  type='span'\n                >\n                  {text}\n                </Text>\n              </Container>\n            </SmallScreen>\n\n            <Container className={styles.formContainer} margin='20px 0 0 0'>\n              <Row margin='0px 0px 8px 0'>\n                <Text\n                  fontSize='sm'\n                  fontWeight='bold'\n                  htmlFor='rut'\n                  type='label'\n                >\n                  Rut\n                </Text>\n              </Row>\n              <InputAdornment\n                customClassName={styles['input--hideAutocomplete']}\n                id='rut'\n                inputAdornmentEnd={\n                  (!isValidRut && rut) && <Icon color={getGlobalStyle('--color-primary-red2')} name='Close' />\n                }\n                name='rut'\n                onBlur={handleBlurRut}\n                onChange={handleChangeRut}\n                placeholder='Ingresa tu número de rut'\n                required\n                textAlign='left'\n                value={rut}\n                width='100%'\n              />\n            </Container>\n            <Row visibility={!isValidRut && rut ? 'visible' : 'hidden'}>\n              <Text color='error'>\n                Ingresa un Rut válido \n              </Text>\n            </Row>\n            <BigScreen>\n              <Container margin='128px 0 0 0'>\n                <Text>\n                  Quiero recibirla via\n                </Text>\n              </Container>\n            </BigScreen>\n            <SmallScreen>\n              <Container margin='56px 0 0 0'>\n                <Text fontSize='md'>\n                  Quiero recibirla via\n                </Text>\n              </Container>\n            </SmallScreen>\n            <Container margin='16px 0 0 0'>\n              <Button\n                actionType='button'\n                borderRadius='2rem'\n                label='Correo electrónico'\n                onClick={handleSubmitEmail}\n                site={site}\n                size='large'\n                status={buttonStatus}\n                width='100%'\n              />\n            </Container>\n            <Container margin='8px 0 0 0'>\n              <Button \n                actionType='button'\n                borderRadius='2rem'\n                label='Mensaje de texto'\n                onClick={handleSubmitSMS}\n                site={site}\n                size='large'\n                status={buttonStatus}\n                type='secondary'\n                width='100%'\n              />\n            </Container>\n          </Column>\n        </Container>\n      </Row>\n    </>\n  )\n}","import { useEffect, useRef, useState } from 'react'\nimport { getGlobalStyle } from '../../../../../helpers'\nimport { Text } from '../../../../atoms'\nimport { Container, Row } from '../../../../layout'\nimport { BaseContainerProps } from '../../../../layout/BaseContainer/BaseContainer'\n\nexport interface PasswordRequerimentIndicatorProps extends Omit<BaseContainerProps, 'ref'> {\n  isValid?: boolean\n  label?: string\n}\n\nconst getDotColor = (isValid: boolean, isFirstRender: boolean) => {\n  if (isFirstRender) return getGlobalStyle('--color-neutral-dusty-gray')\n  if (isValid) return getGlobalStyle('--color-feedback-success-dark')\n  return getGlobalStyle('--color-feedback-error-dark')\n}\n\nexport const PasswordRequerimentIndicator = ({\n  isValid,\n  label,\n  ...props\n}: PasswordRequerimentIndicatorProps) => {\n  const isFirstRender = useRef(true)\n  const [dotColor, setDotColor] = useState<string>() \n\n  useEffect(() => {\n    // only change color when `isValid` changes\n    setDotColor(getDotColor(isValid, isFirstRender.current))\n    isFirstRender.current = false\n  }, [isValid])\n\n  return (\n    <Row\n      alignItems='center'\n      gap={5}\n      padding={'7px 0 0 0'}\n      width={'50%'}\n      {...props}\n    >\n      <Container \n        backgroundColor={dotColor}\n        borderRadius='100%'\n        customHeight='7px'\n        width='7px'\n      />\n      <Text\n        customColor={dotColor}\n        fontSize='xs'\n      >\n        {label}\n      </Text>\n    </Row>\n  )\n}","import React, { useMemo, useState } from 'react'\nimport {\n  BigScreen,\n  getGlobalStyle,\n  SmallScreen\n} from '../../../../helpers'\nimport {\n  Button,\n  ButtonStatus,\n  Divider,\n  Icon,\n  Picture,\n  Text,\n  Title\n} from '../../../atoms'\nimport {\n  Column,\n  Container,\n  Row\n} from '../../../layout'\nimport { Notification, PasswordInput } from '../../../molecules'\nimport { CommonStepProps, ForgotPasswordStep } from '../ForgotPasswordModal'\nimport { PasswordRequerimentIndicator } from './PasswordRequirementIndicator/PasswordRequerimentIndicator'\n\nexport interface ResetPasswordStepProps extends CommonStepProps<ForgotPasswordStep.ResetPassword> {\n  error?: React.ReactNode;\n  imageSrc?: string;\n  loading?: boolean;\n  text?: string;\n  title?: string;\n  onSubmit?: (password: string) => void;\n}\n\nexport interface PasswordRequerimentIndicatorItem {\n  label: string\n  validate: (password: string) => boolean\n}\n\nconst PASSWORD_REQUERIMENTS : PasswordRequerimentIndicatorItem[] = [\n  {\n    label: '1 minúscula (a-z)',\n    validate: (password) => {return password !== password.toUpperCase()}\n  },\n  {\n    label: '1 caracter especial (Ej: *·#%)',\n    validate: (password) => {return !!password.match(/[^a-zA-Z0-9]/)}\n  },\n  {\n    label: '1 número (0-9)',\n    validate: (password) => {return !!password.match(/\\d/)}\n  },\n  {\n    label: '1 mayúscula (A-Z)',\n    validate: (password) => {return !!password.match(/[A-Z]/)}\n  },\n  {\n    label: 'Mínimo 8 carácteres',\n    validate: (password) => {return password.length >= 8}\n  }\n]\n\nconst getButtonStatus = (loading: boolean, canContinue: boolean) : ButtonStatus => {\n  if (loading) return 'loading'\n  if (!canContinue) return 'disabled'\n  return 'initial'\n}\n\nexport const ResetPasswordStep = ({\n  error,\n  imageSrc,\n  loading,\n  site,\n  text,\n  title,\n  onBack,\n  onSubmit\n} : ResetPasswordStepProps) : React.ReactElement<ResetPasswordStepProps> => {\n  const [formState, setFormState] = useState({\n    password: '',\n    repeatPassword: ''\n  })\n  const isSamePassword = formState.password === formState.repeatPassword\n\n  const handleSubmit = (e?: React.FormEvent) => {\n    e?.preventDefault()\n    onSubmit?.(formState.password)\n  }\n\n  const handleChangePassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormState({\n      ...formState,\n      password: e.target.value\n    })\n  }\n\n  const handleChangeRepeatPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormState({\n      ...formState,\n      repeatPassword: e.target.value\n    })\n  }\n\n  const requirements = useMemo(() => {\n    return PASSWORD_REQUERIMENTS.map(requirement => {\n      return {\n        ...requirement,\n        isValid: requirement.validate(formState.password)\n      }\n    })\n  }, [formState.password])\n\n  const canContinue = useMemo(() => {\n    return requirements.every(requirement => {return requirement.isValid}) && isSamePassword\n  }, [requirements, isSamePassword])\n\n  const buttonStatus = getButtonStatus(loading, canContinue)\n\n  return (\n    <Column onSubmit={handleSubmit} tagName='form'>\n      <BigScreen>\n        <Row>\n          <Column>\n            <Container margin='-20px 0px -20px -20px'>\n              <Picture\n                alt='forgot-password-image'\n                height='497px'\n                objectFit='cover'\n                src={imageSrc}\n                width='395px'\n              />\n            </Container>\n          </Column>\n          <Column padding='24px 20px 0 40px' position='relative'>\n            <Notification \n              align='top-center'\n              message={error}\n              show={error != undefined}\n              site={site}\n            />\n            <Container\n              margin='0 0 0 30px'\n              position='absolute'\n            >\n              <Icon\n                clickable='pointer'\n                color={getGlobalStyle('--color-alvi-neutral-gray-dark')}\n                name='ArrowBackNavigate'\n                onClick={onBack}\n                sizes='xs'\n              />\n            </Container>\n            <Row justifyContent='start'>\n              <Title\n                customFontSize='24px'\n                fontWeight='bold'\n                text={title}\n              />\n            </Row>\n            <Row\n              justifyContent='start'\n              margin='12px 0 0 0'\n            >\n              <Container width={'100%'}>\n                <Text fontSize='md' textAlign='left'>\n                  {text}\n                </Text>\n              </Container>\n            </Row>\n\n            <Row justifyContent='start' margin='20px 0 0 0'>\n              <Column width={'100%'}>\n                <Row margin='0 0 9px 0'>\n                  <Text\n                    fontSize='md'\n                    fontWeight='semibold'\n                    htmlFor='password'\n                    type='label'\n                  >\n                    Nueva contraseña\n                  </Text>\n                </Row>\n                <PasswordInput \n                  id='password'\n                  onChange={handleChangePassword}\n                  placeholder='Ingresa tu nueva contraseña'\n                />\n                <Divider color={getGlobalStyle('--color-neutral-gray')} verticalMargin={4} />\n              </Column>\n            </Row>\n            <Column\n              justifyContent='start'\n              margin='12px 0 0 0'\n              width={'100%'}\n            >\n              <Text fontSize='sm'>Debes usar al menos:</Text>\n              <Row\n                isWrap\n              >\n                {requirements.map(({label, isValid}, index) => {return (\n                  <PasswordRequerimentIndicator\n                    isValid={isValid}\n                    key={index}\n                    label={label}\n                  />\n                )})}\n              </Row>\n            </Column>\n            <Row justifyContent='start' margin='8px 0 0 0'>\n              <Column width={'100%'}>\n                <Row margin='0 0 9px 0'>\n                  <Text\n                    fontSize='md'\n                    fontWeight='semibold'\n                    htmlFor='r-password'\n                    type='label'\n                  >\n                    Contraseña\n                  </Text>\n                </Row>\n                <PasswordInput \n                  id='r-password'\n                  onChange={handleChangeRepeatPassword}\n                  placeholder='Ingresa tu contraseña'\n                />\n                <Divider color={getGlobalStyle('--color-neutral-gray')} verticalMargin={4} />\n                <Row visibility={isSamePassword ? 'hidden' : 'visible'}>\n                  <Text fontSize='md'>\n                    Las contraseñas deben coincidir\n                  </Text>\n                </Row>\n              </Column>\n            </Row>\n            <Row justifyContent='start' margin='60px 0 0 0'>\n              <Button\n                actionType='submit'\n                borderRadius='2rem'\n                label='Confirmar nueva contraseña'\n                site={site}\n                size='large'\n                status={buttonStatus}\n                width='100%'\n              />\n            </Row>\n          </Column>\n        </Row>\n      </BigScreen>\n      <SmallScreen>\n        <Column padding='48px 16px 0 16px' position='relative'>\n          <Notification \n            align='top-center'\n            message={error}\n            show={error != undefined}\n          />\n          <Container\n            position='absolute'\n          >\n            <Icon\n              clickable='pointer'\n              color={getGlobalStyle('--color-alvi-neutral-gray-dark')}\n              name='ArrowBackNavigate'\n              onClick={onBack}\n              sizes='xs'\n            />\n          </Container>\n\n          <Row justifyContent='start'>\n            <Title\n              customFontSize='18px'\n              fontWeight='bold'\n              text={title}\n            />\n          </Row>\n          <Row\n            justifyContent='start'\n            margin='12px 0 0 0'\n          >\n            <Container width={'100%'}>\n              <Text fontSize='md' textAlign='left'>\n                {text}\n              </Text>\n            </Container>\n          </Row>\n\n          <Row justifyContent='start' margin='28px 0 0 0'>\n            <Column width={'100%'}>\n              <Row margin='0 0 10px 0'>\n                <Text\n                  fontWeight='bold'\n                  htmlFor='password'\n                  type='label'\n                >\n                  Nueva contraseña\n                </Text>\n              </Row>\n              <PasswordInput \n                id='password'\n                onChange={handleChangePassword}\n                placeholder='Ingresa tu nueva contraseña'\n              />\n              <Divider color={getGlobalStyle('--color-neutral-gray')} verticalMargin={4} />\n            </Column>\n          </Row>\n          <Column\n            justifyContent='start'\n            width={'100%'}\n          >\n            <Text fontSize='sm'>Debes usar al menos:</Text>\n            <Column>\n              {requirements.map(({label, isValid}, index) => {return (\n                <PasswordRequerimentIndicator\n                  isValid={isValid}\n                  key={index}\n                  label={label}\n                  width={'100%'}\n                />\n              )})}\n            </Column>\n          </Column>\n          <Row justifyContent='center' margin='28px 0 0 0'>\n            <Column width={'100%'}>\n              <Row margin='0 0 10px 0'>\n                <Text\n                  fontWeight='bold'\n                  htmlFor='r-password'\n                  type='label'\n                >\n                  Contraseña\n                </Text>\n              </Row>\n              <PasswordInput \n                id='r-password'\n                onChange={handleChangeRepeatPassword}\n                placeholder='Ingresa tu contraseña'\n              />\n              <Divider color={getGlobalStyle('--color-neutral-gray')} verticalMargin={4} />\n            </Column>\n          </Row>\n          <Row justifyContent='center' margin='35px 0'>\n            <Button\n              actionType='submit'\n              borderRadius='2rem'\n              label='Confirmar nueva contraseña'\n              site={site}\n              size='large'\n              status={buttonStatus}\n              width='100%'\n            />\n          </Row>\n        </Column>\n      </SmallScreen>\n    </Column>\n  )\n}","export function cleanRut(rut: string): string {\n  return typeof rut === 'string' ? rut.replace(/(^(0+|[^0-9kK]+))|\\.|-/g, '').toUpperCase() : ''\n}\n\nexport function formatRut(rut: string): string {\n  rut = cleanRut(rut)\n  if (rut.length === 0) {\n    return ''\n  }\n  let result = rut.slice(-4, -1) + '-' + rut.slice(rut.length - 1)\n  for (let i = 4; i < rut.length; i += 3) {\n    result = rut.slice(-3 - i, -i) + '.' + result\n  }\n  return result\n}\n\n/**\n * validates a chilean rut\n */\n\nexport function validateRut(rut: string): boolean {\n  rut = cleanRut(rut)\n  if (rut.length === 0) {\n    return false\n  }\n  const dv = rut.slice(-1).toUpperCase()\n  const rutNumber = rut.slice(0, -1)\n  const rutNumberArray = rutNumber.split('').reverse()\n  let sum = 0\n  for (let i = 0; i < rutNumberArray.length; i++) {\n    sum += parseInt(rutNumberArray[i], 10) * (i % 6 + 2)\n  }\n  const dvCalculated = 11 - sum % 11\n  if (dvCalculated === 11) {\n    return dv === '0'\n  }\n  if (dvCalculated === 10) {\n    return dv === 'K'\n  }\n  return dv === dvCalculated.toString()\n}","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".R10vvsUE5QR0K4bcuvra {\\n  width: 100%;\\n  border-bottom: 1px solid var(--color-neutral-gray);\\n}\\n\\n.lnrrYNOBVYq0eeE6oBp8 {\\n  margin-top: var(--spacing-sm);\\n}\\n\\n.DVmzy89fy2cDcz2Csm10 {\\n  color: var(--color-neutral-dark);\\n  font-size: var(--font-size-md);\\n  display: block;\\n}\\n\\n.N3EuPjAeiOpzZWmYbKel {\\n  margin-top: var(--spacing-xl);\\n  font-size: var(--font-size-lg);\\n  text-align: center;\\n  width: 100%;\\n}\\n\\n.UUzLrkM829XNqHvNQ9q7 {\\n  color: var(--color-text-primary);\\n}\\n\\n.M_RcCCvvHUPZltUWUvc_ {\\n  margin: -20px 0px -20px -20px;\\n}\\n\\n.gpYPqYRPTPVLdNn8rfmX {\\n  margin: 20px 32px 0 32px;\\n}\\n\\n.SvS3tYPgRoWDUBEdXkg2 {\\n  object-fit: cover;\\n}\\n\\n.zUFuBGg0CUgmE3MAHdWa {\\n  overflow: hidden;\\n}\\n\\n.UKCvbkwKqnDroS8iYKJ8:-webkit-autofill,\\n.UKCvbkwKqnDroS8iYKJ8:-webkit-autofill:hover,\\n.UKCvbkwKqnDroS8iYKJ8:-webkit-autofill:focus {\\n  -webkit-box-shadow: 0 0 0px 1000px var(--color-base-white) inset !important;\\n  box-shadow: 0 0 0px 1000px var(--color-base-white) inset !important;\\n}\\n\\n/* small only */\\n@media screen and (max-width: 39.9375em) {\\n  .gpYPqYRPTPVLdNn8rfmX {\\n    margin: 2.5rem 1rem 0 1rem;\\n  }\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./stories/organisms/ForgotPasswordModal/DeliveryMediumStep/DeliveryMediumStep.module.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,WAAW;EACX,kDAAkD;AACpD;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,gCAAgC;EAChC,8BAA8B;EAC9B,cAAc;AAChB;;AAEA;EACE,6BAA6B;EAC7B,8BAA8B;EAC9B,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE,gCAAgC;AAClC;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;;;EAGE,2EAA2E;EAC3E,mEAAmE;AACrE;;AAEA,eAAe;AACf;EACE;IACE,0BAA0B;EAC5B;AACF\",\"sourcesContent\":[\".formGroup {\\n  width: 100%;\\n  border-bottom: 1px solid var(--color-neutral-gray);\\n}\\n\\n.formGroup__input {\\n  margin-top: var(--spacing-sm);\\n}\\n\\n.forgotPassword {\\n  color: var(--color-neutral-dark);\\n  font-size: var(--font-size-md);\\n  display: block;\\n}\\n\\n.register {\\n  margin-top: var(--spacing-xl);\\n  font-size: var(--font-size-lg);\\n  text-align: center;\\n  width: 100%;\\n}\\n\\n.register__link {\\n  color: var(--color-text-primary);\\n}\\n\\n.imageContainer {\\n  margin: -20px 0px -20px -20px;\\n}\\n\\n.container {\\n  margin: 20px 32px 0 32px;\\n}\\n\\n.imageContainer__image {\\n  object-fit: cover;\\n}\\n\\n.modal {\\n  overflow: hidden;\\n}\\n\\n.input--hideAutocomplete:-webkit-autofill,\\n.input--hideAutocomplete:-webkit-autofill:hover,\\n.input--hideAutocomplete:-webkit-autofill:focus {\\n  -webkit-box-shadow: 0 0 0px 1000px var(--color-base-white) inset !important;\\n  box-shadow: 0 0 0px 1000px var(--color-base-white) inset !important;\\n}\\n\\n/* small only */\\n@media screen and (max-width: 39.9375em) {\\n  .container {\\n    margin: 2.5rem 1rem 0 1rem;\\n  }\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"formGroup\": \"R10vvsUE5QR0K4bcuvra\",\n\t\"formGroup__input\": \"lnrrYNOBVYq0eeE6oBp8\",\n\t\"forgotPassword\": \"DVmzy89fy2cDcz2Csm10\",\n\t\"register\": \"N3EuPjAeiOpzZWmYbKel\",\n\t\"register__link\": \"UUzLrkM829XNqHvNQ9q7\",\n\t\"imageContainer\": \"M_RcCCvvHUPZltUWUvc_\",\n\t\"container\": \"gpYPqYRPTPVLdNn8rfmX\",\n\t\"imageContainer__image\": \"SvS3tYPgRoWDUBEdXkg2\",\n\t\"modal\": \"zUFuBGg0CUgmE3MAHdWa\",\n\t\"input--hideAutocomplete\": \"UKCvbkwKqnDroS8iYKJ8\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./DeliveryMediumStep.module.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n  var p;\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      continue;\n    }\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      continue;\n    }\n    if (!a[p]) {\n      return false;\n    }\n  }\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./DeliveryMediumStep.module.css\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./DeliveryMediumStep.module.css\";\n       export default content && content.locals ? content.locals : undefined;\n"],"names":[],"sourceRoot":""}