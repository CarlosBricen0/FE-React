{"version":3,"file":"stories_atoms_index_ts.40f66dcf9be584c763ba.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAxCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AApBA;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAjBA;;;;;;;;;;;;;;;;;;ACVA;AACA;AAGA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAGA;AA7BA;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA","sources":["webpack://components/./assets/SvgComponents/SvgBackbone/Generic.tsx","webpack://components/./assets/SvgComponents/SvgBackbone/index.tsx","webpack://components/./stories/atoms/Backbone/Backbone.tsx","webpack://components/./stories/atoms/Divider/Divider.tsx","webpack://components/./stories/atoms/Overlay/Overlay.tsx","webpack://components/./stories/atoms/Pill/Pill.tsx","webpack://components/./stories/atoms/Title/Title.tsx"],"sourcesContent":["import React from 'react'\nimport ContentLoader from 'react-content-loader'\nimport { BackboneProps } from '.'\n\nexport const Generic = ({\n  backgroundColor,\n  borderRadius,\n  foregroundColor,\n  height,\n  speed,\n  viewBox,\n  width\n}: BackboneProps): React.ReactElement => {\n  return (\n    <ContentLoader\n      backgroundColor={backgroundColor}\n      foregroundColor={foregroundColor}\n      height={height}\n      speed={speed}\n      style={{\n        width: `${width}%`,\n        borderRadius: `${borderRadius}`\n      }}\n      viewBox={viewBox}\n      width={width}\n    >\n      <rect\n        height={height}\n        rx='0'\n        ry='0'\n        width={`${width}%`}\n        x='0'\n        y='0'\n      />\n      <rect\n        height='2'\n        rx='0'\n        ry='0'\n        width='1'\n        x='190'\n        y='30'\n      />\n    </ContentLoader>\n  )\n}","export * as BackboneTypes from './Resolver'\n\nexport interface BackboneProps {\n  backgroundColor: string;\n  borderRadius: string;\n  foregroundColor: string;\n  height: number;\n  speed: number;\n  type: string;\n  viewBox?: string;\n  width: number;\n}","import React, { createElement } from 'react'\nimport { BackboneProps, BackboneTypes } from '../../../assets/SvgComponents/SvgBackbone'\nimport { getGlobalStyle } from '../../../helpers'\n\ninterface CustomBackboneProps extends Partial<Omit<BackboneProps, 'type'>> {\n  type?: keyof (typeof BackboneTypes);\n}\n\nexport const Backbone = ({\n  backgroundColor = getGlobalStyle('--color-loaders-background'),\n  borderRadius,\n  foregroundColor = getGlobalStyle('--color-loaders-fore-ground'),\n  height = 160,\n  speed = 2,\n  type = 'Generic',\n  width = 400,\n  ...props\n}: CustomBackboneProps): React.ReactElement => {\n  return createElement(\n    BackboneTypes[type],\n    { type, speed, width, height, backgroundColor, foregroundColor, borderRadius, ...props }\n  )\n}","import React from 'react'\nimport classNames from 'classnames'\nimport styles from './divider.module.css'\nimport { getGlobalStyle } from '../../../helpers'\n\nexport interface DividerProps {\n  width?: number;\n  verticalMargin?: number;\n  thickness?: 0 | 1 | 2 | 3;\n  color?: string;\n}\n\nexport const Divider = ({\n  thickness = 1,\n  width = 100,\n  verticalMargin = 20,\n  color = getGlobalStyle('--color-neutral-gray-silver')\n}: DividerProps): React.ReactElement<DividerProps> => {\n  return (\n    <div className={classNames(styles.divider)}>\n      <hr\n        className={classNames(styles.divider, {\n          [styles[`divider--thickness-${thickness}`]]: thickness\n        })}\n        style={{\n          width: `${width}%`,\n          margin: `${verticalMargin}px 0`,\n          borderColor: `${color}`\n        }}\n      />\n    </div>\n  )\n}\n","import { getGlobalStyle } from '../../../helpers'\nimport { Container } from '../../layout'\nimport styles from './Overlay.module.css'\n\nexport interface OverlayProps {\n  backgroundColor?: string;\n  zIndex?: string;\n  onClick?: () => void;\n}\n\nexport const Overlay = ({\n  backgroundColor = getGlobalStyle('--color-base-black'),\n  zIndex = getGlobalStyle('--z-index-5'),\n  onClick\n}: OverlayProps): React.ReactElement => {\n  return (\n    <Container\n      backgroundColor={backgroundColor}\n      customClassName={styles.overlay}\n      customHeight='100vh'\n      customWidth='100'\n      onClick={onClick}\n      position='fixed'\n      role='overlay'\n      zIndex={zIndex}\n    />\n  )\n}","import { getGlobalStyle } from '../../../helpers'\nimport { Icon, Text } from '..'\nimport { Icons } from '../../../assets/SvgComponents/SvgIcons'\nimport { OnClickProps } from '../../molecules/FiltersPills/FiltersPills'\nimport styles from './Pill.module.css'\n\nexport interface Item{\n  value: string;\n  numberResult?: number;\n  type: string;\n}\nexport interface PillProps{\n  item: Item;\n  iconName?: keyof (typeof Icons);\n  onClick: ({ type, itemName }: OnClickProps ) => void;\n}\n\nexport const Pill = ({\n  iconName = 'Close',\n  item,\n  onClick\n}: PillProps) => {\n\n  const handleClick = () => {\n    onClick({type: item?.type, itemName: item?.value})\n  }\n\n  return (\n    <div className={styles.pill}>\n      <Text\n        color='gray'\n        fontSize='md'\n        fontWeight='regular'\n        type='span'\n      >\n        {item?.value}\n        {Boolean(item?.numberResult) && ` (${item?.numberResult})`}\n      </Text>\n      <Icon\n        clickable='pointer'\n        color={getGlobalStyle('--color-icons-gray')}\n        name={iconName}\n        onClick={handleClick}\n      />\n    </div>\n  )\n}","import React from 'react'\nimport classNames from 'classnames'\nimport styles from './title.module.css'\nimport { getGlobalStyle } from '../../../helpers'\n\ntype FontWeight = 'regular' | 'normal' | 'semibold' | 'medium' | 'bold';\ntype HeadingLevel = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\nexport interface TitleProps {\n  backgroundColor?: string;\n  children?: React.ReactNode;\n  color?: string;\n  customClassName?: string;\n  customFontSize?: string;\n  customHeight?: string;\n  fontWeight?: FontWeight;\n  headingLevel?: HeadingLevel;\n  size?: 'large' | 'small';\n  text?: string;\n  textAlign?: 'left' | 'center' | 'right';\n}\n\nexport const Title = ({\n  backgroundColor,\n  children,\n  color = getGlobalStyle('--color-base-black'),\n  customClassName,\n  customFontSize,\n  customHeight = 'auto',\n  fontWeight = 'regular',\n  headingLevel = 'h1',\n  size = 'large',\n  text,\n  textAlign = 'left'\n}: TitleProps): React.ReactElement => {\n  const isCustom = customFontSize || customHeight\n  return React.createElement(\n    headingLevel,\n    {\n      className: classNames(styles.title, customClassName, {\n        [styles[`title__${headingLevel}`]]: headingLevel,\n        [styles[`title--${textAlign}`]]: headingLevel && textAlign,\n        [styles[`title--${fontWeight}`]]: headingLevel && fontWeight,\n        [styles[`title--${size}]`]]: headingLevel && size && !isCustom\n      }),\n      style: {\n        color,\n        backgroundColor,\n        fontSize: customFontSize,\n        fontHeight: customHeight\n      }\n    },\n    children || text\n  )\n}\n"],"names":[],"sourceRoot":""}