{"version":3,"file":"stories_molecules_AddToCartQuoter_AddToCartQuoter_tsx.40f66dcf9be584c763ba.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AArEA;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AApHA;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AA9CA","sources":["webpack://components/./stories/molecules/AddToCartQuoter/AddToCartQuoter.tsx","webpack://components/./stories/molecules/AddToCartQuoter/QuantityQuoter.tsx","webpack://components/./stories/molecules/QuantityButton/AddRemoveBtn.tsx"],"sourcesContent":["import { getGlobalStyle } from '../../../helpers'\nimport { Button } from '../../atoms'\nimport { Container } from '../../layout'\nimport { AddToCartProps } from '../AddToCartAndQuantity/AddToCartAndQuantity'\nimport styles from './AddToCartQuoter.module.css'\nimport { QuantityQuoter } from './QuantityQuoter'\n\nexport const AddToCartQuoter = ({\n  buttonLabel = 'Agregar',\n  customJustifyContent = 'center',\n  disabled,\n  inputRef,\n  isLoading,\n  itemId,\n  quantity,\n  quantityButtonProps,\n  quantityButtonStyles,\n  refAddToCart,\n  showQuantityButton = false,\n  site = 'alvi',\n  statusButton,\n  handleOnClick,\n  onBlurInput,\n  onKeyPress\n}: AddToCartProps) =>{\n\n  const handleAdd = () => {\n    quantityButtonProps.handleAdd({ itemId })\n  }\n\n  const handleRemove = () => {\n    quantityButtonProps.handleRemove({ itemId })\n  }\n\n  const handleChange = (e?: React.ChangeEvent<HTMLInputElement>) => {\n    quantityButtonProps.handleChange(e, { itemId })\n  }\n  return (\n    <Container\n      customClassName={styles.addToCartAndQuantity}\n      justifyContent={customJustifyContent}\n      ref={refAddToCart}\n    >\n      {!showQuantityButton &&\n      <Button\n        borderRadius='50px'\n        fontWeight={getGlobalStyle('--font-weight-semibold')}\n        height={quantityButtonStyles?.maxHeight || '30px'}\n        iconName='Edit'\n        label={buttonLabel}\n        minWidth={quantityButtonStyles?.minWidth || '100px'}\n        onClick={() => { handleOnClick({ itemId }) }}\n        site={site}\n        size='xs'\n        status={statusButton}\n        width={quantityButtonStyles?.maxWidth ?? undefined}\n      />\n      }\n      {showQuantityButton &&\n      <QuantityQuoter\n        inputRef={inputRef}\n        onKeyPress={onKeyPress}\n        {...quantityButtonProps}\n        disabled={disabled}\n        handleAdd={handleAdd}\n        handleChange={handleChange}\n        handleRemove={handleRemove}\n        isLoading={isLoading}\n        onBlurInput={onBlurInput}\n        quantityButtonStyles={quantityButtonStyles}\n        site={site}\n        value={quantity}\n      />\n      }\n    </Container>\n  )\n}","import React, { useState } from 'react'\nimport { getGlobalStyle } from '../../../helpers'\nimport { Icon, Input } from '../../atoms'\nimport { Container, Row } from '../../layout'\nimport { AddOrRemoveBtn } from '../QuantityButton/AddRemoveBtn'\nimport { QuantityButtonProps } from '../QuantityButton/QuantityButton'\nimport styles from './AddToCartQuoter.module.css'\n\nexport const QuantityQuoter = ({\n  disabled = false,\n  disabledInput = false,\n  disabledLess = false,\n  disabledPlus = false,\n  inputRef,\n  isLoading = false,\n  maxQuantity = 1000,\n  quantity,\n  quantityButtonStyles = {\n    fontSize: 'md',\n    margin: '0px',\n    maxHeight: '35px',\n    maxWidth: '100%',\n    sizeCircle: 25\n  },\n  site = 'alvi',\n  value,\n  handleAdd,\n  handleChange,\n  handleRemove,\n  onBlurInput,\n  onKeyPress\n}: QuantityButtonProps): React.ReactElement => {\n  const [shake, setShake] = useState(false)\n  const getQuantity = parseFloat(`${quantity || value}`)\n  const isMaxQuantity = getQuantity >= parseFloat(`${maxQuantity}`)\n  const isMinQuantity = getQuantity == 0\n  const isRightDisabled = disabled || disabledPlus || isMaxQuantity\n  const isLeftDisabled = disabled || disabledLess || isMinQuantity\n\n  const handleTyping = (e) => {\n    if (/([a-zA-Z]|[`!@#$%^&*()_+\\-=[\\]{}':\"\\\\|<>/?~])/.test(e.target.value)) return\n\n    handleChange(e)\n  }\n\n  const addChake = () => {\n    setShake(true)\n    setTimeout(() => { return setShake(false) }, 2000)\n  }\n\n  return (\n    <Container\n      alignItems='center'\n      background={getGlobalStyle('--color-alvi-primary-blue-gradient')}\n      backgroundColor={getGlobalStyle('--color-alvi-primary-blue-gradient)')}\n      borderRadius={quantityButtonStyles.maxHeight}\n      customClassName={shake ? styles['quantityBtn--shake'] : ''}\n      justifyContent='center'\n      margin={quantityButtonStyles.margin}\n      maxHeight={quantityButtonStyles.maxHeight}\n      maxWidth={quantityButtonStyles.maxWidth}\n      minWidth={quantityButtonStyles.minWidth}\n      onBlur={onBlurInput}\n      position='relative'\n      tabIndex={0}\n      tagName='article'\n    >\n      <AddOrRemoveBtn\n        alternativeBackground={getGlobalStyle('--color-alvi-primary-blue-gradient')}\n        circleStyle={{\n          iconColor: getGlobalStyle('--color-alvi-primary-blue'),\n          sizeButton: quantityButtonStyles.maxHeight,\n          sizeCircle: quantityButtonStyles.sizeCircle\n        }}\n        disabled={isLeftDisabled}\n        handleQuantity={handleRemove}\n        handleShake={addChake}\n        site={site}\n        type='left'\n      />\n      {!isLoading ? (\n        <Input\n          autoFocus\n          background='white'\n          color={getGlobalStyle('--color-alvi-primary-blue3')}\n          disabled={disabled || isLoading || disabledInput || isMaxQuantity}\n          fontSize={quantityButtonStyles.fontSize}\n          fontWeight='bold'\n          height={quantityButtonStyles?.inputMaxHeight || quantityButtonStyles.maxHeight}\n          inputMode='decimal'\n          margin={quantityButtonStyles?.margin}\n          maxWidth='100%'\n          onBlur={onBlurInput}\n          onChange={handleTyping}\n          onKeyPress={onKeyPress}\n          ref={inputRef}\n          value={value}\n          width='100%'\n        />\n      ) : (\n        <Row className={styles.loading}>\n          <Icon\n            color={getGlobalStyle('--color-alvi-neutral-white')}\n            customSize={20}\n            name='Loading'\n          />\n        </Row>\n      )\n      }\n      <AddOrRemoveBtn\n        alternativeBackground={getGlobalStyle('--color-alvi-primary-blue-gradient')}\n        circleStyle={{\n          iconColor: getGlobalStyle('--color-alvi-primary-blue'),\n          sizeButton: quantityButtonStyles.maxHeight,\n          sizeCircle: quantityButtonStyles.sizeCircle\n        }}\n        disabled={isRightDisabled}\n        handleQuantity={handleAdd}\n        handleShake={addChake}\n        site={site}\n        type='right'\n      />\n    </Container>\n  )\n}\n","import React from 'react'\nimport { getGlobalStyle } from '../../../helpers'\nimport { Icon } from '../../atoms'\nimport styles from './QuantityButton.module.css'\n\nexport interface CircleStyleProps {\n  iconColor: string;\n  sizeButton?: string;\n  sizeCircle?: number\n}\n\ninterface AddOrRemoveProps {\n  alternativeBackground?: string;\n  circleStyle?: CircleStyleProps,\n  disabled: boolean;\n  site: 'alvi' | 'unimarc';\n  type: 'right' | 'left';\n  handleShake: (props?: unknown) => void;\n  handleQuantity: (props?: unknown) => void;\n}\n\nexport const AddOrRemoveBtn = ({\n  circleStyle = {\n    iconColor: getGlobalStyle('--color-primary-red'),\n    sizeButton: '35px',\n    sizeCircle: 25\n  },\n  alternativeBackground,\n  disabled,\n  site = 'unimarc',\n  type,\n  handleShake,\n  handleQuantity\n}: AddOrRemoveProps) => {\n  const iconName = type === 'right' ? 'PlusCircle' : 'MinusCircle'\n  const iconColor = disabled ? getGlobalStyle('--color-primary-disabled') : circleStyle.iconColor\n\n  return (\n    <button\n      aria-label={type}\n      className={styles[`quantityBtn--${site}`]}\n      onClick={disabled ? handleShake : handleQuantity}\n      style={{\n        background: alternativeBackground,\n        borderRadius: circleStyle.sizeButton,\n        width: circleStyle.sizeButton,\n        height: circleStyle.sizeButton\n      }}\n      type='button'\n    >\n      <div\n        className={styles['quantityBtn--circle']}\n        style={{\n          height: circleStyle.sizeButton,\n          width: circleStyle.sizeButton\n        }}\n      >\n        <Icon\n          clickable='pointer'\n          color={iconColor}\n          customSize={circleStyle.sizeCircle}\n          name={iconName}\n          viewBox='0 0 22 22'\n        />\n      </div>\n    </button>\n  )\n}\n"],"names":[],"sourceRoot":""}