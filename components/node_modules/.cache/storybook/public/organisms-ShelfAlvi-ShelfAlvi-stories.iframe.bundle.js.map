{"version":3,"file":"organisms-ShelfAlvi-ShelfAlvi-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAKA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;ACrBA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://components/./helpers/currencyFormat/index.ts","webpack://components/./stories/organisms/ShelfAlvi/helpers/PropertiesProducts.tsx"],"sourcesContent":["interface CurrencyFormat {\n  number: number;\n  bool?: boolean;\n}\n\nexport const currencyFormat = ({\n  number,\n  bool = true\n}: CurrencyFormat): string => {\n\n  let formatNumber = 0\n\n  // If true then divide number\n  if (bool) {\n    formatNumber = number / 100\n  }\n  // Else just assign it\n  else {\n    formatNumber = number\n  }\n\n  const formatterPeso = new Intl.NumberFormat('es-CL', {\n    style: 'currency',\n    currency: 'CLP',\n    minimumFractionDigits: 0\n  })\n\n  if (formatNumber >= 0) {\n    return formatterPeso.format(formatNumber)\n  }\n\n  return '- ' + formatterPeso.format(Math.abs(formatNumber))\n}","\nimport { Product, PriceSteps } from '../../../../shared/interfaces/IProducts'\n\nexport interface PropertiesProductsProp {\n  couponState?: boolean;\n  isLoggedIn?: boolean;\n  product?: Product;\n  stock?: boolean;\n  validationStatus?: string;\n}\n\nconst sortPriceStep = (product: Product): Array<PriceSteps> => {\n  if (!product?.priceSteps) return []\n  const { priceSteps } = product\n  return priceSteps.sort((a, b) => {\n    return a.promotionalPrice - b.promotionalPrice\n  })\n}\n\nconst setTextButton = (stock?: boolean, couponState?: boolean) => {\n  if (!stock) return 'Sin stock'\n  if (couponState) return 'Activa tu cupÃ³n'\n  return 'Agregar'\n}\n\nexport const PropertiesProducts = ({\n  couponState = false,\n  isLoggedIn,\n  product,\n  stock = true,\n  validationStatus\n}: PropertiesProductsProp) => {\n\n  const notValid = validationStatus === '0'\n  let isWeighable = false\n  if (product?.measurementUnit && product?.measurementUnitUn)\n    isWeighable = product?.measurementUnit.toLowerCase() == 'kg' && product?.measurementUnitUn.toLowerCase() == 'kg'\n\n  const showInValidation = isLoggedIn && notValid\n  const showPriceSteps = product?.priceSteps\n  const textButton = setTextButton(stock, couponState)\n\n  return {\n    isWeighable,\n    showInValidation,\n    showPriceSteps,\n    sortPriceStep: sortPriceStep(product),\n    textButton\n  }\n}"],"names":[],"sourceRoot":""}