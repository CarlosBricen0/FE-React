{"version":3,"file":"organisms-LocalsFinder-LocalsFinder-stories.40f66dcf9be584c763ba.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAMA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAkpWA;AACA;AAKA;AAKA;AAIA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AAGA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAGA;AAAA;AAEA;AACA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAGA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;ACxLA;AAEA;AAMA;AAIA;AAAA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAKA;AAAA;AAAA;AACA;AAEA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAMA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAGA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AAAA;AACA;AACA;AAGA;AAAA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAIA;AA1HA;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAIA;AArFA;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AAMA;AAMA;AAKA;AACA;AAAA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAIA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AAEA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AA/IA;;;;;;;;;;;;;;;;;;ACzCA;AACA;AAOA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAvCA;;;;;;;;;;;;;;;;;;;;;ACfA;AAKA;AAKA;AACA;AACA;AAIA;AAAA;AAAA;AAqjJA","sources":["webpack://components/./stories/organisms/LocalsFinder/LocalsFinder.tsx","webpack://components/./stories/organisms/LocalsFinder/LocalsFinderLoader/LocalsFinderLoader.tsx","webpack://components/./stories/organisms/LocalsFinder/StoreBox/StoreBox.tsx","webpack://components/./stories/organisms/LocalsFinder/StoreGeolocationActivator/StoreGeolocationActivator.tsx","webpack://components/./stories/organisms/LocalsFinder/StoreList/StoreList.tsx","webpack://components/./stories/organisms/LocalsFinder/StoreList/StoreListFailed/StoreListFailed.tsx","webpack://components/./stories/organisms/LocalsFinder/StoreZoneFilter/StoreZoneFilter.tsx"],"sourcesContent":["import {\n  ReactNode,\n  useEffect,\n  useRef,\n  useState\n} from 'react'\nimport {\n  BigScreen,\n  getGlobalStyle,\n  SmallScreen\n} from '../../../helpers'\nimport { Text, Icon } from '../../atoms'\nimport {\n  Column,\n  Container,\n  Row\n} from '../../layout'\nimport { Modal } from '../../molecules'\nimport { StoreBox } from './StoreBox/StoreBox'\nimport { StoreList } from './StoreList/StoreList'\nimport { StoreZoneFilter } from './StoreZoneFilter/StoreZoneFilter'\nimport { GeolocationActivator } from './StoreGeolocationActivator/StoreGeolocationActivator'\nimport { LocalsFinderLoader } from './LocalsFinderLoader/LocalsFinderLoader'\nimport {\n  LocalsFinderItem,\n  LocalsFinderStore,\n  useLocalsFinder\n} from './LocalsFinder.helper'\nimport styles from './LocalsFinder.module.css'\nimport { Site } from '../../../shared/interfaces/Site'\n\nexport interface LocalsFinderProps {\n  children?: ReactNode;\n  distance?: number;\n  isFailed?: boolean;\n  isLoading?: boolean;\n  items?: LocalsFinderItem[];\n  selected?: LocalsFinderStore;\n  site?: Site;\n  onLocationChange?: (location: GeolocationPosition) => void;\n  onRetryClick?: () => void;\n  onSelectedChange?: (selected: LocalsFinderStore) => void;\n  onStoreListButtonClick?: (store: LocalsFinderStore) => void;\n  onStoresChange?: (stores: LocalsFinderStore[]) => void;\n}\n\nexport const LocalsFinder = ({\n  children,\n  distance,\n  isFailed,\n  isLoading,\n  items = [],\n  selected,\n  site = 'unimarc',\n  onLocationChange,\n  onRetryClick,\n  onSelectedChange,\n  onStoreListButtonClick,\n  onStoresChange\n}: LocalsFinderProps) => {\n  const [commune, setCommune] = useState<string>()\n  const [location, setLocation] = useState<GeolocationPosition>()\n  const [region, setRegion] = useState<string>()\n  const [height, setHeight] = useState<string>('100vh')\n\n  const list = useRef<HTMLDivElement>()\n\n  const {\n    communes,\n    locals,\n    regions\n  } = useLocalsFinder({\n    filters: {\n      commune,\n      location,\n      region\n    },\n    items\n  })\n\n  const handleSelectedClean = () => {\n    if (onSelectedChange) {\n      onSelectedChange(null)\n    }\n  }\n\n  const handleCommuneChange = (commune: string) => {\n    setCommune(commune)\n    setLocation(null)\n\n    if (onSelectedChange) {\n      onSelectedChange(null)\n    }\n  }\n\n  const handleGeolocationChange = (locationInput?: GeolocationPosition) => {\n    setCommune(null)\n    setRegion(null)\n    setLocation(locationInput)\n  }\n\n  const handleRegionChange = (region: string) => {\n    setRegion(region)\n    setLocation(null)\n\n    if (onSelectedChange) {\n      onSelectedChange(null)\n    }\n  }\n\n  const handleRetryClick = () => {\n    if (onRetryClick) {\n      onRetryClick()\n    }\n  }\n\n  const handleStoreBoxButtonClick = (store: LocalsFinderStore) => {\n    if (onStoreListButtonClick) {\n      onStoreListButtonClick(store)\n    }\n  }\n\n  const handleStoreBoxShowDetailsButtonClick = (store: LocalsFinderStore) => {\n    if (!onSelectedChange) return\n\n    if (selected?.key != store.key) {\n      onSelectedChange(store)\n    } else {\n      onSelectedChange(null)\n    }\n\n    window.scrollTo(0, 0)\n  }\n\n  useEffect(() => {\n    if (list.current && selected) {\n      list.current.scrollTop = 0\n      const button = list.current.querySelectorAll('button').item(0)\n      if (button) {\n        const boundingClientRect = button.getBoundingClientRect()\n        list.current.scrollTop = boundingClientRect.top - 600\n      }\n    }\n  }, [selected])\n\n  useEffect(() => {\n    if (onLocationChange) {\n      onLocationChange(location)\n    }\n  }, [location])\n\n  useEffect(() => {\n    if (onStoresChange) {\n      onStoresChange(locals)\n    }\n  }, [region, commune])\n\n  useEffect(() => {\n    if (onStoresChange) {\n      onStoresChange(locals)\n    }\n  }, [isLoading])\n\n  useEffect(() => {\n    const outerHeight = `${window.outerHeight}px`\n\n    window.addEventListener('resize', () => {\n      const innerHeight = `${window.innerHeight}px`\n      if (innerHeight != height) {\n        setHeight(innerHeight)\n      }\n    })\n\n    setHeight(outerHeight)\n  }, [])\n\n  if (isLoading) {\n    return (\n      <LocalsFinderLoader>\n        {children}\n      </LocalsFinderLoader>\n    )\n  }\n\n  return (\n    <>\n      <BigScreen>\n        <Row\n          gap={18}\n          margin='64px 0 16px'\n          maxWidth='1315px'\n        >\n          <Column gap={16} maxWidth='398px'>\n            <Column\n              backgroundColor={getGlobalStyle('--color-base-white')}\n              borderRadius={getGlobalStyle('--border-radius-2sm')}\n              boxShadow={getGlobalStyle('--box-shadow-2xs')}\n              padding='16px'\n            >\n              <StoreZoneFilter\n                commune={commune}\n                communes={communes}\n                onCommuneChange={handleCommuneChange}\n                onRegionChange={handleRegionChange}\n                region={region}\n                regions={regions}\n                title='Buscar local'\n              />\n\n              <GeolocationActivator\n                onChange={handleGeolocationChange}\n                site={site}\n                value={location}\n              />\n            </Column>\n\n            <Container\n              backgroundColor={getGlobalStyle('--color-base-white')}\n              borderRadius={getGlobalStyle('--border-radius-2sm')}\n              boxShadow={getGlobalStyle('--box-shadow-2xs')}\n              padding='0 0 0 16px'\n            >\n              <Container\n                customClassName={styles.scrollBarUnimarc}\n                margin='0 8px 0 0'\n                maxHeight='405px'\n                padding='16px 8px 16px 0'\n                ref={list}\n              >\n                <StoreList\n                  isFailed={isFailed}\n                  items={locals}\n                  onRetryClick={handleRetryClick}\n                  onStoreBoxButtonClick={handleStoreBoxButtonClick}\n                  onStoreBoxShowDetailsClick={handleStoreBoxShowDetailsButtonClick}\n                  selected={selected}\n                  site={site}\n                  title='Nuestros locales'\n                />\n              </Container>\n            </Container>\n          </Column>\n\n          <Container\n            backgroundColor={getGlobalStyle('--color-base-white')}\n            borderRadius={getGlobalStyle('--border-radius-2sm')}\n            boxShadow={getGlobalStyle('--box-shadow-2xs')}\n            overflow='hidden'\n          >\n            {children}\n          </Container>\n        </Row>\n      </BigScreen>\n\n      <SmallScreen>\n        <Column padding='40px 0 0'>\n          <Row\n            backgroundColor={getGlobalStyle('--color-base-white')}\n            gap={8}\n            padding='16px'\n          >\n            <Container\n              clickable='pointer'\n              hidden={!selected}\n              maxWidth='20px'\n              onClick={handleSelectedClean}\n              padding='4px'\n            >\n              <Icon\n                clickable='pointer'\n                color={getGlobalStyle('--color-text-black')}\n                customSize={16}\n                name='ArrowBackNavigate'\n                onClick={handleSelectedClean}\n              />\n            </Container>\n\n            <Text\n              fontSize='lg'\n              fontWeight='semibold'\n              lineHeight='22px'\n            >\n              {selected ? 'Detalle del local' : 'Locales y horarios'}\n            </Text>\n          </Row>\n\n          <Column gap={16} padding={selected ? null : '16px'}>\n            <Column\n              backgroundColor={getGlobalStyle('--color-base-white')}\n              borderRadius={getGlobalStyle('--border-radius-2sm')}\n              boxShadow={getGlobalStyle('--box-shadow-2xs')}\n              hidden={!!selected}\n              padding='16px'\n            >\n              <StoreZoneFilter\n                commune={commune}\n                communes={communes}\n                onCommuneChange={handleCommuneChange}\n                onRegionChange={handleRegionChange}\n                region={region}\n                regions={regions}\n                title='Buscar local'\n              />\n\n              <GeolocationActivator\n                onChange={handleGeolocationChange}\n                site={site}\n                value={location}\n              />\n            </Column>\n\n            <Container hidden={!!selected}>\n              <StoreList\n                isFailed={isFailed}\n                items={locals}\n                onRetryClick={handleRetryClick}\n                onStoreBoxButtonClick={handleStoreBoxButtonClick}\n                onStoreBoxShowDetailsClick={handleStoreBoxShowDetailsButtonClick}\n                selected={selected}\n              />\n            </Container>\n\n            <Container hidden={!selected}>\n              {children}\n            </Container>\n          </Column>\n\n          <Modal\n            dragRatio={0.1}\n            fullScreen\n            hiddenX\n            hideOverlay\n            isOpen={!!selected}\n            marginFullScreen={`calc(${height} - 250px) 0 0`}\n            minFullscreenTranslation={137}\n            toggle={handleSelectedClean}\n          >\n            <Container padding='8px 0'>\n              <StoreBox\n                address={selected?.address}\n                closedAt={selected?.closedAt}\n                details={selected?.details}\n                distance={distance}\n                hideDetailToggle\n                isClosed={selected?.closed}\n                isOpen\n                onButtonClick={() => {handleStoreBoxButtonClick(selected)}}\n                site={site}\n                title={selected?.title}\n              />\n            </Container>\n          </Modal>\n        </Column>\n      </SmallScreen>\n    </>\n  )\n}\n","import React, { ReactNode } from 'react'\nimport {\n  BigScreen,\n  getGlobalStyle,\n  SmallScreen\n} from '../../../../helpers'\nimport {\n  Backbone,\n  Divider,\n  Text\n} from '../../../atoms'\nimport {\n  Column,\n  Container,\n  Row\n} from '../../../layout'\n\nexport interface LocalsFinderLoaderProps {\n  children?: ReactNode;\n}\n\nexport const LocalsFinderLoader = ({ children }: LocalsFinderLoaderProps) => {\n  return (\n    <>\n      <BigScreen>\n        <Row\n          gap={18}\n          margin='64px 0 16px'\n          maxWidth='1315px'\n        >\n          <Column gap={16} maxWidth='398px'>\n            <Column\n              backgroundColor={getGlobalStyle('--color-base-white')}\n              borderRadius={getGlobalStyle('--border-radius-2sm')}\n              boxShadow={getGlobalStyle('--box-shadow-2xs')}\n              gap={8}\n              padding='16px'\n            >\n              <Container width={116}>\n                <Backbone\n                  borderRadius={getGlobalStyle('--border-radius-2xs')}\n                  height={27}\n                />\n              </Container>\n\n              <Divider color={getGlobalStyle('--color-neutral-gray')} verticalMargin={0} />\n\n              <Container>\n                <Backbone\n                  borderRadius={getGlobalStyle('--border-radius-2xs')}\n                  height={65}\n                />\n              </Container>\n\n              <Container>\n                <Backbone\n                  borderRadius={getGlobalStyle('--border-radius-2xs')}\n                  height={65}\n                />\n              </Container>\n\n              <Container width={128}>\n                <Backbone\n                  borderRadius={getGlobalStyle('--border-radius-2xs')}\n                  height={27}\n                />\n              </Container>\n            </Column>\n\n            <Container\n              backgroundColor={getGlobalStyle('--color-base-white')}\n              borderRadius={getGlobalStyle('--border-radius-2sm')}\n              boxShadow={getGlobalStyle('--box-shadow-2xs')}\n              padding='16px'\n            >\n              <Column gap={8}>\n                <Container width={160}>\n                  <Backbone\n                    borderRadius={getGlobalStyle('--border-radius-2xs')}\n                    height={27}\n                  />\n                </Container>\n\n                <Divider color={getGlobalStyle('--color-neutral-gray')} verticalMargin={0} />\n\n                {\n                  Array.from(Array(3).keys()).map((index) => {\n                    return (\n                      <React.Fragment key={index}>\n                        <Container width={150}>\n                          <Backbone\n                            borderRadius={getGlobalStyle('--border-radius-2xs')}\n                            height={20}\n                          />\n                        </Container>\n\n                        <Container width={190}>\n                          <Backbone\n                            borderRadius={getGlobalStyle('--border-radius-2xs')}\n                            height={20}\n                          />\n                        </Container>\n\n                        <Row justifyContent='between'>\n                          <Container width={140}>\n                            <Backbone\n                              borderRadius={getGlobalStyle('--border-radius-2xs')}\n                              height={20}\n                            />\n                          </Container>\n\n                          <Container width={40}>\n                            <Backbone\n                              borderRadius={getGlobalStyle('--border-radius-2xs')}\n                              height={20}\n                            />\n                          </Container>\n                        </Row>\n\n                        <Divider color={getGlobalStyle('--color-neutral-gray')} verticalMargin={0} />\n                      </React.Fragment>\n                    )\n                  })\n                }\n              </Column>\n            </Container>\n          </Column>\n\n          <Container\n            backgroundColor={getGlobalStyle('--color-base-white')}\n            borderRadius={getGlobalStyle('--border-radius-2sm')}\n            boxShadow={getGlobalStyle('--box-shadow-2xs')}\n            overflow='hidden'\n          >\n            {children}\n          </Container>\n        </Row>\n      </BigScreen>\n\n      <SmallScreen>\n        <Column padding='22px 0 0'>\n          <Row\n            backgroundColor={getGlobalStyle('--color-base-white')}\n            gap={8}\n            padding='16px'\n          >\n            <Text\n              fontSize='lg'\n              fontWeight='semibold'\n              lineHeight='22px'\n            >\n              Locales y horarios\n            </Text>\n          </Row>\n\n          <Column gap={16} padding='16px'>\n            <Container\n              backgroundColor={getGlobalStyle('--color-base-white')}\n              borderRadius={getGlobalStyle('--border-radius-2sm')}\n              boxShadow={getGlobalStyle('--box-shadow-2xs')}\n            >\n              <Backbone borderRadius={getGlobalStyle('--border-radius-2xs')} height={200} />\n            </Container>\n\n            <Column gap={8}>\n              {\n                Array.from(Array(10).keys()).map((_e, index) => {\n                  return (\n                    <Container key={index}>\n                      <Backbone borderRadius={getGlobalStyle('--border-radius-2xs')} height={93} />\n                    </Container>\n                  )\n                })\n              }\n\n              <Container padding='8px 24px'>\n                <Backbone borderRadius={getGlobalStyle('--border-radius-xl')} height={35} />\n              </Container>\n            </Column>\n          </Column>\n        </Column>\n      </SmallScreen>\n    </>\n  )\n}\n","import { getGlobalStyle } from '../../../../helpers'\nimport { Site } from '../../../../shared/interfaces/Site'\nimport {\n  Button,\n  Icon,\n  Text,\n  Title\n} from '../../../atoms'\nimport {\n  Column,\n  Container,\n  Row\n} from '../../../layout'\n\nexport interface StoreBoxItems {\n  details: string;\n  title: string;\n  value: string;\n}\n\nexport interface StoreBoxProps {\n  address?: string;\n  closedAt?: string;\n  details?: string[][];\n  distance?: number;\n  hideDetailToggle?: boolean;\n  isClosed?: boolean;\n  isOpen?: boolean;\n  site?: Site;\n  title?: string;\n  onButtonClick?: () => void;\n  onShowDetailsClick?: () => void;\n}\n\nexport const StoreBox = ({\n  address,\n  closedAt,\n  details = [],\n  distance,\n  hideDetailToggle,\n  isClosed,\n  isOpen,\n  site = 'unimarc',\n  title = 'Unimarc Manquehue',\n  onButtonClick,\n  onShowDetailsClick\n}: StoreBoxProps) => {\n  const handleButtonClick = () => {\n    if (onButtonClick) {\n      onButtonClick()\n    }\n  }\n\n  const handleDetailClick = () => {\n    if (onShowDetailsClick) {\n      onShowDetailsClick()\n    }\n  }\n\n  return (\n    <Column gap={hideDetailToggle ? 12 : 8}>\n      <Column gap={hideDetailToggle ? 2 : 4}>\n        <Title fontWeight='semibold' headingLevel='h6'>\n          {title}\n        </Title>\n\n        <Text fontSize='md'>\n          {address}\n        </Text>\n      </Column>\n\n      <Row>\n        <Row gap={4} maxWidth='50%'>\n          <Text\n            color={isClosed ? 'error' : 'success'}\n            fontSize='sm'\n            fontWeight='semibold'\n          >\n            {isClosed ? 'Cerrado' : 'Abierto'}\n          </Text>\n\n          {\n            closedAt && (\n              <Text color='neutral-dark' fontSize='sm'>\n                Cierra a las {closedAt}\n              </Text>\n            )\n          }\n        </Row>\n\n        {\n          !hideDetailToggle && (\n            <Row justifyContent='end'>\n              <Text\n                clickable='pointer'\n                fontSize='sm'\n                onClick={handleDetailClick}\n                textDecorationLine='underline'\n              >\n                {isOpen ? 'Ver menos' : 'Ver más'}\n              </Text>\n            </Row>\n          )\n        }\n\n        <Row\n          gap={4}\n          hidden={!distance}\n          justifyContent='end'\n        >\n          <Icon color='black' name='Location' />\n\n          <Text fontSize='sm'>\n            {distance} km\n          </Text>\n        </Row>\n      </Row>\n\n      <Column hidden={!isOpen}>\n        {\n          details.map((detail, index) => {\n            const { 0: name, 1: value } = detail\n\n            return (\n              <Row gap={4} key={index}>\n                <Text fontSize='sm' fontWeight='semibold'>\n                  {name}:\n                </Text>\n\n                <Text fontSize='sm'>\n                  {value}\n                </Text>\n              </Row>\n            )\n          })\n        }\n      </Column>\n\n      {\n        isOpen && (\n          <Container padding='0 16px'>\n            <Button\n              borderRadius={getGlobalStyle('--border-radius-xl')}\n              fontWeight='600'\n              fullWidth\n              height='40px'\n              label='Cómo llegar'\n              onClick={handleButtonClick}\n              site={site}\n              size='xs'\n            />\n          </Container>\n        )\n      }\n    </Column>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { getGlobalStyle } from '../../../../helpers'\nimport { Site } from '../../../../shared/interfaces/Site'\nimport { Icon, Text } from '../../../atoms'\nimport { Container, Row } from '../../../layout'\nimport { getGeolocationPermissionIsGranted } from './helpers'\n\nexport interface GeoLocationActivatorProps {\n  activationLabel?: string;\n  label?: string;\n  value?: GeolocationPosition;\n  site?: Site;\n  onClick?: () => void;\n  onChange?: (value?: GeolocationPosition) => void;\n}\n\nconst setBackground = (site: Site): string => {\n  if(site === 'alvi') return getGlobalStyle('--color-alvi-primary-blue-gradient')\n  return getGlobalStyle('--color-primary-red-header')\n}\n\nexport const GeolocationActivator = ({\n  activationLabel = 'Activar ubicación',\n  label = 'Ubicación actual',\n  site = 'unimarc',\n  value,\n  onChange\n}: GeoLocationActivatorProps) => {\n  const [active, setActive] = useState<boolean>(false)\n\n  const iconColor = value ? getGlobalStyle('--color-base-white') : getGlobalStyle('--color-base-black')\n  const iconBackground = value ? setBackground(site) : getGlobalStyle('--color-neutral-gray-light')\n\n  const handleActivateClick = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(() => { // NOSONAR\n        setActive(true)\n      })\n    }\n  }\n\n  const handleCurrentClick = () => {\n    if (!onChange) return\n    if (value) {\n      onChange(null)\n      return\n    }\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((location) => { // NOSONAR\n        onChange(location)\n      })\n    }\n  }\n\n  useEffect(() => {\n    if (navigator.geolocation && !active) {\n      getGeolocationPermissionIsGranted().then(isGranted => {\n        setActive(isGranted)\n      })\n    }\n  }, [])\n\n  return (\n    <Row alignItems='center' gap={8}>\n      <Container\n        background={iconBackground}\n        borderRadius='2em'\n        clickable={active ? 'pointer' : 'click'}\n        onClick={active ? handleCurrentClick : null}\n        padding='6px'\n        width={30}\n      >\n        <Icon\n          color={iconColor}\n          customSize={16}\n          name='Localization'\n        />\n      </Container>\n\n      <Text\n        clickable={active ? 'pointer' : 'click'}\n        color={active ? 'black' : 'inactive'}\n        fontSize='sm'\n        onClick={active ? handleCurrentClick : null}\n        textDecorationLine='underline'\n      >\n        {label}\n      </Text>\n\n      {\n        !active && (\n          <Text\n            clickable='pointer'\n            color={site === 'unimarc' ? 'primary' : 'blue2'}\n            fontSize='sm'\n            fontWeight='semibold'\n            onClick={handleActivateClick}\n            textDecorationLine='underline'\n          >\n            {activationLabel}\n          </Text>\n        )\n      }\n    </Row>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  BigScreen,\n  getGlobalStyle,\n  SmallScreen\n} from '../../../../helpers'\nimport { Site } from '../../../../shared/interfaces/Site'\nimport {\n  Button,\n  Divider,\n  Icon,\n  Title\n} from '../../../atoms'\nimport {\n  Column,\n  Container,\n  Row\n} from '../../../layout'\nimport { StoreBox } from '../StoreBox/StoreBox'\nimport { StoreListFailed } from './StoreListFailed/StoreListFailed'\n\nexport interface StoreListItems {\n  address: string;\n  closed: boolean;\n  closedAt: string;\n  title: string;\n  key: string;\n  details: string[][];\n}\n\nexport interface StoreListProps {\n  isFailed?: boolean;\n  items?: StoreListItems[];\n  selected?: StoreListItems;\n  title?: string;\n  site?: Site;\n  onRetryClick?: () => void;\n  onStoreBoxButtonClick?: (store?: StoreListItems) => void;\n  onStoreBoxShowDetailsClick?: (store?: StoreListItems) => void;\n}\n\nexport const StoreList = ({\n  isFailed,\n  items = [],\n  selected,\n  site = 'unimarc',\n  title = 'Buscar tienda',\n  onRetryClick,\n  onStoreBoxButtonClick,\n  onStoreBoxShowDetailsClick\n}: StoreListProps) => {\n  const [slice, setSlice] = useState<number>(10)\n\n  const handleButtonClick = (store: StoreListItems) => {\n    return () => {\n      if (onStoreBoxButtonClick) {\n        onStoreBoxButtonClick(store)\n      }\n    }\n  }\n\n  const handleDetailClick = (store: StoreListItems) => {\n    return () => {\n      if (onStoreBoxShowDetailsClick) {\n        onStoreBoxShowDetailsClick(store)\n      }\n    }\n  }\n\n  const handleLoadMore = () => {\n    setSlice(slice + 10)\n  }\n\n  const handleStoreListFailedClick = () => {\n    if (onRetryClick) {\n      onRetryClick()\n    }\n  }\n\n  if (isFailed) {\n    return (\n      <StoreListFailed onClick={handleStoreListFailedClick} title={title} />\n    )\n  }\n\n  return (\n    <Column gap={6}>\n      <BigScreen>\n        <>\n          <Title fontWeight='semibold' headingLevel='h3'>\n            {title}\n          </Title>\n\n          <Divider color={getGlobalStyle('--color-background-gray')} verticalMargin={0} />\n\n          {\n            Array.isArray(items) && items?.map((item, index) => {\n              return (\n                <React.Fragment key={`${item.title}`}>\n                  {\n                    index > 0 && (\n                      <BigScreen>\n                        <Divider color={getGlobalStyle('--color-background-gray')} verticalMargin={4} />\n                      </BigScreen>\n                    )\n                  }\n\n                  <StoreBox\n                    address={item.address}\n                    closedAt={item.closedAt}\n                    details={item.details}\n                    isClosed={item.closed}\n                    isOpen={selected?.key === item.key}\n                    key={item.key}\n                    onButtonClick={handleButtonClick(item)}\n                    onShowDetailsClick={handleDetailClick(item)}\n                    site={site}\n                    title={item.title}\n                  />\n                </React.Fragment>\n              )\n            })\n          }\n        </>\n      </BigScreen>\n\n      <SmallScreen>\n        <>\n          {\n            Array.isArray(items) && items?.slice(0, slice).map((item, index) => {\n              return (\n                <React.Fragment key={item.title}>\n                  {\n                    index > 0 && (\n                      <BigScreen>\n                        <Divider color={getGlobalStyle('--color-background-gray')} verticalMargin={4} />\n                      </BigScreen>\n                    )\n                  }\n\n                  <Row\n                    backgroundColor={getGlobalStyle('--color-base-white')}\n                    borderRadius={getGlobalStyle('--border-radius-2sm')}\n                    onClick={handleDetailClick(item)}\n                    padding='16px'\n                  >\n                    <StoreBox\n                      address={item.address}\n                      closedAt={item.closedAt}\n                      details={item.details}\n                      hideDetailToggle\n                      isClosed={item.closed}\n                      isOpen={selected?.key === item.key}\n                      key={item.key}\n                      onButtonClick={handleButtonClick(item)}\n                      onShowDetailsClick={handleDetailClick(item)}\n                      site={site}\n                      title={item.title}\n                    />\n\n                    <Column margin='auto' maxWidth='16px'>\n                      <Icon color={getGlobalStyle('--color-neutral-gray-dark')} name='ArrowRight'/>\n                    </Column>\n                  </Row>\n                </React.Fragment>\n              )\n            })\n          }\n\n          <Container hidden={items.length < slice} padding='24px 0'>\n            <Button\n              borderRadius={getGlobalStyle('--border-radius-xl')}\n              fullWidth\n              label='Cargar más resultados'\n              onClick={handleLoadMore}\n              site={site}\n              size='medium'\n              type='secondary'\n            />\n          </Container>\n        </>\n      </SmallScreen>\n    </Column>\n  )\n}\n","import { getGlobalStyle } from '../../../../../helpers'\nimport {\n  Button,\n  Divider,\n  Icon,\n  Text,\n  Title\n} from '../../../../atoms'\nimport { Column, Container } from '../../../../layout'\n\nexport interface StoreListFailedProps {\n  title?: string;\n  onClick?: () => void;\n}\n\nexport const StoreListFailed = ({ title, onClick }: StoreListFailedProps) => {\n  const handleButtonClick = () => {\n    if (onClick) {\n      onClick()\n    }\n  }\n\n  return (\n    <Column alignItems='center' gap={30}>\n      <Column gap={6}>\n        <Title\n          fontWeight='semibold'\n          headingLevel='h3'\n          textAlign='left'\n        >\n          {title}\n        </Title>\n\n        <Divider color={getGlobalStyle('--color-background-gray')} verticalMargin={0} />\n      </Column>\n\n      <Container borderRadius='20px' justifyContent='center'>\n        <Icon customSize={135} name='MapExclamationCircle' />\n      </Container>\n\n      <Text fontWeight='semibold' textAlign='center'>\n        Lo sentimos, no hemos podido cargar los locales. Intenta nuevamente.\n      </Text>\n\n      <Button\n        borderRadius='24px'\n        fontWeight='600'\n        height='45px'\n        label='Reintentar'\n        onClick={handleButtonClick}\n        size='xs'\n      />\n    </Column>\n  )\n}\n","import {\n  ChangeEvent,\n  useEffect,\n  useRef\n} from 'react'\nimport {\n  BigScreen,\n  getGlobalStyle,\n  SmallScreen\n} from '../../../../helpers'\nimport { Divider, Title } from '../../../atoms'\nimport { Column } from '../../../layout'\nimport {\n  Dropdown,\n  Field,\n  Selector\n} from '../../../molecules'\n\nexport interface StoreZoneFilterCommune {\n  commune?: string;\n  region?: string;\n}\n\nexport interface StoreZoneFilterRegion {\n  region?: string;\n}\n\nexport interface StoreZoneFilterProps {\n  commune?: string;\n  communes?: StoreZoneFilterCommune[];\n  region?: string;\n  regions?: StoreZoneFilterRegion[];\n  title?: string;\n  onCommuneChange?: (commune: string) => void;\n  onRegionChange?: (region: string) => void;\n}\n\nexport const StoreZoneFilter = ({\n  commune = '',\n  communes = [],\n  region = '',\n  regions = [],\n  title = 'Buscar zona',\n  onCommuneChange,\n  onRegionChange\n}: StoreZoneFilterProps) => {\n  const refCommune = useRef(null)\n  const refRegion = useRef(null)\n\n  const communesFiltered = communes.filter((commune) => {\n    return region ? region === commune.region : true\n  })\n\n  const communesOptions = communesFiltered.map((commune) => {\n    return commune.commune\n  })\n\n  const regionsOptions = regions.map(region => {\n    return region.region\n  })\n\n  const handleCommuneSelectChange = async (event?: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target\n\n    if (value === 'Seleccionar comuna') {\n      onCommuneChange(null)\n    } else {\n      onCommuneChange(value)\n    }\n  }\n\n  const handleCommuneSelectChangeValue = (value?: string) => {\n    if (value === 'Seleccionar comuna') {\n      onCommuneChange(null)\n    } else {\n      onCommuneChange(value)\n    }\n  }\n\n  const handleRegionSelectChange = (event?: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target\n\n    if (value === 'Seleccionar región') {\n      onRegionChange(null)\n    } else {\n      onRegionChange(value)\n    }\n\n    refCommune.current.value = 'Seleccionar comuna'\n    onCommuneChange(null)\n  }\n\n  const handleRegionSelectChangeValue = (value?: string) => {\n    if (value === 'Seleccionar región') {\n      onRegionChange(null)\n    } else {\n      onRegionChange(value)\n    }\n\n    onCommuneChange(null)\n  }\n\n  useEffect(() => {\n    if (!commune && refCommune.current) {\n      refCommune.current.value = 'Seleccionar comuna'\n    }\n    if (!region && refRegion.current) {\n      refRegion.current.value = 'Seleccionar region'\n    }\n  }, [commune, region])\n\n  return (\n    <Column gap={8}>\n      {\n        title && (\n          <>\n            <Title fontWeight='semibold' headingLevel='h3'>\n              {title}\n            </Title>\n\n            <Divider color={getGlobalStyle('--color-background-gray')} verticalMargin={0} />\n          </>\n        )\n      }\n\n      <Field label='Región' labelProps={{ fontSize: 'sm' }}>\n        <BigScreen>\n          <Column gap={6}>\n            <Dropdown\n              maxOptions={7}\n              onChange={handleRegionSelectChangeValue}\n              options={regionsOptions}\n              placeholder='Seleccionar región'\n              value={region}\n            />\n\n            <Divider color={getGlobalStyle('--color-background-gray')} verticalMargin={0} />\n          </Column>\n        </BigScreen>\n\n        <SmallScreen>\n          <Selector\n            appearance='none'\n            fontSize='md'\n            marginLess\n            onChange={handleRegionSelectChange}\n            options={regionsOptions}\n            placeholder='Seleccionar región'\n            ref={refRegion}\n          />\n        </SmallScreen>\n      </Field>\n\n      <Field label='Comuna' labelProps={{ fontSize: 'sm' }}>\n        <BigScreen>\n          <Column gap={6}>\n            <Dropdown\n              maxOptions={7}\n              onChange={handleCommuneSelectChangeValue}\n              options={communesOptions}\n              placeholder='Seleccionar comuna'\n              value={commune}\n            />\n\n            <Divider color={getGlobalStyle('--color-background-gray')} verticalMargin={0} />\n          </Column>\n        </BigScreen>\n\n        <SmallScreen>\n          <Selector\n            appearance='none'\n            fontSize='md'\n            marginLess\n            onChange={handleCommuneSelectChange}\n            options={communesOptions}\n            placeholder='Seleccionar comuna'\n            ref={refCommune}\n          />\n        </SmallScreen>\n      </Field>\n    </Column>\n  )\n}\n"],"names":[],"sourceRoot":""}