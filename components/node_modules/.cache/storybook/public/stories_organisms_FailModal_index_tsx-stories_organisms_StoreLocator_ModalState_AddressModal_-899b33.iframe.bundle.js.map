{"version":3,"file":"stories_organisms_FailModal_index_tsx-stories_organisms_StoreLocator_ModalState_AddressModal_-899b33.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAMA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;AC1GA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAGA;AAlDA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AAIA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACLA;AACA;AAKA","sources":["webpack://components/./stories/organisms/FailModal/helpers/ContentModal.tsx","webpack://components/./stories/organisms/FailModal/index.tsx","webpack://components/./stories/organisms/StoreLocator/ModalState/AddressModal/ManualAddress/index.jsx","webpack://components/./stories/organisms/StoreLocatorAlvi/ModalState/MapModal/helpers/ErrorMapMessageProps/index.tsx","webpack://components/./utils/formatRut.ts","webpack://components/./utils/index.ts","webpack://components/./utils/productsQuantity.ts","webpack://components/./utils/toCapitalize.ts","webpack://components/./utils/toKebabCase.ts"],"sourcesContent":["import React from 'react'\nimport { FailModalProps } from '..'\nimport { getGlobalStyle } from '../../../../helpers'\nimport {\n  Button,\n  Icon,\n  Text,\n  Title\n} from '../../../atoms'\nimport { Container, Spacer } from '../../../layout'\n\nconst ContentModal = ({\n  alviSite,\n  backgroundColor,\n  boldButton,\n  buttonStatus,\n  buttonText,\n  buttonWidth,\n  content,\n  contentColor,\n  contentPosition,\n  labelSecondary,\n  showButton = true,\n  sizeTitle,\n  title,\n  titleColor,\n  titlePosition,\n  unimarcSite,\n  action,\n  handleKeepAddress,\n  onClick\n}: FailModalProps) => {\n  const containerPadding = unimarcSite ? '0px 4px' : ''\n  const btnColor = getGlobalStyle(alviSite ? '--color-alvi-primary-blue' : '--color-primary-red')\n\n  return (\n    <>\n      <Spacer.Horizontal size={32} />\n      <Container padding={containerPadding}>\n        <Title\n          backgroundColor={null}\n          color={titleColor}\n          customFontSize={sizeTitle}\n          fontWeight='semibold'\n          headingLevel='h5'\n          text={title}\n          textAlign={titlePosition}\n        />\n      </Container>\n      {alviSite && (\n        <Container\n          absoluteDefault='topRight'\n          justifyContent='center'\n          maxWidth='80px'\n          padding='20px 0 0 0'\n          position='absolute'\n        >\n          <Icon\n            clickable='pointer'\n            color={getGlobalStyle('--color-icons-gray')}\n            customSize={18}\n            name='Close'\n            onClick={onClick}\n          />\n        </Container>\n      )}\n      <Spacer.Horizontal size={24} />\n      <Container padding={containerPadding}>\n        <Text\n          color={contentColor}\n          fontSize='lg'\n          fontWeight='regular'\n          textAlign={contentPosition}\n        >\n          {content}\n        </Text>\n      </Container>\n      <Spacer.Horizontal size={24} />\n      <Button\n        background={backgroundColor}\n        borderRadius='24px'\n        fontWeight={boldButton}\n        label={buttonText}\n        onClick={action}\n        size='large'\n        status={alviSite ? buttonStatus : 'initial'}\n        width={buttonWidth}\n      />\n      {showButton && (\n        <Button\n          background='transparent'\n          border={`1px solid ${btnColor}`}\n          borderRadius='24px'\n          color={btnColor}\n          fontWeight={boldButton}\n          label={labelSecondary}\n          margin='12px 0 0 0'\n          onClick={handleKeepAddress || onClick}\n          size='large'\n          type='secondary'\n          width={buttonWidth}\n        />\n      )}\n    </>\n  )\n}\n\nexport default ContentModal","import { ButtonStatus, Color } from '../../atoms'\nimport { Modal } from '../../molecules'\nimport { BigScreen, SmallScreen } from '../../../helpers/mediaQueries'\nimport { getGlobalStyle } from '../../../helpers'\nimport { TitleProps } from '../../atoms/Title/Title'\nimport ContentModal from './helpers/ContentModal'\nimport { Site } from '../../../shared/interfaces/Site'\nimport { DataResponseCart } from '../ModalWithoutStock/ModalWithoutStock'\n\nexport interface FailModalProps {\n  alviSite?: boolean;\n  arrFail?: DataResponseCart;\n  backgroundColor?: string;\n  boldButton?: string;\n  buttonStatus?: ButtonStatus;\n  buttonText?: string;\n  buttonWidth?: string;\n  colorTitle?: string;\n  content?: string;\n  contentColor?: Color;\n  contentPosition?: TitleProps['textAlign'];\n  isOpen?: boolean;\n  isOpenModalOutStock?: boolean;\n  labelSecondary?: string;\n  showButton?: boolean;\n  site?: Site;\n  sizeTitle?: string;\n  title?: string;\n  titleColor?: string;\n  titlePosition?: TitleProps['textAlign'];\n  unimarcSite?: boolean;\n  action?: () => void;\n  handleKeepAddress?: () => void;\n  handleModal?: () => void;\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n  onClick?: () => void;\n  saveAddress?: () => void;\n}\n\nexport const FailModal = ({\n  buttonStatus,\n  buttonText,\n  colorTitle,\n  content,\n  contentPosition,\n  isOpen = true,\n  labelSecondary = 'Conservar mi dirección',\n  showButton,\n  site = 'unimarc',\n  title,\n  titlePosition,\n  action,\n  handleKeepAddress,\n  handleModal = () => { return },\n  onClick\n}: FailModalProps): React.ReactElement => {\n  const unimarcSite = site === 'unimarc'\n  const alviSite = site === 'alvi'\n  const backgroundColor = getGlobalStyle(unimarcSite ? '--color-primary-red-header' : '--color-alvi-primary-blue-gradient')\n  const boldButton = getGlobalStyle(unimarcSite ? '--font-weight-bold' : '--font-weight-semibold')\n  const buttonWidth = unimarcSite ? '100%' : '280px'\n  const contentColor = unimarcSite ? 'black' : 'neutral-alvi'\n  const sizeTitle = getGlobalStyle(unimarcSite ? '--font-size-titles-xs' : '--font-size-titles-sm')\n  const titleColor = colorTitle ? colorTitle : getGlobalStyle('--color-base-black')\n  const widthContentModal = '328px'\n  const heightButton = showButton ? '346px' : '280px'\n  const minHeightModal: string = alviSite ? heightButton : 'initial'\n\n  const contentModalProps = {\n    alviSite,\n    backgroundColor,\n    boldButton,\n    buttonStatus,\n    buttonText,\n    buttonWidth,\n    colorTitle,\n    content,\n    contentColor: contentColor as Color,\n    contentPosition,\n    isOpen: true,\n    labelSecondary,\n    showButton,\n    site,\n    sizeTitle,\n    title,\n    titleColor,\n    titlePosition,\n    unimarcSite,\n    widthContentModal,\n    action,\n    handleKeepAddress,\n    handleModal: () => { return },\n    onClick\n  }\n  const contentModalPropsMobile = {\n    ...contentModalProps,\n    buttonText: 'Cambiar dirección',\n    labelSecondary: labelSecondary\n  }\n  return (\n    <>\n      <BigScreen>\n        <Modal\n          errorModal={true}\n          hiddenX\n          isOpen={isOpen}\n          maxWidth={widthContentModal}\n          minHeight={minHeightModal}\n          site={site}\n          toggle={() => { return }}\n          toggleOutside={handleModal}\n        >\n          <ContentModal {...contentModalProps} />\n        </Modal>\n      </BigScreen>\n\n      <SmallScreen>\n        <Modal\n          errorModal={true}\n          hiddenX\n          isOpen={isOpen}\n          maxWidth={widthContentModal}\n          minHeight={minHeightModal}\n          site={site}\n          toggle={null}\n          toggleOutside={handleModal}\n        >\n          <ContentModal {...contentModalPropsMobile} />\n        </Modal>\n      </SmallScreen>\n    </>\n  )\n}","import React from 'react'\nimport { getGlobalStyle } from '../../../../../../helpers'\nimport { Icon, Text } from '../../../../../atoms'\nimport {\n  Column,\n  Container,\n  Row,\n  Spacer\n} from '../../../../../layout'\n\nexport const ManualAddress = () => {\n  return (\n    <Container>\n      <Column>\n        <Spacer.Horizontal size={12} />\n        <Row alignItems='center' justifyContent='start'>\n          <Column\n            alignItems='center'\n            customWidth='10'\n          >\n            <Icon\n              clickable='auto'\n              color={getGlobalStyle('--color-campaigns-red')}\n              customSize={25}\n              name='Location'\n              onClick={null}\n            />\n          </Column>\n          <Column customWidth='auto' justifyContent='center'>\n            <Row clickable='pointer'>\n              <Text\n                clickable='auto'\n                color='black'\n                fontSize='md'\n                fontWeight='medium'\n                textAlign='left'\n                truncate={null}\n                type='span'\n                underline='none'\n              >\n                ¿No puedes encontrar tu dirección?\n              </Text>\n            </Row>\n            <Row justifyContent='between' onClick={null}>\n              <Text\n                clickable='pointer'\n                color='gray'\n                fontSize='md'\n                underline='always'\n              >\n                Ingrésala manualmente aquí\n              </Text>\n              <Spacer.Vertical size={12} />\n            </Row>\n          </Column>\n        </Row>\n        <Spacer.Horizontal size={4} />\n      </Column>\n    </Container>\n  )\n}\n","import React from 'react'\nimport { getGlobalStyle } from '../../../../../../../helpers'\nimport { Icon, Text } from '../../../../../../atoms'\nimport {\n  Column,\n  Container,\n  Row\n} from '../../../../../../layout'\n\ninterface ErrorMapProps {\n  errorAddress?: boolean;\n  errorAddressType?: string;\n  errorMapMessage?: string;\n  top?: string;\n}\n\nexport const ErrorMapMessageProps = ({\n  errorAddress,\n  errorAddressType,\n  errorMapMessage,\n  top='300'\n}: ErrorMapProps): JSX.Element => {\n\n  return errorAddress &&\n    <Container\n      justifyContent='center'\n      position='absolute'\n      top={top}\n    >\n      <Row\n        alignItems='center'\n        background={getGlobalStyle('--color-background-white')}\n        backgroundColor={errorAddressType === 'message' ? '#3B3B3B' : getGlobalStyle('--color-alvi-text-error')}\n        borderEdge='all'\n        borderRadius='12px'\n        justifyContent='start'\n        maxWidth='350px'\n        padding='10px'\n        position='relative'\n      >\n        <Column alignItems='center' customWidth='15'>\n          <Icon\n            color={getGlobalStyle('--color-icons-white')}\n            customSize={25}\n            name='Error'\n          />\n        </Column>\n        <Column\n          customWidth='auto'\n          justifyContent='center'\n        >\n          <Row>\n            <Text color='white' fontSize='md'>\n              {errorMapMessage}\n            </Text>\n          </Row>\n        </Column>\n      </Row>\n    </Container>\n}\n","export function cleanRut(rut: string): string {\n  return typeof rut === 'string' ? rut.replace(/(^(0+|[^0-9kK]+))|\\.|-/g, '').toUpperCase() : ''\n}\n\nexport function formatRut(rut: string): string {\n  rut = cleanRut(rut)\n  if (rut.length === 0) {\n    return ''\n  }\n  let result = rut.slice(-4, -1) + '-' + rut.slice(rut.length - 1)\n  for (let i = 4; i < rut.length; i += 3) {\n    result = rut.slice(-3 - i, -i) + '.' + result\n  }\n  return result\n}\n\n/**\n * validates a chilean rut\n */\n\nexport function validateRut(rut: string): boolean {\n  rut = cleanRut(rut)\n  if (rut.length === 0) {\n    return false\n  }\n  const dv = rut.slice(-1).toUpperCase()\n  const rutNumber = rut.slice(0, -1)\n  const rutNumberArray = rutNumber.split('').reverse()\n  let sum = 0\n  for (let i = 0; i < rutNumberArray.length; i++) {\n    sum += parseInt(rutNumberArray[i], 10) * (i % 6 + 2)\n  }\n  const dvCalculated = 11 - sum % 11\n  if (dvCalculated === 11) {\n    return dv === '0'\n  }\n  if (dvCalculated === 10) {\n    return dv === 'K'\n  }\n  return dv === dvCalculated.toString()\n}","export * from './toCapitalize'\nexport * from './toKebabCase'\nexport * from './formatRut'\nexport * from './productsQuantity'","const PRODUCT_QUANTITY = 'productsUnitMultiplier'\n\nconst getStorage = (): string => {\n  if (!localStorage.getItem(PRODUCT_QUANTITY))\n    localStorage.setItem(PRODUCT_QUANTITY, '{}')\n  return localStorage.getItem(PRODUCT_QUANTITY)\n}\n\nconst getQuantityByProductId = (productId: string | number): number | undefined => {\n  const products = getStorage()\n  return Object(JSON.parse(products))[productId] ?? undefined\n}\n\nexport default {\n  getQuantityByProductId\n}","export const toCapitalize = (string: string): string | null => {\n  if (typeof string === 'string') {\n    return string.charAt(0).toUpperCase() + string?.slice(1)\n  }\n  return null\n}","export const toKebabCase = (string:string):string => {\n  return string\n    .replace(/([A-Z])([A-Z])/g, '$1-$2')\n    .replace(/([a-z])([A-Z])/g, '$1-$2')\n    .replace(/[\\s_]+/g, '-')\n    .toLowerCase()\n}"],"names":[],"sourceRoot":""}