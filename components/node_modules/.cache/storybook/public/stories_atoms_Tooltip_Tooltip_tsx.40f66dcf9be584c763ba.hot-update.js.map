{"version":3,"file":"stories_atoms_Tooltip_Tooltip_tsx.40f66dcf9be584c763ba.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAmDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAGA;AAvIA","sources":["webpack://components/./stories/atoms/Tooltip/Tooltip.tsx"],"sourcesContent":["import React, { ReactNode } from 'react'\nimport classNames from 'classnames'\n\nimport styles from './Tooltip.module.css'\nimport {\n  Column,\n  Row,\n  Spacer,\n  Container\n} from '../../layout'\nimport { Icon } from '../Icon/Icon'\nimport { getGlobalStyle } from '../../../helpers'\nimport Text, { FontSize } from '../Text/Text'\nimport { ChildrenBaseContainerProps } from '../../layout/BaseContainer/BaseContainer'\n\ntype Align = 'start' | 'center' | 'end'\ntype SizeArrow = 'xs' | '2sm' | 'sm'\ntype ColorArrow = 'white' | 'black' | 'warning-light'\ntype ColorText = 'white' | 'black'\ntype ColorTitle = 'white' | 'black'\ntype Position = 'absolute' | 'relative' | 'fixed' | 'initial' | 'sticky'\ntype Type = 'top' | 'bottom' | 'left' | 'right'\ntype TextWeight = 'none' | 'hairline' | 'thin' | 'light' | 'normal' | 'medium' | 'semibold' | 'bold' | 'extrabold' | 'black';\n\nexport interface TooltipProps {\n  align?: Align;\n  alignAllItems?: Align;\n  append?: ReactNode\n  arrow?: boolean;\n  background?: string;\n  borderRadius?: string;\n  bottom?: string;\n  boxShadow?: string;\n  closeColor?: string;\n  closeIcon?: boolean;\n  colorArrow?: ColorArrow;\n  colorText?: ColorText;\n  colorTitle?: ColorTitle;\n  containerProps?: ChildrenBaseContainerProps;\n  customClassName?: string;\n  height?: string;\n  left?: string;\n  margin?: string;\n  maxWidth?: string;\n  padding?: string;\n  position?: Position;\n  positionContainer?: Position;\n  right?: string;\n  sizeArrow?: SizeArrow;\n  sizeCloseIcon?: number;\n  text?: string;\n  textComponent?: React.ReactElement\n  textSize?: FontSize;\n  textWeight?: TextWeight;\n  title?: string;\n  titleSize?: FontSize;\n  titleWeight?: TextWeight;\n  top?: string;\n  type?: Type;\n  width?: string;\n  onClick?: () => void;\n}\n\nexport const Tooltip = ({\n  align = 'center',\n  alignAllItems = 'start',\n  append,\n  arrow = false,\n  background,\n  borderRadius,\n  bottom,\n  boxShadow,\n  closeColor = getGlobalStyle('--color-base-white'),\n  closeIcon = false,\n  colorArrow,\n  colorText,\n  colorTitle,\n  containerProps,\n  customClassName,\n  height,\n  left,\n  margin,\n  maxWidth,\n  padding,\n  position = 'absolute',\n  positionContainer = 'initial',\n  right,\n  sizeArrow = 'sm',\n  sizeCloseIcon,\n  text,\n  textComponent = null,\n  textSize,\n  textWeight,\n  title,\n  titleSize,\n  titleWeight,\n  top,\n  type,\n  width,\n  onClick,\n  ...props\n}: TooltipProps): React.ReactElement => {\n\n  return (\n    <Row\n      {...containerProps}\n      justifyContent='center'\n      position={positionContainer}\n    >\n      <Column\n        {...props}\n        className={classNames(styles.container, customClassName)}\n        onClick={onClick}\n        style={{\n          background,\n          borderRadius,\n          bottom,\n          boxShadow,\n          height,\n          left,\n          margin,\n          maxWidth,\n          padding,\n          position,\n          right,\n          top,\n          width\n        }}\n      >\n        <Row justifyContent='center' >\n          <Row alignItems={alignAllItems} justifyContent='around'>\n            {/* Texts */}\n            <Column>\n              {\n                title && (\n                  <>\n                    <Text\n                      customClassName={classNames(styles.title, {\n                        [styles[`color--${colorTitle}`]]: colorTitle,\n                        [styles[`align--${align}`]]: align,\n                        [styles[`text-size--${titleSize}`]]: titleSize,\n                        [styles[`text-weight--${titleWeight}`]]: titleWeight\n                      })}\n                    >\n                      {title}\n                    </Text>\n                    <Spacer.Horizontal size={8} />\n                  </>\n                )\n              }\n              {/* in here we render a React.ReactElement his default value its null */}\n              {\n                textComponent\n              }\n              {\n                !textComponent && (\n                  <Text\n                    customClassName={classNames(styles.paragraph, {\n                      [styles[`color--${colorText}`]]: colorText,\n                      [styles[`align--${align}`]]: align,\n                      [styles[`text-size--${textSize}`]]: textSize,\n                      [styles[`text-weight--${textWeight}`]]: textWeight\n                    })}\n                  >\n                    {text}\n                  </Text>\n                )\n              }\n            </Column>\n            {\n              closeIcon && (\n                <Icon\n                  clickable='pointer'\n                  color={closeColor}\n                  customSize={sizeCloseIcon}\n                  name='Close'\n                  onClick={onClick}\n                />\n              )\n            }\n          </Row>\n        </Row>\n        {\n          arrow && (\n            <Container\n              aria-label='arrow'\n              className={classNames(styles.arrow, {\n                [styles[`arrow--${type}`]]: type,\n                [styles[`color-arrow--${colorArrow}`]]: colorArrow,\n                [styles[`size-arrow--${sizeArrow}`]]: sizeArrow\n              })}\n            />\n          )\n        }\n        { append }\n      </Column>\n    </Row>\n  )\n}\n"],"names":[],"sourceRoot":""}