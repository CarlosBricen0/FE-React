{"version":3,"file":"stories_molecules_index_ts.40f66dcf9be584c763ba.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAMA;AASA;AACA;AACA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAnEA;;;;;;;;;;;;;;;;;;;;;AChCA;AAKA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AAxFA;;;;;;;;;;;;;;;;;;;;;ACnCA;AAEA;AACA;AAKA;AACA;AAAA;AAAA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AAIA;AA5FA;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AAKA;AAKA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AAGA;AAAA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AAAA;AAEA;AAOA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AAAA;AAEA;AAEA;AAIA;AA1GA;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AAKA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAGA;AAvCA;AAmDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AAxEA;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;ACvPA;AACA;AAKA;AAMA;AACA;AACA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAjEA;;;;;;;;;;;;;;;;;;;;ACxBA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AAIA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AAxDA;;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AAIA;AAEA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AAGA;AA1JA;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AAlCA;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AA2CA;AACA;AACA;AAKA;AAGA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAnHA;;;;;;;;;;;;;;;;;;;;;;AC/EA;AAMA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAaxGA;;;;;;;;;;;;;;;;;;;;AC3BA;AAKA;AAKA;AACA;AAIA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AAIA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAKA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAAA;AAEA;AAGA;AA3DA;;;;;;;;;;;;;;;;;;;;;;ACvIA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AAmBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AA1GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://components/./stories/molecules/Acordeon/AcordeonTitle/index.tsx","webpack://components/./stories/molecules/AddToCartAndQuantity/AddToCartAndQuantity.tsx","webpack://components/./stories/molecules/CartIcon/CartIcon.tsx","webpack://components/./stories/molecules/Collapsable/Collapsable.tsx","webpack://components/./stories/molecules/Dropdown/Dropdown.tsx","webpack://components/./stories/molecules/DropdownWithRound/DropdownWithRound.tsx","webpack://components/./stories/molecules/FilterModal/FilterModal.tsx","webpack://components/./stories/molecules/Notification/Notification.tsx","webpack://components/./stories/molecules/Pagination/index.tsx","webpack://components/./stories/molecules/PasswordInput/PasswordInput.tsx","webpack://components/./stories/molecules/QuantityButton/QuantityButton.tsx","webpack://components/./stories/molecules/SelectOrderBy/SelectOrderBy.tsx","webpack://components/./stories/molecules/TimeCountDown/TimeCountDown.tsx","webpack://components/./stories/molecules/Toast/Toast.tsx","webpack://components/./stories/molecules/index.ts"],"sourcesContent":["import {\n  Column,\n  Container,\n  Row,\n  Spacer\n} from '../../../layout/index'\nimport {\n  Button,\n  ButtonProps,\n  Icon,\n  Title\n} from '../../../atoms/index'\nimport { AcordeonProps } from '../Acordeon'\nimport { Icons } from '../../../../assets/SvgComponents/SvgIcons'\n\nimport styles from '../Acordeon.module.css'\nimport { getGlobalStyle} from '../../../../helpers'\nimport React from 'react'\nimport { ChildrenBaseContainerProps } from '../../../layout/BaseContainer/BaseContainer'\n\nexport interface AcordeonTitleProps extends AcordeonProps {\n  containerProps?: ChildrenBaseContainerProps;\n  buttonProps?: Partial<ButtonProps>;\n  titleAcordeon: string;\n  role?: string;\n  isOpen?: boolean;\n  showLine?:boolean;\n  icon: keyof (typeof Icons);\n  handleIsOpen: () => void;\n  underline?: typeof Text.arguments.underline;\n}\n\nexport const AcordeonTitle = ({\n  alignItemsIcon,\n  buttonProps,\n  containerProps,\n  fontWeightText,\n  handleIsOpen,\n  heightIcon,\n  icon,\n  maxWidthText,\n  minWidthText,\n  role = 'heading',\n  showLine,\n  sizeButton,\n  titleAcordeon,\n  underline = 'none'\n}: AcordeonTitleProps): React.ReactElement => {\n  const customWidthIcon = showLine ? '10' : '100'\n  return (\n    <Container\n      className={styles.cursorPointer}\n      onClick={handleIsOpen}  \n      role={role}\n      {...containerProps}\n    >\n      <Row alignItems='center' clickable='pointer'>\n        <Column\n          clickable='pointer'\n          maxWidth={maxWidthText}\n          minWidth={minWidthText}\n        >\n          <Title\n            fontWeight={fontWeightText}\n            headingLevel='h4'\n          >\n            <Button\n              fontWeight={fontWeightText}\n              label={titleAcordeon}\n              size={sizeButton}\n              type='semibold'\n              {...buttonProps}\n              underline={underline}\n            />\n          </Title>\n        </Column>\n        <Spacer.Vertical size={8} />\n        {showLine && \n        ( \n          <Spacer.Horizontal backgroundColor={getGlobalStyle('--color-background-gray')} size={1} />\n        )}\n        \n        <Column\n          alignItems={alignItemsIcon}\n          clickable='pointer'\n          customHeight={heightIcon}\n          customWidth={customWidthIcon}\n          justifyContent='center'\n        >\n          <Icon\n            clickable='pointer'\n            color={getGlobalStyle('--color-icons-gray')}\n            name={icon}\n            sizes='xs'\n          />\n        </Column>\n      </Row>\n    </Container>\n  )\n}","import {\n  Button,\n  ButtonStatus,\n  TooltipProps\n} from '../../atoms'\nimport { Container } from '../../layout'\nimport { QuantityButton, QuantityButtonProps } from '..'\nimport { getGlobalStyle } from '../../../helpers'\nimport { QuantityVariantButton } from '../QuantityVariantButton/QuantityVariantButton'\nimport { QuantityButtonStylesProps } from '../QuantityButton/QuantityButton'\nimport { JustifyContent } from '../../layout/BaseContainer/BaseContainer'\nimport styles from './AddToCartAndQuantity.module.css'\n\nexport interface AddToCartProps {\n  buttonLabel?: string;\n  customJustifyContent?: JustifyContent;\n  customWidth?: string;\n  disabled?: boolean;\n  inputRef?: React.Ref<HTMLInputElement>;\n  refAddToCart?: React.Ref<HTMLBaseElement>;\n  isLoading?: boolean;\n  itemId?: string | number;\n  quantity?: number | string;\n  quantityButtonProps?: Omit<QuantityButtonProps, 'value'>;\n  quantityButtonStyles?: QuantityButtonStylesProps;\n  showQuantityButton?: boolean;\n  site?: 'unimarc' | 'alvi';\n  statusButton?: ButtonStatus;\n  tooltipProps?: TooltipProps;\n  variant?: 'input' | 'button';\n  handleOnClick?: (props?: AddToCartProps) => void;\n  onBlurInput?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  onKeyPress?: (e?: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\nexport const AddToCartAndQuantity = ({\n  buttonLabel = 'Agregar',\n  customJustifyContent = 'center',\n  disabled,\n  isLoading,\n  itemId,\n  quantity,\n  quantityButtonProps,\n  quantityButtonStyles,\n  site = 'unimarc',\n  statusButton,\n  variant = 'input',\n  handleOnClick\n}: AddToCartProps) => {\n  const handleAdd = () => {\n    quantityButtonProps.handleAdd({ itemId })\n  }\n\n  const handleRemove = () => {\n    quantityButtonProps.handleRemove({ itemId })\n  }\n\n  const handleChange = (e?: React.ChangeEvent<HTMLInputElement>) => {\n    quantityButtonProps.handleChange(e, { itemId })\n  }\n\n  return (\n    <Container customClassName={styles.addToCartAndQuantity} justifyContent={customJustifyContent}>\n      {\n        quantity == 0 &&\n        <Button\n          borderRadius='50px'\n          fontWeight={getGlobalStyle('--font-weight-semibold')}\n          height={quantityButtonStyles?.maxHeight || '30px'}\n          label={buttonLabel}\n          minWidth={quantityButtonStyles?.minWidth || '100px'}\n          onClick={() => {\n            handleOnClick({ itemId })\n          }}\n          site={site}\n          size='xs'\n          status={statusButton}\n          width={quantityButtonStyles?.maxWidth ?? undefined}\n        />\n      }\n\n      {\n        quantity != 0 &&\n        variant === 'button' &&\n        <QuantityVariantButton\n          buttonProps={{\n            borderRadius: '50px',\n            fontWeight: getGlobalStyle('--font-weight-semibold'),\n            height: quantityButtonStyles?.maxHeight || '35px',\n            label: 'Agregar',\n            minWidth: quantityButtonStyles?.maxWidth || '100px',\n            onClick: () => {\n              handleOnClick({ itemId })\n            },\n            size: 'xs',\n            status: statusButton,\n            width: quantityButtonStyles?.maxWidth ?? undefined\n          }}\n          disabled={statusButton === 'disabled'}\n          onChange={handleChange}\n          onDecrease={handleRemove}\n          onIncrease={handleAdd}\n          value={quantity}\n        />\n      }\n\n      {\n        quantity != 0 &&\n        variant !== 'button' &&\n        <QuantityButton\n          {...quantityButtonProps}\n          disabled={disabled}\n          handleAdd={handleAdd}\n          handleChange={handleChange}\n          handleRemove={handleRemove}\n          isLoading={isLoading}\n          quantityButtonStyles={quantityButtonStyles}\n          site={site}\n          value={quantity}\n        />\n      }\n    </Container>\n  )\n}\n","import React from 'react'\nimport { Icons } from '../../../assets/SvgComponents/SvgIcons'\nimport { getGlobalStyle } from '../../../helpers'\nimport {\n  FontSize,\n  Icon,\n  Text\n} from '../../atoms/index'\nimport { Column, Container } from '../../layout/index'\nimport styles from './CartIcon.module.css'\n\nexport type ColorQuantity = 'primary' | 'secondary' | 'gray' | 'inactive' | 'black' | 'white' | 'success' | 'error' | 'warning' | 'blue';\n\nexport interface CartIconProps {\n  backgroundQuantity?: string;\n  colorIcon?: string;\n  colorLoaderQuantity?: string;\n  colorQuantity?: ColorQuantity;\n  customSizesIcon?: number;\n  customSizesQuantity?: FontSize;\n  customSizesQuantityContainer?: string;\n  icon?: keyof (typeof Icons);\n  quantity?: number;\n  quantityLoading?: boolean;\n  site?: 'unimarc' | 'alvi';\n  total?: string;\n  onClickCart?: () => void;\n}\n\nexport const CartIcon = ({\n  backgroundQuantity = 'white',\n  colorIcon = 'white',\n  colorLoaderQuantity = getGlobalStyle('--color-primary-red-dark'),\n  colorQuantity = 'primary',\n  customSizesIcon = 24,\n  customSizesQuantity = 'sm',\n  customSizesQuantityContainer,\n  icon = 'Cart',\n  quantity = 96,\n  quantityLoading = false,\n  site = 'unimarc',\n  total,\n  onClickCart\n}: CartIconProps): React.ReactElement<CartIconProps> => {\n  const unimarcSite = site === 'unimarc'\n  const classNameSite = unimarcSite ? '' : styles.containerQuantityAlvi\n  const styleLoading = unimarcSite ? 'loading' : 'loading-alvi'\n  const customHeight = total ? '50px' : '35px'\n  return (\n    <Column\n      customHeight={customHeight}\n      minWidth='35px'\n      onClick={onClickCart}\n      position='relative'\n    >\n      <Column\n        absoluteDefault='bottomLeft'\n        alignItems='center'\n        justifyContent='center'\n        position='absolute'\n      >\n        <div className={styles.cartIcon}>\n          <Icon\n            clickable='pointer'\n            color={colorIcon}\n            customSize={customSizesIcon}\n            name={icon}\n          />\n        </div>\n        { total &&\n          <Text\n            color='white'\n            fontSize='xs'\n            lineHeight='15px'\n          >\n            {total}\n          </Text>\n        }\n      </Column>\n      {quantity > 0 && (\n        <Container\n          absoluteDefault='topRight'\n          alignItems='center'\n          backgroundColor={backgroundQuantity}\n          borderRadius='50%'\n          customClassName={classNameSite}\n          customHeight={customSizesQuantityContainer}\n          height='100%'\n          justifyContent='center'\n          maxWidth={customSizesQuantityContainer}\n          minWidth={unimarcSite ? 'initial' : customSizesQuantityContainer}\n          position='absolute'\n          role='quantityBalloon'\n        >\n          {quantityLoading && (\n            <Container customHeight='inherit' position='absolute'>\n              <div className={styles[styleLoading]} >\n                <Icon\n                  color={colorLoaderQuantity}\n                  customSize={unimarcSite ? 15 : 19}\n                  name='Loading'\n                />\n              </div>\n            </Container>\n          )}\n          {!quantityLoading && (\n            <Text\n              clickable='pointer'\n              color={colorQuantity}\n              fontSize={unimarcSite ? 'xs' : customSizesQuantity}\n              fontWeight='semibold'\n              textAlign='center'\n            >\n              {quantity}\n            </Text>\n          )}\n        </Container>\n      )\n      }\n    </Column >\n  )\n}","import { useCallback, useState } from 'react'\nimport { getGlobalStyle } from '../../../helpers'\nimport {\n  Icon,\n  Text,\n  Title\n} from '../../atoms'\nimport {\n  Column,\n  Row,\n  Spacer\n} from '../../layout'\nimport styles from './Collapsable.module.css'\n\nexport interface CollapsableProps {\n  backgroundColor?: string;\n  maxHeight?: string;\n  text?: string | HTMLElement;\n  title?: string;\n}\n\nexport const Collapsable = ({\n  backgroundColor = 'white',\n  maxHeight = '154px',\n  text,\n  title\n}: CollapsableProps) => {\n  const [display, setDisplay] = useState(false)\n\n  const handleOnClick = useCallback(() => {\n    setDisplay(!display)\n  },[display])\n\n  return (\n    <>\n      <Row\n        alignItems='center'\n        backgroundColor={backgroundColor}\n        borderRadius='32px'\n        clickable='pointer'\n        maxWidth={getGlobalStyle('--width-max-desktop')}\n        minHeight='54px'\n        onClick={handleOnClick}\n        padding='0px 24px'\n      >\n        <>\n          <Column clickable='pointer'>\n            <Title\n              color={getGlobalStyle('--color-neutral-gray-dark')}\n              customFontSize={getGlobalStyle('--font-size-lg')}\n              fontWeight='semibold'\n              headingLevel='h3'\n            >\n              {title}\n            </Title>\n          </Column>\n          <Icon\n            clickable='pointer'\n            color={getGlobalStyle('--color-neutral-gray-dark')}\n            customSize={18}\n            name='DropDownClose'\n          />\n        </>\n      </Row>\n      <Row\n        customClassName={styles[`textContainer--${display ? 'displayed' : 'collapsed'}`]}\n        maxHeight={display ? maxHeight : '0px'}\n        maxWidth={getGlobalStyle('--width-max-desktop')}\n        overflow='auto'\n        padding='0px 48px 0px 24px'\n        scrollbarHidden\n      >\n        {typeof text === 'string' ? (\n          <Text\n            color='neutral-dark'\n            customClassName={styles.text}\n            fontSize='lg'\n          >\n            {text}\n          </Text>\n        ) : (\n          <Row customClassName={styles.text}>\n            {text}\n          </Row>\n        )}\n      </Row>\n      <Spacer.Horizontal size={18} />\n      <Spacer.Horizontal size={2} />\n    </>\n  )\n}","import React, { useState } from 'react'\nimport { Text, Icon } from '../../atoms'\nimport {\n  Column,\n  Container,\n  Row\n} from '../../layout'\nimport { getGlobalStyle } from '../../../helpers'\nimport { useDropdownMaxHeight, useDropdownOutside } from './helpers'\n\nexport interface DropdownProps {\n  arrow?: boolean;\n  arrowColor?: string;\n  maxOptions?: number;\n  options?: string[];\n  placeholder?: string;\n  onChange?: (selected?: string) => void;\n  value?: string;\n}\n\nexport const Dropdown = ({\n  arrow = true,\n  arrowColor = getGlobalStyle('--color-text-gray-light'),\n  maxOptions = 4,\n  options = [],\n  placeholder = 'Selecciona una opción',\n  onChange,\n  value\n}: DropdownProps) => {\n  const [open, setOpen] = useState<boolean>()\n\n  const { maxHeight } = useDropdownMaxHeight({ maxOptions })\n\n  const handleDropdownItemClick = (option: string) => {\n    return () => {\n      setOpen(false)\n\n      if (option === value) {\n        onChange(placeholder)\n      } else {\n        onChange(option)\n      }\n    }\n  }\n\n  const handleDropdownIconClick = () => {\n    setOpen(!open)\n  }\n\n  const handleDropdownClickOutside = () => {\n    setOpen(false)\n  }\n\n  const ref = useDropdownOutside<HTMLDivElement>(handleDropdownClickOutside)\n\n  return (\n    <Container position='relative' ref={ref}>\n      <Row\n        alignItems='center'\n        clickable='pointer'\n        justifyContent='between'\n        onClick={handleDropdownIconClick}\n        role='dropdown'\n      >\n        <Text clickable='pointer' fontSize='md'>\n          {value || placeholder}\n        </Text>\n\n        {\n          arrow && (\n            <Icon\n              clickable='pointer'\n              color={arrowColor}\n              name='DropDownClose'\n            />\n          )\n        }\n      </Row>\n\n      {\n        open && (\n          <Container\n            absoluteDefault={null}\n            padding='32px 0 0'\n            position='absolute'\n            zIndex='1'\n          >\n            <Column\n              backgroundColor={getGlobalStyle('--color-background-white')}\n              borderRadius={getGlobalStyle('--border-radius-2sm')}\n              boxShadow='0px 6px 10px rgba(27, 33, 56, 0.15)'\n              gap='8px'\n              maxHeight={`${maxHeight}px`}\n              overflow='auto'\n              padding='12px'\n            >\n              {\n                options?.map((option, index) => {\n                  return (\n                    <Container\n                      alignItems='center'\n                      backgroundColor={option === value ? getGlobalStyle('--color-background-gray-light') : getGlobalStyle('--color-background-white')}\n                      borderRadius='2px'\n                      clickable='pointer'\n                      key={index}\n                      minHeight='35px'\n                      onClick={handleDropdownItemClick(option)}\n                      padding='0 8px'\n                    >\n                      <Text\n                        clickable='pointer'\n                        fontSize='md'\n                        lineHeight='19px'\n                      >\n                        {option}\n                      </Text>\n                    </Container>\n                  )\n                })\n              }\n            </Column>\n          </Container>\n        )\n      }\n    </Container>\n  )\n}\n","import classNames from 'classnames'\nimport React, { useState } from 'react'\nimport {\n  BigScreen,\n  getGlobalStyle,\n  SmallScreen\n} from '../../../helpers'\nimport {\n  Backbone,\n  Icon,\n  Link,\n  Picture,\n  Text,\n  Title\n} from '../../atoms'\nimport {\n  Column,\n  Container,\n  Row,\n  Vertical\n} from '../../layout'\nimport styles from './DropdownWithRound.module.css'\n\nexport interface DataBody {\n  image: string;\n  name: string;\n  href: string;\n}\n\nexport interface DropdownWithRoundProps {\n  customLabelDropdown?: string;\n  dataBody: DataBody[] | [];\n  isOpen: boolean;\n  linkWrapper?: React.FunctionComponent;\n  numberPerRow?: number;\n  showMore?: boolean;\n  title: string;\n  handleChangeDropDown?: () => void;\n  handleOnClickCard?: () => void;\n}\n\ninterface HeaderDropdownProps {\n  classNameWithAnimateIcon: string;\n  labelDropdown: string;\n  showMore?: boolean;\n  title: string;\n  handleChangeDropDown?: () => void;\n}\n\nconst HeaderDropdown = ({\n  classNameWithAnimateIcon,\n  labelDropdown,\n  showMore = true,\n  title,\n  handleChangeDropDown\n}: HeaderDropdownProps): React.ReactElement => {\n  return (\n    <Column padding='19px 20px'>\n      <Row alignItems='center' justifyContent='between'>\n        <Title fontWeight='semibold'>{title}</Title>\n        {showMore && (\n          <Row\n            alignItems='center'\n            clickable='pointer'\n            customClassName={classNameWithAnimateIcon}\n            customWidth='max-content'\n            justifyContent='center'\n            onClick={handleChangeDropDown}\n          >\n            <Text\n              clickable='pointer'\n              color='neutral-dark'\n              fontWeight='semibold'\n              underline='always'\n            >\n              {labelDropdown}\n            </Text>\n            <Vertical size={8} />\n            <Icon\n              clickable='pointer'\n              color={getGlobalStyle('--color-neutral-gray-dark')}\n              name='DropDownClose'\n            />\n          </Row>\n        )}\n      </Row>\n    </Column>\n  )\n}\n\ninterface ItemRoundProps {\n  customWithEachItem: string;\n  data: DataBody;\n  isErrorImg: boolean;\n  isMobile?: boolean;\n  linkWrapper?: React.FunctionComponent;\n  setIsErrorImg: React.Dispatch<React.SetStateAction<boolean>>;\n  handleOnClickCard?: () => void;\n}\n\nconst ItemRound = ({\n  customWithEachItem,\n  data,\n  isErrorImg,\n  isMobile,\n  linkWrapper,\n  setIsErrorImg,\n  handleOnClickCard\n}: ItemRoundProps): React.ReactElement => {\n  const sizeCircle: number = isMobile ? 100 : 200\n  const marginContainer: string = isMobile ? '0px 12px 0px 0px' : '40px 0px 0px 0px'\n  const sizeTitleItem = isMobile ? 'md' : 'xl'\n\n  return (\n    <Column\n      alignItems='center'\n      customWidth={customWithEachItem}\n      justifyContent='center'\n      margin={marginContainer}\n      minWidth={`${sizeCircle}px`}\n      onClick={handleOnClickCard}\n    >\n      <Column\n        alignItems='center'\n        backgroundColor={getGlobalStyle('--color-neutral-anti-flash')}\n        borderRadius='50%'\n        justifyContent='center'\n        maxHeight={`${sizeCircle}px`}\n        maxWidth={`${sizeCircle}px`}\n        minHeight={`${sizeCircle}px`}\n        minWidth={`${sizeCircle}px`}\n      >\n        <Link\n          customClassName={styles[`link${sizeCircle}`]}\n          href={data.href}\n          underline='none'\n          wrapper={linkWrapper}\n        >\n          {isErrorImg || !data.image ? (\n            <Row clickable='pointer' maxWidth={`${sizeCircle}px`} >\n              <Backbone borderRadius='50%' height={sizeCircle} />\n            </Row>\n          ) : (\n            <Picture\n              alt={data.name}\n              borderRadius='50%'\n              hasURL\n              height='100%'\n              onError={() => {\n                setIsErrorImg(true)\n              }}\n              src={data.image}\n              width='100%'\n            />\n          )}\n        </Link>\n      </Column>\n      <Link href={data.href} underline='none' >\n        <Row justifyContent='center' padding='9px 12px 0'>\n          <Text\n            clickable='pointer'\n            color='black'\n            fontSize={sizeTitleItem}\n            textAlign='center'\n            truncate={20}\n          >\n            {data?.name}\n          </Text>\n        </Row>\n      </Link>\n    </Column>\n  )\n}\n\nexport const DropdownWithRound = ({\n  customLabelDropdown,\n  dataBody,\n  isOpen,\n  linkWrapper,\n  numberPerRow = 5,\n  showMore,\n  title,\n  handleChangeDropDown,\n  handleOnClickCard\n}: DropdownWithRoundProps) => {\n  const [isErrorImg, setIsErrorImg] = useState<boolean>(false)\n  const defaultLabelDropdown: string = isOpen ? 'Ver menos' : 'Ver todos'\n  const labelDropdown: string = customLabelDropdown || defaultLabelDropdown\n  const customWithEachItem: string = (100 / numberPerRow).toString()\n  const classNameWithAnimateIcon: string = classNames(styles['icon-dropdown'], {\n    [styles['icon-dropdown--open']]: isOpen\n  })\n\n  const headerProps: HeaderDropdownProps = {\n    classNameWithAnimateIcon,\n    labelDropdown,\n    title,\n    handleChangeDropDown\n  }\n\n  const BodyDropdown = ({ isMobile }: { isMobile?: boolean }) => {\n    const itemsProps: Omit<ItemRoundProps, 'data'> = {\n      customWithEachItem,\n      isErrorImg,\n      isMobile,\n      linkWrapper,\n      handleOnClickCard,\n      setIsErrorImg\n    }\n\n    return (\n      <Container\n        isWrap={!isMobile}\n        justifyContent={isMobile ? 'start' : 'center'}\n        overflow={isMobile ? 'scroll' : 'auto'}\n        padding={isMobile ? '12px' : '0px 20px'}\n      >\n        {dataBody?.map((data, index) => {\n          if (!isMobile && !isOpen && index > numberPerRow - 1) return null\n          return (\n            <ItemRound\n              {...itemsProps}\n              data={data}\n              key={index}\n            />\n          )\n        })}\n      </Container >\n    )\n  }\n\n  return (\n    <>\n      <BigScreen>\n        <>\n          <HeaderDropdown showMore={showMore} {...headerProps} />\n          <BodyDropdown />\n        </>\n      </BigScreen>\n      <SmallScreen>\n        <>\n          <HeaderDropdown showMore={false} {...headerProps} />\n          <BodyDropdown isMobile />\n        </>\n      </SmallScreen>\n    </>\n  )\n}","import React from 'react'\nimport {\n  Container,\n  Row,\n  Column\n} from '../../layout'\nimport {\n  Button,\n  Divider,\n  Icon,\n  Text\n} from '../../atoms'\nimport { getGlobalStyle } from '../../../helpers'\nimport classNames from 'classnames'\nimport styles from './FilterModal.module.css'\n\nexport interface FilterModalProps {\n  title: string;\n  buttonName: string;\n  children?: React.ReactNode;\n  onApplyFilter?: () => void;\n  onCloseModal?: () => void;\n}\n\nexport const FilterModal = ({\n  title = '',\n  buttonName = '',\n  children,\n  onApplyFilter,\n  onCloseModal\n}: FilterModalProps): React.ReactElement => {\n  return (\n    <Container\n      alignItems='stretch'\n      backgroundColor={getGlobalStyle('--color-background-gray')}\n      className={classNames(styles.modal)}\n      position='fixed'\n      zIndex={getGlobalStyle('--z-index-999')}\n    >\n      <Container\n        customHeight='100%'\n        customWidth='100%'\n        isWrap\n        position='absolute'\n      >\n        <Column\n          backgroundColor={getGlobalStyle('--color-background-white')}\n          boxShadow='4px 4px 18px rgba(0, 0, 0, 0.05)'\n          className={classNames(styles.internalContainer)}\n          customHeight='100vh'\n          margin='10px 10px 0 10px'\n          padding='15px'\n          width='100%'\n        >\n          <Row justifyContent='between'>\n            <Text fontWeight='semibold' type='div' >{title}</Text>\n            <Icon\n              color={getGlobalStyle('--color-neutral-black')}\n              name='Close'\n              onClick={onCloseModal}\n            />\n          </Row>\n          <Row>\n            <Divider verticalMargin={6}/>\n          </Row>\n          {children}\n        </Column>\n        <Column\n          alignItems='stretch'\n          backgroundColor={getGlobalStyle('--color-background-white')}\n          boxShadow='0 -4px 18px rgba(0, 0, 0, 0.1)'\n          customClassName={classNames(styles.buttonColumn)}\n          customHeight='112px'\n          position='sticky'\n          width='100%'\n        >\n          <div className={styles.button}>\n            <Button\n              borderRadius='24px'\n              height='45px'\n              label={buttonName}\n              onClick={onApplyFilter}\n              width='100%'\n            />\n          </div>\n        </Column>\n      </Container>\n    </Container>\n  )\n}","import classNames from 'classnames'\nimport { Icons } from '../../../assets/SvgComponents/SvgIcons'\nimport { getGlobalStyle } from '../../../helpers'\nimport { Site } from '../../../shared/interfaces/Site'\nimport { Icon, Text } from '../../atoms'\nimport { Container } from '../../layout'\nimport { BaseContainerProps } from '../../layout/BaseContainer/BaseContainer'\nimport styles from './Notification.module.css'\n\nexport type NotificationAlign = 'top-left' | 'top-center' | 'top-right'\n\nexport interface NotificationProps {\n  align?: NotificationAlign\n  icon?: keyof (typeof Icons)\n  margin?: string\n  message?: React.ReactNode\n  padding?: string\n  position?: BaseContainerProps['position']\n  show?: boolean\n  showCloseIcon?: boolean\n  site?: Site\n  onClose?: () => void\n}\n\nconst borderRadiusBySite = {\n  alvi: getGlobalStyle('--border-radius-md'),\n  unimarc: '0px'\n}\n\nexport const Notification = ({\n  align = 'top-right',\n  icon,\n  margin,\n  message,\n  padding,\n  position = 'absolute',\n  show,\n  showCloseIcon,\n  site = 'unimarc',\n  onClose\n} : NotificationProps) => {\n  if (!show) return null\n\n  return (\n    <Container\n      borderRadius={borderRadiusBySite[site]}\n      className={classNames(\n        styles['notification'],\n        {\n          [styles[`notification--${align}`]]: align\n        }\n      )}\n      margin={margin}\n      maxWidth='340px'\n      padding={padding}\n      position={position}\n    >\n      <Container className={styles['icon']} customWidth='fit-content'>\n        <Icon \n          color='white'\n          name={icon ?? 'Info'}\n          sizes='sm'\n        />\n      </Container>\n      <Text\n        color='white'\n        fontSize='md'\n        type='span'\n      >\n        {message}\n      </Text>\n\n      {showCloseIcon && \n        <Container margin='0 0 0 15px' width='fit-content'>\n          <Icon \n            clickable='pointer'\n            color='white'\n            name='Close'\n            onClick={onClose}\n            sizes='xs'\n          />\n        </Container>\n      }\n    </Container>\n  )\n}","import React from 'react'\nimport classNames from 'classnames'\nimport { getGlobalStyle } from '../../../helpers'\nimport { Icon, Link, Text } from '../../atoms'\nimport {\n  Column,\n  Row,\n  Spacer\n} from '../../layout'\nimport { ChildrenBaseContainerProps } from '../../layout/BaseContainer/BaseContainer'\nimport style from './index.module.css'\n\nexport interface PaginationProps {\n  backgroundCurrent?: string;\n  currentPage: number;\n  isVisableButtonLeft?: boolean;\n  isVisableButtonRight?: boolean;\n  isVisableButtons?: boolean;\n  items: Array<number | string>;\n  linkWrapper?: React.FunctionComponent;\n  maxWidth?: string;\n  path?: string;\n  redirect?: boolean;\n  urlParams?: string;\n  handleNextPage?: () => void\n  handleOnClick: (value?: number) => void\n  handlePrevPage?: () => void\n}\n\nexport const Pagination = ({\n  backgroundCurrent = getGlobalStyle('--color-background-primary'),\n  currentPage = 0,\n  isVisableButtonLeft = false,\n  isVisableButtonRight = false,\n  isVisableButtons = false,\n  items,\n  linkWrapper,\n  maxWidth = 'max-content',\n  path,\n  redirect = true,\n  urlParams = '',\n  handleNextPage,\n  handleOnClick,\n  handlePrevPage\n}: PaginationProps): React.ReactElement => {\n  const buttonProps: ChildrenBaseContainerProps = {\n    alignItems: 'center',\n    border: `1px solid ${getGlobalStyle('--color-neutral-gray-dark')}`,\n    borderRadius: '50%',\n    clickable: 'pointer',\n    justifyContent: 'center',\n    margin: '0 2px 0 2px',\n    maxWidth: 'max-content',\n    minHeight: '32px',\n    minWidth: '32px'\n  }\n\n  const getUrl = (item) => {\n    if (urlParams) {\n      return `${path}?${urlParams}&page=${item}`\n    }\n    return `${path}?page=${item}`\n  }\n\n  const borderWhite = `1px solid ${getGlobalStyle('--color-base-white')}`\n\n  const ItemPagination = ({ item }: { item: number }) => {\n    const itemCurrentPage = item === currentPage\n    return (\n      <Link\n        href={getUrl(item)}\n        onClick={() => {\n          handleOnClick(item)\n        }}\n        preventDefault={!redirect}\n        underline='none'\n        wrapper={linkWrapper}\n      >\n        <Column\n          {...buttonProps}\n          backgroundColor={itemCurrentPage ? backgroundCurrent : 'tranparent'}\n          border={borderWhite}\n          customClassName={classNames(\n            style['no-select'],\n            style['item--base'],\n            { [style['animation--select']]: itemCurrentPage }\n          )}\n        >\n          <Text\n            clickable='pointer'\n            color={itemCurrentPage ? 'white' : 'black'}\n            fontSize='lg'\n            fontWeight={itemCurrentPage ? 'bold' : 'semibold'}\n          >\n            {item}\n          </Text>\n        </Column>\n      </Link>\n    )\n  }\n\n  const ItemDotted = () => {\n    return (\n      <Column\n        {...buttonProps}\n        border={borderWhite}\n        customClassName={style['no-select']}\n      >\n        ...\n      </Column>\n    )\n  }\n\n  return (\n    <Column\n      alignItems='center'\n      justifyContent='center'\n      maxWidth={maxWidth}\n    >\n      <Row justifyContent='between'>\n        {isVisableButtons && isVisableButtonLeft\n          ? (\n            <Link\n              href={getUrl(currentPage - 1)}\n              onClick={handlePrevPage}\n              preventDefault={!redirect}\n              underline='none'\n              wrapper={linkWrapper}\n            >\n              <Column {...buttonProps}>\n                <Icon\n                  clickable='pointer'\n                  color={getGlobalStyle('--color-icons-gray')}\n                  name='ArrowBackNavigate'\n                />\n              </Column>\n            </Link>\n          )\n          : (\n            <Column maxWidth='max-content'>\n              <Spacer.Vertical size={32} />\n            </Column>\n          )\n        }\n        <Column>\n          <Row\n            justifyContent='center'\n            padding='0 12px'\n          >\n            {items?.map(item => {\n              if (typeof item !== 'number') return <ItemDotted key={item} />\n              return <ItemPagination item={item} key={item} />\n            })}\n          </Row>\n        </Column>\n        {\n          isVisableButtons && isVisableButtonRight\n            ? (\n              <Link\n                href={getUrl(currentPage + 1)}\n                onClick={handleNextPage}\n                preventDefault={!redirect}\n                underline='none'\n                wrapper={linkWrapper}\n              >\n                <Column {...buttonProps} >\n                  <Icon\n                    clickable='pointer'\n                    color={getGlobalStyle('--color-icons-gray')}\n                    name='ArrowRightNavigate'\n                  />\n                </Column>\n              </Link>\n            )\n            : (\n              <Column maxWidth='max-content'>\n                <Spacer.Vertical size={32} />\n              </Column>\n            )\n        }\n      </Row >\n    </Column >\n  )\n}\n","import { useState } from 'react'\nimport { InputAdornment } from '..'\nimport { getGlobalStyle } from '../../../helpers'\nimport { Icon, SizeIcon } from '../../atoms'\nimport { InputAdornmentProps } from '../InputAdornment/InputAdornment'\n\nexport interface PasswordInputProps extends InputAdornmentProps {\n  initialShow?: boolean;\n  sizesIcon?: SizeIcon;\n  customSize?: number;\n}\n\nexport const PasswordInput = ({\n  initialShow = false,\n  sizesIcon = 'sm',\n  customSize,\n  ...props\n}: PasswordInputProps) => {\n  const [show, setShow] = useState(initialShow)\n\n  const handleToggle = () => {\n    setShow(!show)\n  }\n\n  const iconName = show ? 'Eye' : 'EyeSlash'\n\n  return (\n    <InputAdornment\n      {...props}\n      inputAdornmentEnd={\n        props.inputAdornmentEnd ?\n          props.inputAdornmentEnd\n          :\n          <Icon\n            clickable='pointer'\n            color={getGlobalStyle('--color-icons-gray')}\n            customSize={customSize}\n            data-testid='password-input-toggle'\n            name={iconName}\n            onClick={handleToggle}\n            sizes={sizesIcon}\n          />\n      }\n      type={show ? 'text' : 'password'}\n    />\n  )\n}","import React, { useState } from 'react'\nimport { getGlobalStyle } from '../../../helpers'\nimport { Site } from '../../../shared/interfaces/Site'\nimport { Icon, Input } from '../../atoms'\nimport { Container, Row } from '../../layout'\nimport { AddOrRemoveBtn } from './AddRemoveBtn'\nimport styles from './QuantityButton.module.css'\n\nexport interface QuantityButtonStylesProps {\n  fontSize?: 'sm' | 'md' | 'lg';\n  inputMaxHeight?: string;\n  margin?: string;\n  maxHeight: string;\n  maxWidth: string;\n  minWidth?: string;\n  sizeCircle: number;\n}\n\nexport interface QuantityButtonProps {\n  alert?: string;\n  alternativeBackground?: string;\n  autoFocus?: boolean;\n  disabled?: boolean;\n  disabledInput?: boolean;\n  disabledLess?: boolean;\n  disabledPlus?: boolean;\n  isLoading?: boolean;\n  margin?: string;\n  maxHeight?: string;\n  inputRef?: React.Ref<HTMLInputElement>;\n  maxQuantity?: number;\n  maxWidth?: string;\n  oldQuantityBtn?: boolean;\n  placeholder?: string;\n  quantity?: number;\n  quantityButtonStyles?: QuantityButtonStylesProps;\n  rebranding?: boolean\n  site?: 'unimarc' | 'alvi';\n  size?: 'md' | 'sm';\n  textAfterQuantity?: string;\n  value?: number | string;\n  handleAdd: (props?: unknown) => void;\n  handleChange?: (e?: React.ChangeEvent<HTMLInputElement> | number, props?: unknown) => void;\n  handleOnClick?: (props?: unknown) => void;\n  handleRemove: (props?: unknown) => void;\n  onBlurInput?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  onKeyPress?: (e?: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\nconst quantityParams = (site: Site, alternativeBackground: string) => {\n  return {\n    siteColor: alternativeBackground || (\n      site === 'unimarc' ?\n        getGlobalStyle('--color-primary-red-qty-button') :\n        getGlobalStyle('--color-alvi-primary-blue-gradient')\n    ),\n    iconSiteColor: site === 'unimarc' ?\n      getGlobalStyle('--color-primary-red') :\n      getGlobalStyle('--color-alvi-primary-blue')\n  }\n}\n\nconst getQuantityMessage = (\n  isMaxQuantity: boolean,\n  showValue: string | number,\n  textAfterQuantity: string\n) => {\n  if (textAfterQuantity && isMaxQuantity) {\n    return `Máx ${showValue} ${textAfterQuantity}`\n  }\n  if (textAfterQuantity && !isMaxQuantity) {\n    return `${showValue} ${textAfterQuantity}`\n  }\n  if (!textAfterQuantity && isMaxQuantity) {\n    return `Máx ${showValue}`\n  }\n  return showValue\n}\n\nexport const QuantityButton = ({\n  alternativeBackground,\n  disabled = false,\n  disabledInput = false,\n  disabledLess = false,\n  disabledPlus = false,\n  isLoading = false,\n  maxQuantity = 100,\n  quantity,\n  quantityButtonStyles = {\n    fontSize: 'md',\n    margin: '0px',\n    maxHeight: '35px',\n    maxWidth: '100%',\n    sizeCircle: 25\n  },\n  site = 'unimarc',\n  textAfterQuantity = '',\n  value,\n  handleAdd,\n  handleRemove,\n  handleChange\n}: QuantityButtonProps): React.ReactElement => {\n  const [shake, setShake] = useState(false)\n\n  const getQuantity = parseFloat(`${quantity || value}`)\n  const showValue = isLoading ? '' : value\n  const isMaxQuantity = getQuantity >= parseFloat(`${maxQuantity}`)\n  const isMinQuantity = getQuantity == 0\n  const isRightDisabled = disabled || disabledPlus || isMaxQuantity\n  const isLeftDisabled = disabled || disabledLess || isMinQuantity\n  const quantityMessage = getQuantityMessage(isMaxQuantity, showValue, textAfterQuantity)\n\n  const { siteColor, iconSiteColor } = quantityParams(site, alternativeBackground)\n\n  const handleValidateInput = (e) => {\n    if (/([a-zA-Z]|[`!@#$%^&*()_+\\-=[\\]{}':\"\\\\|,.<>/?~])/.test(e.target.value)) return\n    if (e.target.value == '' || e.target.value == null) e.target.value = 1\n\n    if (e.target.value <= maxQuantity) {\n      handleChange(e)\n    }\n  }\n\n  const addChake = () => {\n    setShake(true)\n    setTimeout(() => { return setShake(false) }, 2000)\n  }\n\n  return (\n    <Container\n      alignItems='center'\n      background={siteColor}\n      backgroundColor={siteColor}\n      borderRadius={quantityButtonStyles.maxHeight}\n      customClassName={shake ? styles['quantityBtn--shake'] : ''}\n      justifyContent='center'\n      margin={quantityButtonStyles.margin}\n      maxHeight={quantityButtonStyles.maxHeight}\n      maxWidth={quantityButtonStyles.maxWidth}\n      minWidth={quantityButtonStyles.minWidth}\n      position='relative'\n      tagName='article'\n    >\n      <AddOrRemoveBtn\n        alternativeBackground={siteColor}\n        circleStyle={{\n          iconColor: iconSiteColor,\n          sizeButton: quantityButtonStyles.maxHeight,\n          sizeCircle: quantityButtonStyles.sizeCircle\n        }}\n        disabled={isLeftDisabled}\n        handleQuantity={handleRemove}\n        handleShake={addChake}\n        site={site}\n        type='left'\n      />\n      {!isLoading ? (\n        <Input\n          background={getGlobalStyle('--color-base-transparent')}\n          color={getGlobalStyle('--color-base-white')}\n          disabled={disabled || isLoading || disabledInput || isMaxQuantity}\n          fontSize={quantityButtonStyles.fontSize}\n          height={quantityButtonStyles.maxHeight}\n          maxWidth='100%'\n          onChange={handleValidateInput}\n          type='text'\n          value={quantityMessage}\n          width='100%'\n        />\n      ) : (\n        <Row className={styles.loading}>\n          <Icon\n            color={getGlobalStyle('--color-alvi-neutral-white')}\n            customSize={20}\n            name='Loading'\n          />\n        </Row>\n      )\n      }\n      <AddOrRemoveBtn\n        alternativeBackground={siteColor}\n        circleStyle={{\n          iconColor: iconSiteColor,\n          sizeButton: quantityButtonStyles.maxHeight,\n          sizeCircle: quantityButtonStyles.sizeCircle\n        }}\n        disabled={isRightDisabled}\n        handleQuantity={handleAdd}\n        handleShake={addChake}\n        site={site}\n        type='right'\n      />\n    </Container>\n  )\n}\n","import React,\n{\n  useEffect,\n  useRef,\n  useState\n} from 'react'\nimport classNames from 'classnames'\nimport {\n  Column,\n  Container,\n  Row\n} from '../../layout'\nimport { Icon, Text } from '../../atoms'\nimport { getGlobalStyle } from '../../../helpers'\nimport styles from './SelectOrderBy.module.css'\n\ninterface Option {\n  orderKey: string;\n  value: string;\n}\n\nexport interface SelectByOptions {\n  options?: Array<Option>;\n  selected?: string;\n  onClick?: (e: string) => void;\n}\n\nexport const SelectOrderBy = ({\n  options = [\n    { orderKey: 'a', value: 'Recomendados' },\n    { orderKey: 'b', value: 'Precio mayor a menor' },\n    { orderKey: 'c', value: 'Precio menor a mayor' },\n    { orderKey: 'd', value: 'De la A la Z' },\n    { orderKey: 'e', value: 'De la Z a la A' },\n    { orderKey: 'f', value: 'Más comprados' },\n    { orderKey: 'g', value: 'Más nuevos' },\n    { orderKey: 'h', value: 'Mejores descuentos' }\n  ],\n  onClick = () => { return undefined }\n}: SelectByOptions): React.ReactElement<SelectByOptions> => {\n  const [itemSelected, setItemSelected] = useState(options?.[0]?.value)\n  const [showOptions, setShowOptions] = useState(false)\n  const onCloseRef = useRef(null)\n\n  const handleShowOptions = () => {\n    setShowOptions(!showOptions)\n  }\n\n  useEffect(() => {\n    const clickOutside = (e) => {\n      if(onCloseRef?.current?.contains(e?.target)) {\n        return\n      }\n      setShowOptions(false)\n    }\n\n    document.body.addEventListener('mousedown', clickOutside)\n    return () => {\n      document.body.removeEventListener('mousedown', clickOutside)\n    }\n  }, [showOptions])\n\n  const onOptionClick = (e) => {\n    setItemSelected(e?.target?.innerHTML)\n    setShowOptions(false)\n    onClick(e?.target?.innerHTML)\n  }\n\n  return (\n    <Container isWrap>\n      <Row>\n        <Text\n          customClassName={styles.textCursor}\n          customColor={getGlobalStyle('--color-neutral-dusty-gray')}\n          type='span'\n        >\n          Ordenar por\n        </Text>\n        <Text\n          customClassName={styles.separator}\n          customColor={getGlobalStyle('--color-neutral-dusty-gray')}\n          type='span'\n        >\n          |\n        </Text>\n        <div\n          className={styles.clickContainer}\n          onClick={handleShowOptions}\n          ref={onCloseRef}\n        >\n          <Text\n            customClassName={`${styles.selectedText} ${styles.textCursor}`}\n            fontWeight='semibold'\n            type='div'\n          >\n            {itemSelected}\n          </Text>\n          <div className={styles.iconContainer}>\n            <Icon\n              color={getGlobalStyle('--color-neutral-black')}\n              customSize={16}\n              name={!showOptions ? 'DropDownCloseV2' : 'DropDownOpenV2'}\n            />\n          </div>\n        </div>\n      </Row>\n      <Column\n        borderRadius='8px'\n        className={classNames(styles.optionsContainer, {\n          [styles[`display--options`]]: showOptions,\n          [styles[`hide--options`]]: !showOptions\n        })}\n        maxWidth='240px'\n        width='100%'\n      >\n        <ul className={styles.ul}>\n          {options?.map?.((option) => {\n            return (\n              <li\n                className={styles.list}\n                key={option.orderKey}\n                onClick={onOptionClick}\n                value={option?.value}\n              >\n                {option?.value}\n              </li>)\n          })}\n        </ul>\n      </Column>\n    </Container>\n  )\n}","import {\n  useEffect,\n  useRef,\n  useState\n} from 'react'\nimport {\n  BigScreen,\n  getGlobalStyle,\n  SmallScreen\n} from '../../../helpers'\nimport { Text } from '../../atoms'\nimport {\n  Column,\n  Container,\n  Row\n} from '../../layout'\n\nexport interface TimeCountDownProps {\n  endDate: Date;\n  startDate: Date;\n  onEnd?: () => void;\n  onStart?: () => void;\n}\n\ninterface TimeSquareProps {\n  showDivider?: boolean\n  time: number\n  title?: string\n}\n\nconst TimeSquare = ({\n  showDivider = false,\n  time,\n  title\n}: TimeSquareProps) => {\n  return (\n    <>\n      <BigScreen>\n        <Column alignItems='start'>\n          <Row alignItems='center' gap={4}>\n            <Container\n              alignItems='center'\n              backgroundColor={getGlobalStyle('--color-neutral-gray-light')}\n              borderRadius={getGlobalStyle('--border-radius-2sm')}\n              justifyContent='center'\n              minHeight='55px'\n              minWidth='55px'\n              padding='4px 8px'\n              position='relative'\n              title={title}\n              width='fit-content'\n            >\n              <Text\n                fontSize='5xl'\n                fontWeight='bold'\n                textAlign='center'\n              >\n                {time}\n              </Text>\n\n              <Container\n                absoluteDefault='bottomLeft'\n                justifyContent='center'\n                margin='0 0 -24px 0'\n                position='absolute'\n              >\n                <Text textAlign='center'>\n                  {title}\n                </Text>\n\n              </Container>\n            </Container>\n            {\n              showDivider && (\n                <Container width='fit-content'>\n                  <Text fontSize='5xl'>\n                    :\n                  </Text>\n                </Container>\n              )\n            }\n          </Row>\n        </Column>\n      </BigScreen>\n\n      <SmallScreen>\n        <Column alignItems='start'>\n          <Row alignItems='center' gap={4}>\n            <Container\n              alignItems='center'\n              backgroundColor={getGlobalStyle('--color-neutral-gray-light')}\n              borderRadius={getGlobalStyle('--border-radius-2sm')}\n              justifyContent='center'\n              minHeight='36px'\n              minWidth='36px'\n              padding='4px 8px'\n              position='relative'\n              title={title}\n            >\n              <Text\n                fontSize='md'\n                fontWeight='bold'\n                textAlign='center'\n              >\n                {time}\n              </Text>\n\n              <Container\n                absoluteDefault='bottomLeft'\n                justifyContent='center'\n                margin='0 0 -16px 0'\n                position='absolute'\n              >\n                <Text fontSize='2xs'>\n                  {title}\n                </Text>\n              </Container>\n            </Container>\n\n            {\n              showDivider && (\n                <Container width='fit-content'>\n                  <Text fontSize='xs'>\n                    :\n                  </Text>\n                </Container>\n              )\n            }\n          </Row>\n        </Column>\n      </SmallScreen>\n    </>\n  )\n}\n\nexport const TimeCountDown = ({\n  endDate,\n  startDate,\n  onEnd,\n  onStart\n}: TimeCountDownProps) => {\n  const [timeSquares, setTimeSquares] = useState<TimeSquareProps[]>([])\n  const hasEnded = useRef(false)\n  const hasStarted = useRef(false)\n\n  const computeTimeSquares = () => {\n    const now = new Date()\n    const timeToEnd = endDate.getTime() - now.getTime()\n    const timeToStart = startDate.getTime() - now.getTime()\n\n    if (timeToStart <= 0 && !hasStarted.current && !hasEnded.current) {\n      onStart?.()\n      hasStarted.current = true\n    }\n    if (timeToEnd <= 0 && !hasEnded.current && hasStarted.current) {\n      onEnd?.()\n      hasEnded.current = true\n    }\n\n    const hours = Math.floor(timeToEnd / (1000 * 60 * 60))\n    const minutes = Math.floor((timeToEnd % (1000 * 60 * 60)) / (1000 * 60))\n    const seconds = Math.floor((timeToEnd % (1000 * 60)) / 1000)\n\n    setTimeSquares([\n      { time: hours, title: 'Horas', showDivider: true },\n      { time: minutes, title: 'Minutos', showDivider: true },\n      { time: seconds, title: 'Segundos' }\n    ])\n  }\n\n  useEffect(() => {\n    computeTimeSquares()\n    const timer = setInterval(() => {\n      computeTimeSquares()\n    }, 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [endDate, startDate])\n\n  return (\n    <Column width={'fit-content'}>\n      <Row gap={4}>\n        {\n          timeSquares?.map((timeSquare, index) => {\n            return (\n              <TimeSquare key={index} {...timeSquare} />\n            )\n          })\n        }\n      </Row>\n    </Column>\n  )\n}\n","import classNames from 'classnames'\nimport { useEffect, useState } from 'react'\nimport { getGlobalStyle } from '../../../helpers'\nimport {\n  Button,\n  Icon,\n  Picture,\n  Text\n} from '../../atoms'\nimport { Column, Row } from '../../layout'\nimport styles from './Toast.module.css'\n\nexport interface ToastProps {\n  button?: {\n    target?: string;\n    title?: string;\n    url?: string;\n  },\n  fixedPosition?: 'top' | 'bottom';\n  hideOnScroll?: boolean;\n  iconUrl?: string;\n  isFixed?: boolean;\n  message?: string;\n  showClose?: boolean;\n  title?: string;\n  onClose?: () => void;\n  onBlurButton?: () => void;\n}\n\nconst HIDE_SCROLL_OFFSET = 100\n\nexport const Toast = ({\n  button,\n  fixedPosition = 'top',\n  hideOnScroll = true,\n  iconUrl,\n  isFixed = false,\n  message,\n  showClose,\n  title,\n  onBlurButton,\n  onClose\n}: ToastProps): React.ReactElement<ToastProps> => {\n  const [isHidden, setHidden] = useState(false)\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const currentScrollY = window.scrollY\n      if (currentScrollY > HIDE_SCROLL_OFFSET) {\n        setHidden(true)\n      } else {\n        setHidden(false)\n      }\n    }\n\n    if (hideOnScroll) {\n      window.addEventListener('scroll', handleScroll)\n    }\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll)\n    }\n  }, [])\n\n  const handleClickButton = () => {\n    if (button?.url) {\n      window.open(button.url, button.target)\n    }\n    return onBlurButton && onBlurButton()\n  }\n\n  return (\n    <Row\n      absoluteDefault={fixedPosition === 'bottom' ? 'bottomLeft' : 'topLeft'}\n      alignItems='center'\n      aria-hidden={isHidden}\n      backgroundColor={getGlobalStyle('--color-base-white')}\n      customClassName={classNames(styles.toast, {\n        [styles[`toast--${fixedPosition}`]]: fixedPosition,\n        [styles['toast--hidden']]: isHidden\n      })}\n      data-testid='toast'\n      padding='4px 20px'\n      position={isFixed ? 'fixed' : 'initial'}\n      zIndex={getGlobalStyle('--z-index-5')}\n    >\n      <Column\n        padding='0 8px 0 0'\n        width='fit-content'\n      >\n        {showClose && (\n          <Icon\n            clickable='pointer'\n            color={getGlobalStyle('--color-neutral-gray-dark')}\n            name='Close'\n            onClick={onClose}\n          />\n        )}\n      </Column>\n      <Column>\n        <Row alignItems='center'>\n          <Column width='fit-content'>\n            {iconUrl && (\n              <Picture\n                alt={title}\n                height='40'\n                objectFit='contain'\n                src={iconUrl}\n                width='40'\n              />\n            )}\n          </Column>\n          <Column padding='10px'>\n            <Row>\n              <Text fontSize='sm' fontWeight='semibold'>{title}</Text>\n            </Row>\n            <Row>\n              <Text fontSize='xs'>{message}</Text>\n            </Row>\n          </Column>\n        </Row>\n      </Column>\n      <Column width='fit-content'>\n        {button && (\n          <Button\n            borderRadius={getGlobalStyle('--border-radius-full')}\n            fontSize={getGlobalStyle('--font-size-xs')}\n            height='auto'\n            label={button.title}\n            minWidth='100%'\n            onClick={handleClickButton}\n            padding={'6px 10px'}\n          />\n        )}\n      </Column>\n    </Row>\n  )\n}","export * from './Acordeon/Acordeon'\nexport * from './AddToCartAndQuantity/AddToCartAndQuantity'\nexport * from './AddToCartAndQuantityTop/AddToCartAndQuantityTop'\nexport * from './AddToCartQuoter/AddToCartQuoter'\nexport * from './Autocomplete/Autocomplete'\nexport * from './BackboneShelves/BackboneShelves'\nexport * from './Breadcrumbs/Breadcrumbs'\nexport * from './CartIcon/CartIcon'\nexport * from './Chip/Chip'\nexport * from './Collapsable/Collapsable'\nexport * from './Dropdown/Dropdown'\nexport * from './DropdownWithRound/DropdownWithRound'\nexport * from './Field/Field'\nexport * from './FilterModal/FilterModal'\nexport * from './Filtersbar/FiltersBar'\nexport * from './FiltersPills/FiltersPills'\nexport * from './IconBox/IconBox'\nexport * from './InputAdornment/InputAdornment'\nexport * from './InputIcon/InputIcon'\nexport * from './Modal/Modal'\nexport * from './MultipleSelector/MultipleSelector'\nexport * from './Notification/createNotification'\nexport * from './Notification/Notification'\nexport * from './Notification/NotificationAutoClose/NotificationAutoClose'\nexport * from './OffCanvas/OffCanvas'\nexport * from './OrderByRadioButtonList/OrderByRadioButtonList'\nexport * from './Pagination'\nexport * from './PasswordInput/PasswordInput'\nexport * from './QuantityButton/QuantityButton'\nexport * from './QuantityVariantButton/QuantityVariantButton'\nexport * from './RenderStringHtml/RenderStringHtml'\nexport * from './Selector/Selector'\nexport * from './SelectOrderBy/SelectOrderBy'\nexport * from './TimeCountDown/TimeCountDown'\nexport * from './Toast/Toast'\nexport * from './ValidationText/ValidationText'\n"],"names":[],"sourceRoot":""}