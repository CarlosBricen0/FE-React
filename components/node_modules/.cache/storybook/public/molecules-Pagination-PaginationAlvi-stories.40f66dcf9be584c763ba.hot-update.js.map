{"version":3,"file":"molecules-Pagination-PaginationAlvi-stories.40f66dcf9be584c763ba.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AAIA;AAEA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AAGA;AA1JA","sources":["webpack://components/./stories/molecules/Pagination/index.tsx"],"sourcesContent":["import React from 'react'\nimport classNames from 'classnames'\nimport { getGlobalStyle } from '../../../helpers'\nimport { Icon, Link, Text } from '../../atoms'\nimport {\n  Column,\n  Row,\n  Spacer\n} from '../../layout'\nimport { ChildrenBaseContainerProps } from '../../layout/BaseContainer/BaseContainer'\nimport style from './index.module.css'\n\nexport interface PaginationProps {\n  backgroundCurrent?: string;\n  currentPage: number;\n  isVisableButtonLeft?: boolean;\n  isVisableButtonRight?: boolean;\n  isVisableButtons?: boolean;\n  items: Array<number | string>;\n  linkWrapper?: React.FunctionComponent;\n  maxWidth?: string;\n  path?: string;\n  redirect?: boolean;\n  urlParams?: string;\n  handleNextPage?: () => void\n  handleOnClick: (value?: number) => void\n  handlePrevPage?: () => void\n}\n\nexport const Pagination = ({\n  backgroundCurrent = getGlobalStyle('--color-background-primary'),\n  currentPage = 0,\n  isVisableButtonLeft = false,\n  isVisableButtonRight = false,\n  isVisableButtons = false,\n  items,\n  linkWrapper,\n  maxWidth = 'max-content',\n  path,\n  redirect = true,\n  urlParams = '',\n  handleNextPage,\n  handleOnClick,\n  handlePrevPage\n}: PaginationProps): React.ReactElement => {\n  const buttonProps: ChildrenBaseContainerProps = {\n    alignItems: 'center',\n    border: `1px solid ${getGlobalStyle('--color-neutral-gray-dark')}`,\n    borderRadius: '50%',\n    clickable: 'pointer',\n    justifyContent: 'center',\n    margin: '0 2px 0 2px',\n    maxWidth: 'max-content',\n    minHeight: '32px',\n    minWidth: '32px'\n  }\n\n  const getUrl = (item) => {\n    if (urlParams) {\n      return `${path}?${urlParams}&page=${item}`\n    }\n    return `${path}?page=${item}`\n  }\n\n  const borderWhite = `1px solid ${getGlobalStyle('--color-base-white')}`\n\n  const ItemPagination = ({ item }: { item: number }) => {\n    const itemCurrentPage = item === currentPage\n    return (\n      <Link\n        href={getUrl(item)}\n        onClick={() => {\n          handleOnClick(item)\n        }}\n        preventDefault={!redirect}\n        underline='none'\n        wrapper={linkWrapper}\n      >\n        <Column\n          {...buttonProps}\n          backgroundColor={itemCurrentPage ? backgroundCurrent : 'tranparent'}\n          border={borderWhite}\n          customClassName={classNames(\n            style['no-select'],\n            style['item--base'],\n            { [style['animation--select']]: itemCurrentPage }\n          )}\n        >\n          <Text\n            clickable='pointer'\n            color={itemCurrentPage ? 'white' : 'black'}\n            fontSize='lg'\n            fontWeight={itemCurrentPage ? 'bold' : 'semibold'}\n          >\n            {item}\n          </Text>\n        </Column>\n      </Link>\n    )\n  }\n\n  const ItemDotted = () => {\n    return (\n      <Column\n        {...buttonProps}\n        border={borderWhite}\n        customClassName={style['no-select']}\n      >\n        ...\n      </Column>\n    )\n  }\n\n  return (\n    <Column\n      alignItems='center'\n      justifyContent='center'\n      maxWidth={maxWidth}\n    >\n      <Row justifyContent='between'>\n        {isVisableButtons && isVisableButtonLeft\n          ? (\n            <Link\n              href={getUrl(currentPage - 1)}\n              onClick={handlePrevPage}\n              preventDefault={!redirect}\n              underline='none'\n              wrapper={linkWrapper}\n            >\n              <Column {...buttonProps}>\n                <Icon\n                  clickable='pointer'\n                  color={getGlobalStyle('--color-icons-gray')}\n                  name='ArrowBackNavigate'\n                />\n              </Column>\n            </Link>\n          )\n          : (\n            <Column maxWidth='max-content'>\n              <Spacer.Vertical size={32} />\n            </Column>\n          )\n        }\n        <Column>\n          <Row\n            justifyContent='center'\n            padding='0 12px'\n          >\n            {items?.map(item => {\n              if (typeof item !== 'number') return <ItemDotted key={item} />\n              return <ItemPagination item={item} key={item} />\n            })}\n          </Row>\n        </Column>\n        {\n          isVisableButtons && isVisableButtonRight\n            ? (\n              <Link\n                href={getUrl(currentPage + 1)}\n                onClick={handleNextPage}\n                preventDefault={!redirect}\n                underline='none'\n                wrapper={linkWrapper}\n              >\n                <Column {...buttonProps} >\n                  <Icon\n                    clickable='pointer'\n                    color={getGlobalStyle('--color-icons-gray')}\n                    name='ArrowRightNavigate'\n                  />\n                </Column>\n              </Link>\n            )\n            : (\n              <Column maxWidth='max-content'>\n                <Spacer.Vertical size={32} />\n              </Column>\n            )\n        }\n      </Row >\n    </Column >\n  )\n}\n"],"names":[],"sourceRoot":""}